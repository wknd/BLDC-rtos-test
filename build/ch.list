
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001d0 <Reset_Handler>:
 80001d0:	b672      	cpsid	i
 80001d2:	4837      	ldr	r0, [pc, #220]	; (80002b0 <endfiniloop+0x4>)
 80001d4:	f380 8809 	msr	PSP, r0
 80001d8:	4836      	ldr	r0, [pc, #216]	; (80002b4 <endfiniloop+0x8>)
 80001da:	f64e 5108 	movw	r1, #60680	; 0xed08
 80001de:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001e2:	6008      	str	r0, [r1, #0]
 80001e4:	f240 0000 	movw	r0, #0
 80001e8:	f2cc 0000 	movt	r0, #49152	; 0xc000
 80001ec:	f64e 7134 	movw	r1, #61236	; 0xef34
 80001f0:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001f4:	6008      	str	r0, [r1, #0]
 80001f6:	f3bf 8f4f 	dsb	sy
 80001fa:	f3bf 8f6f 	isb	sy
 80001fe:	f240 0000 	movw	r0, #0
 8000202:	f2c0 00f0 	movt	r0, #240	; 0xf0
 8000206:	f64e 5188 	movw	r1, #60808	; 0xed88
 800020a:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800020e:	6008      	str	r0, [r1, #0]
 8000210:	f3bf 8f4f 	dsb	sy
 8000214:	f3bf 8f6f 	isb	sy
 8000218:	f04f 0000 	mov.w	r0, #0
 800021c:	eee1 0a10 	vmsr	fpscr, r0
 8000220:	f64e 713c 	movw	r1, #61244	; 0xef3c
 8000224:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8000228:	6008      	str	r0, [r1, #0]
 800022a:	2006      	movs	r0, #6
 800022c:	f380 8814 	msr	CONTROL, r0
 8000230:	f3bf 8f6f 	isb	sy
 8000234:	f001 fb0c 	bl	8001850 <__core_init>
 8000238:	f001 fc2a 	bl	8001a90 <__early_init>
 800023c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 8000240:	491d      	ldr	r1, [pc, #116]	; (80002b8 <endfiniloop+0xc>)
 8000242:	4a1e      	ldr	r2, [pc, #120]	; (80002bc <endfiniloop+0x10>)

08000244 <msloop>:
 8000244:	4291      	cmp	r1, r2
 8000246:	bf3c      	itt	cc
 8000248:	f841 0b04 	strcc.w	r0, [r1], #4
 800024c:	e7fa      	bcc.n	8000244 <msloop>
 800024e:	491c      	ldr	r1, [pc, #112]	; (80002c0 <endfiniloop+0x14>)
 8000250:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <endfiniloop+0x4>)

08000252 <psloop>:
 8000252:	4291      	cmp	r1, r2
 8000254:	bf3c      	itt	cc
 8000256:	f841 0b04 	strcc.w	r0, [r1], #4
 800025a:	e7fa      	bcc.n	8000252 <psloop>
 800025c:	4919      	ldr	r1, [pc, #100]	; (80002c4 <endfiniloop+0x18>)
 800025e:	4a1a      	ldr	r2, [pc, #104]	; (80002c8 <endfiniloop+0x1c>)
 8000260:	4b1a      	ldr	r3, [pc, #104]	; (80002cc <endfiniloop+0x20>)

08000262 <dloop>:
 8000262:	429a      	cmp	r2, r3
 8000264:	bf3e      	ittt	cc
 8000266:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800026a:	f842 0b04 	strcc.w	r0, [r2], #4
 800026e:	e7f8      	bcc.n	8000262 <dloop>
 8000270:	2000      	movs	r0, #0
 8000272:	4917      	ldr	r1, [pc, #92]	; (80002d0 <endfiniloop+0x24>)
 8000274:	4a17      	ldr	r2, [pc, #92]	; (80002d4 <endfiniloop+0x28>)

08000276 <bloop>:
 8000276:	4291      	cmp	r1, r2
 8000278:	bf3c      	itt	cc
 800027a:	f841 0b04 	strcc.w	r0, [r1], #4
 800027e:	e7fa      	bcc.n	8000276 <bloop>
 8000280:	f001 faa6 	bl	80017d0 <__init_ram_areas>
 8000284:	f001 fadc 	bl	8001840 <__late_init>
 8000288:	4c13      	ldr	r4, [pc, #76]	; (80002d8 <endfiniloop+0x2c>)
 800028a:	4d14      	ldr	r5, [pc, #80]	; (80002dc <endfiniloop+0x30>)

0800028c <initloop>:
 800028c:	42ac      	cmp	r4, r5
 800028e:	da03      	bge.n	8000298 <endinitloop>
 8000290:	f854 1b04 	ldr.w	r1, [r4], #4
 8000294:	4788      	blx	r1
 8000296:	e7f9      	b.n	800028c <initloop>

08000298 <endinitloop>:
 8000298:	f001 fcda 	bl	8001c50 <main>
 800029c:	4c10      	ldr	r4, [pc, #64]	; (80002e0 <endfiniloop+0x34>)
 800029e:	4d11      	ldr	r5, [pc, #68]	; (80002e4 <endfiniloop+0x38>)

080002a0 <finiloop>:
 80002a0:	42ac      	cmp	r4, r5
 80002a2:	da03      	bge.n	80002ac <endfiniloop>
 80002a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80002a8:	4788      	blx	r1
 80002aa:	e7f9      	b.n	80002a0 <finiloop>

080002ac <endfiniloop>:
 80002ac:	f001 bac0 	b.w	8001830 <__default_exit>
 80002b0:	20000800 	.word	0x20000800
 80002b4:	08000000 	.word	0x08000000
 80002b8:	20000000 	.word	0x20000000
 80002bc:	20000400 	.word	0x20000400
 80002c0:	20000400 	.word	0x20000400
 80002c4:	0800506c 	.word	0x0800506c
 80002c8:	20000800 	.word	0x20000800
 80002cc:	2000080c 	.word	0x2000080c
 80002d0:	20000810 	.word	0x20000810
 80002d4:	2000320c 	.word	0x2000320c
 80002d8:	080001c0 	.word	0x080001c0
 80002dc:	080001c4 	.word	0x080001c4
 80002e0:	080001c4 	.word	0x080001c4
 80002e4:	080001c4 	.word	0x080001c4

080002e8 <_port_switch>:
 80002e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ec:	ed2d 8a10 	vpush	{s16-s31}
 80002f0:	f8c1 d00c 	str.w	sp, [r1, #12]
 80002f4:	68c3      	ldr	r3, [r0, #12]
 80002f6:	469d      	mov	sp, r3
 80002f8:	ecbd 8a10 	vpop	{s16-s31}
 80002fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000300 <_port_thread_start>:
 8000300:	f000 ffd6 	bl	80012b0 <_dbg_check_unlock>
 8000304:	2300      	movs	r3, #0
 8000306:	f383 8811 	msr	BASEPRI, r3
 800030a:	4628      	mov	r0, r5
 800030c:	47a0      	blx	r4
 800030e:	2000      	movs	r0, #0
 8000310:	f001 f9fe 	bl	8001710 <chThdExit>

08000314 <_port_switch_from_isr>:
 8000314:	f000 ffdc 	bl	80012d0 <_dbg_check_lock>
 8000318:	f000 faa2 	bl	8000860 <chSchDoReschedule>
 800031c:	f000 ffc8 	bl	80012b0 <_dbg_check_unlock>

08000320 <_port_exit_from_isr>:
 8000320:	df00      	svc	0
 8000322:	e7fe      	b.n	8000322 <_port_exit_from_isr+0x2>

08000324 <memcpy>:
 8000324:	4684      	mov	ip, r0
 8000326:	ea41 0300 	orr.w	r3, r1, r0
 800032a:	f013 0303 	ands.w	r3, r3, #3
 800032e:	d16d      	bne.n	800040c <memcpy+0xe8>
 8000330:	3a40      	subs	r2, #64	; 0x40
 8000332:	d341      	bcc.n	80003b8 <memcpy+0x94>
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a0:	f840 3b04 	str.w	r3, [r0], #4
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	3a40      	subs	r2, #64	; 0x40
 80003b6:	d2bd      	bcs.n	8000334 <memcpy+0x10>
 80003b8:	3230      	adds	r2, #48	; 0x30
 80003ba:	d311      	bcc.n	80003e0 <memcpy+0xbc>
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c8:	f840 3b04 	str.w	r3, [r0], #4
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d8:	f840 3b04 	str.w	r3, [r0], #4
 80003dc:	3a10      	subs	r2, #16
 80003de:	d2ed      	bcs.n	80003bc <memcpy+0x98>
 80003e0:	320c      	adds	r2, #12
 80003e2:	d305      	bcc.n	80003f0 <memcpy+0xcc>
 80003e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e8:	f840 3b04 	str.w	r3, [r0], #4
 80003ec:	3a04      	subs	r2, #4
 80003ee:	d2f9      	bcs.n	80003e4 <memcpy+0xc0>
 80003f0:	3204      	adds	r2, #4
 80003f2:	d008      	beq.n	8000406 <memcpy+0xe2>
 80003f4:	07d2      	lsls	r2, r2, #31
 80003f6:	bf1c      	itt	ne
 80003f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000400:	d301      	bcc.n	8000406 <memcpy+0xe2>
 8000402:	880b      	ldrh	r3, [r1, #0]
 8000404:	8003      	strh	r3, [r0, #0]
 8000406:	4660      	mov	r0, ip
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	2a08      	cmp	r2, #8
 800040e:	d313      	bcc.n	8000438 <memcpy+0x114>
 8000410:	078b      	lsls	r3, r1, #30
 8000412:	d08d      	beq.n	8000330 <memcpy+0xc>
 8000414:	f010 0303 	ands.w	r3, r0, #3
 8000418:	d08a      	beq.n	8000330 <memcpy+0xc>
 800041a:	f1c3 0304 	rsb	r3, r3, #4
 800041e:	1ad2      	subs	r2, r2, r3
 8000420:	07db      	lsls	r3, r3, #31
 8000422:	bf1c      	itt	ne
 8000424:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000428:	f800 3b01 	strbne.w	r3, [r0], #1
 800042c:	d380      	bcc.n	8000330 <memcpy+0xc>
 800042e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000432:	f820 3b02 	strh.w	r3, [r0], #2
 8000436:	e77b      	b.n	8000330 <memcpy+0xc>
 8000438:	3a04      	subs	r2, #4
 800043a:	d3d9      	bcc.n	80003f0 <memcpy+0xcc>
 800043c:	3a01      	subs	r2, #1
 800043e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000442:	f800 3b01 	strb.w	r3, [r0], #1
 8000446:	d2f9      	bcs.n	800043c <memcpy+0x118>
 8000448:	780b      	ldrb	r3, [r1, #0]
 800044a:	7003      	strb	r3, [r0, #0]
 800044c:	784b      	ldrb	r3, [r1, #1]
 800044e:	7043      	strb	r3, [r0, #1]
 8000450:	788b      	ldrb	r3, [r1, #2]
 8000452:	7083      	strb	r3, [r0, #2]
 8000454:	4660      	mov	r0, ip
 8000456:	4770      	bx	lr
	...

08000460 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 8000460:	b480      	push	{r7}
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8000462:	4a09      	ldr	r2, [pc, #36]	; (8000488 <SVC_Handler+0x28>)
 8000464:	6853      	ldr	r3, [r2, #4]
 8000466:	f023 0301 	bic.w	r3, r3, #1
void SVC_Handler(void) {
 800046a:	af00      	add	r7, sp, #0
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 800046c:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800046e:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000472:	3368      	adds	r3, #104	; 0x68
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000474:	f383 8809 	msr	PSP, r3
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000478:	2300      	movs	r3, #0
 800047a:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	e000ef30 	.word	0xe000ef30
 800048c:	00000000 	.word	0x00000000

08000490 <_idle_thread.lto_priv.81>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000490:	e7fe      	b.n	8000490 <_idle_thread.lto_priv.81>
 8000492:	bf00      	nop
	...

080004a0 <pwm_lld_disable_channel>:
 * @notapi
 */
void pwm_lld_disable_channel(PWMDriver *pwmp, pwmchannel_t channel) {

#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = 0;
 80004a0:	6983      	ldr	r3, [r0, #24]
 80004a2:	f101 020c 	add.w	r2, r1, #12
 80004a6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80004aa:	2000      	movs	r0, #0
 80004ac:	6050      	str	r0, [r2, #4]
  pwmp->tim->DIER &= ~(2 << channel);
 80004ae:	68da      	ldr	r2, [r3, #12]
 80004b0:	2002      	movs	r0, #2
 80004b2:	fa00 f101 	lsl.w	r1, r0, r1
 80004b6:	ea22 0101 	bic.w	r1, r2, r1
 80004ba:	60d9      	str	r1, [r3, #12]
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <pwm_lld_start>:
void pwm_lld_start(PWMDriver *pwmp) {
 80004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (pwmp->state == PWM_STOP) {
 80004c2:	7803      	ldrb	r3, [r0, #0]
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d058      	beq.n	800057a <pwm_lld_start+0xba>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 80004c8:	6983      	ldr	r3, [r0, #24]
 80004ca:	4e5d      	ldr	r6, [pc, #372]	; (8000640 <pwm_lld_start+0x180>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 80004d0:	635a      	str	r2, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 80004d2:	639a      	str	r2, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 80004d4:	63da      	str	r2, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 80004d6:	641a      	str	r2, [r3, #64]	; 0x40
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 80004d8:	625a      	str	r2, [r3, #36]	; 0x24
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 80004da:	6844      	ldr	r4, [r0, #4]
  pwmp->tim->ARR  = pwmp->period - 1;
 80004dc:	6885      	ldr	r5, [r0, #8]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80004de:	68e7      	ldr	r7, [r4, #12]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 80004e0:	6821      	ldr	r1, [r4, #0]
 80004e2:	6942      	ldr	r2, [r0, #20]
 80004e4:	fbb2 f2f1 	udiv	r2, r2, r1
 80004e8:	1e51      	subs	r1, r2, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80004ea:	f007 020f 	and.w	r2, r7, #15
  pwmp->tim->PSC  = psc;
 80004ee:	6299      	str	r1, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 80004f0:	3d01      	subs	r5, #1
  pwmp->tim->CR2  = pwmp->config->cr2;
 80004f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  pwmp->tim->ARR  = pwmp->period - 1;
 80004f4:	62dd      	str	r5, [r3, #44]	; 0x2c
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80004f6:	2a01      	cmp	r2, #1
  pwmp->tim->CR2  = pwmp->config->cr2;
 80004f8:	6059      	str	r1, [r3, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80004fa:	d03c      	beq.n	8000576 <pwm_lld_start+0xb6>
 80004fc:	2a02      	cmp	r2, #2
 80004fe:	d138      	bne.n	8000572 <pwm_lld_start+0xb2>
    ccer |= STM32_TIM_CCER_CC1E;
 8000500:	f042 0201 	orr.w	r2, r2, #1
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8000504:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8000508:	f00e 010f 	and.w	r1, lr, #15
 800050c:	2901      	cmp	r1, #1
 800050e:	d028      	beq.n	8000562 <pwm_lld_start+0xa2>
 8000510:	2902      	cmp	r1, #2
 8000512:	d024      	beq.n	800055e <pwm_lld_start+0x9e>
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 8000514:	69e5      	ldr	r5, [r4, #28]
 8000516:	f005 010f 	and.w	r1, r5, #15
 800051a:	2901      	cmp	r1, #1
 800051c:	d01c      	beq.n	8000558 <pwm_lld_start+0x98>
 800051e:	2902      	cmp	r1, #2
 8000520:	d018      	beq.n	8000554 <pwm_lld_start+0x94>
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 8000522:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000524:	f001 010f 	and.w	r1, r1, #15
 8000528:	2901      	cmp	r1, #1
 800052a:	d01f      	beq.n	800056c <pwm_lld_start+0xac>
 800052c:	2902      	cmp	r1, #2
 800052e:	d01b      	beq.n	8000568 <pwm_lld_start+0xa8>
  if (&PWMD8 == pwmp) {
 8000530:	42b0      	cmp	r0, r6
 8000532:	d02e      	beq.n	8000592 <pwm_lld_start+0xd2>
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
 8000534:	6b21      	ldr	r1, [r4, #48]	; 0x30
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8000536:	6b60      	ldr	r0, [r4, #52]	; 0x34
  pwmp->tim->CCER  = ccer;
 8000538:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 800053a:	2501      	movs	r5, #1
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
 800053c:	f441 4200 	orr.w	r2, r1, #32768	; 0x8000
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8000540:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8000544:	2400      	movs	r4, #0
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8000546:	2185      	movs	r1, #133	; 0x85
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8000548:	615d      	str	r5, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 800054a:	611c      	str	r4, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 800054c:	60d8      	str	r0, [r3, #12]
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
 800054e:	645a      	str	r2, [r3, #68]	; 0x44
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8000550:	6019      	str	r1, [r3, #0]
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccer |= STM32_TIM_CCER_CC3P;
 8000554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
 8000558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800055c:	e7e1      	b.n	8000522 <pwm_lld_start+0x62>
    ccer |= STM32_TIM_CCER_CC2P;
 800055e:	f042 0220 	orr.w	r2, r2, #32
    ccer |= STM32_TIM_CCER_CC2E;
 8000562:	f042 0210 	orr.w	r2, r2, #16
 8000566:	e7d5      	b.n	8000514 <pwm_lld_start+0x54>
    ccer |= STM32_TIM_CCER_CC4P;
 8000568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
 800056c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000570:	e7de      	b.n	8000530 <pwm_lld_start+0x70>
  ccer = 0;
 8000572:	2200      	movs	r2, #0
 8000574:	e7c6      	b.n	8000504 <pwm_lld_start+0x44>
 8000576:	2200      	movs	r2, #0
 8000578:	e7c2      	b.n	8000500 <pwm_lld_start+0x40>
    if (&PWMD3 == pwmp) {
 800057a:	4b32      	ldr	r3, [pc, #200]	; (8000644 <pwm_lld_start+0x184>)
 800057c:	4298      	cmp	r0, r3
 800057e:	d047      	beq.n	8000610 <pwm_lld_start+0x150>
    if (&PWMD8 == pwmp) {
 8000580:	4e2f      	ldr	r6, [pc, #188]	; (8000640 <pwm_lld_start+0x180>)
 8000582:	42b0      	cmp	r0, r6
 8000584:	d026      	beq.n	80005d4 <pwm_lld_start+0x114>
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8000586:	6983      	ldr	r3, [r0, #24]
 8000588:	f646 0268 	movw	r2, #26728	; 0x6868
 800058c:	619a      	str	r2, [r3, #24]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 800058e:	61da      	str	r2, [r3, #28]
 8000590:	e7a3      	b.n	80004da <pwm_lld_start+0x1a>
    switch (pwmp->config->channels[0].mode & PWM_COMPLEMENTARY_OUTPUT_MASK) {
 8000592:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
 8000596:	2f10      	cmp	r7, #16
 8000598:	d003      	beq.n	80005a2 <pwm_lld_start+0xe2>
 800059a:	2f20      	cmp	r7, #32
 800059c:	d103      	bne.n	80005a6 <pwm_lld_start+0xe6>
      ccer |= STM32_TIM_CCER_CC1NP;
 800059e:	f042 0208 	orr.w	r2, r2, #8
      ccer |= STM32_TIM_CCER_CC1NE;
 80005a2:	f042 0204 	orr.w	r2, r2, #4
    switch (pwmp->config->channels[1].mode & PWM_COMPLEMENTARY_OUTPUT_MASK) {
 80005a6:	f00e 0ef0 	and.w	lr, lr, #240	; 0xf0
 80005aa:	f1be 0f10 	cmp.w	lr, #16
 80005ae:	d004      	beq.n	80005ba <pwm_lld_start+0xfa>
 80005b0:	f1be 0f20 	cmp.w	lr, #32
 80005b4:	d103      	bne.n	80005be <pwm_lld_start+0xfe>
      ccer |= STM32_TIM_CCER_CC2NP;
 80005b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      ccer |= STM32_TIM_CCER_CC2NE;
 80005ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    switch (pwmp->config->channels[2].mode & PWM_COMPLEMENTARY_OUTPUT_MASK) {
 80005be:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80005c2:	2d10      	cmp	r5, #16
 80005c4:	d003      	beq.n	80005ce <pwm_lld_start+0x10e>
 80005c6:	2d20      	cmp	r5, #32
 80005c8:	d1b4      	bne.n	8000534 <pwm_lld_start+0x74>
      ccer |= STM32_TIM_CCER_CC3NP;
 80005ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      ccer |= STM32_TIM_CCER_CC3NE;
 80005ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005d2:	e7af      	b.n	8000534 <pwm_lld_start+0x74>
      rccEnableTIM8(FALSE);
 80005d4:	4a1c      	ldr	r2, [pc, #112]	; (8000648 <pwm_lld_start+0x188>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <pwm_lld_start+0x18c>)
 80005d8:	6c51      	ldr	r1, [r2, #68]	; 0x44
      pwmp->clock = STM32_TIMCLK2;
 80005da:	4d1d      	ldr	r5, [pc, #116]	; (8000650 <pwm_lld_start+0x190>)
      rccEnableTIM8(FALSE);
 80005dc:	f041 0102 	orr.w	r1, r1, #2
 80005e0:	6451      	str	r1, [r2, #68]	; 0x44
      rccResetTIM8();
 80005e2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80005e4:	2700      	movs	r7, #0
 80005e6:	f041 0102 	orr.w	r1, r1, #2
 80005ea:	6251      	str	r1, [r2, #36]	; 0x24
 80005ec:	2470      	movs	r4, #112	; 0x70
 80005ee:	6257      	str	r7, [r2, #36]	; 0x24
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80005f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80005f8:	f883 432c 	strb.w	r4, [r3, #812]	; 0x32c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80005fc:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000600:	6059      	str	r1, [r3, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000602:	f883 432e 	strb.w	r4, [r3, #814]	; 0x32e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000606:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800060a:	605a      	str	r2, [r3, #4]
      pwmp->clock = STM32_TIMCLK2;
 800060c:	6145      	str	r5, [r0, #20]
 800060e:	e7ba      	b.n	8000586 <pwm_lld_start+0xc6>
      rccEnableTIM3(FALSE);
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <pwm_lld_start+0x188>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000612:	4a0e      	ldr	r2, [pc, #56]	; (800064c <pwm_lld_start+0x18c>)
 8000614:	6c19      	ldr	r1, [r3, #64]	; 0x40
      pwmp->clock = STM32_TIMCLK1;
 8000616:	4d0f      	ldr	r5, [pc, #60]	; (8000654 <pwm_lld_start+0x194>)
      rccEnableTIM3(FALSE);
 8000618:	f041 0102 	orr.w	r1, r1, #2
 800061c:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM3();
 800061e:	6a19      	ldr	r1, [r3, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000620:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 8000624:	2700      	movs	r7, #0
 8000626:	f041 0102 	orr.w	r1, r1, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800062a:	2670      	movs	r6, #112	; 0x70
 800062c:	6219      	str	r1, [r3, #32]
 800062e:	621f      	str	r7, [r3, #32]
 8000630:	f882 631d 	strb.w	r6, [r2, #797]	; 0x31d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000634:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000638:	6014      	str	r4, [r2, #0]
      pwmp->clock = STM32_TIMCLK1;
 800063a:	6145      	str	r5, [r0, #20]
 800063c:	e7a0      	b.n	8000580 <pwm_lld_start+0xc0>
 800063e:	bf00      	nop
 8000640:	20000ac8 	.word	0x20000ac8
 8000644:	200031e4 	.word	0x200031e4
 8000648:	40023800 	.word	0x40023800
 800064c:	e000e100 	.word	0xe000e100
 8000650:	0aba9500 	.word	0x0aba9500
 8000654:	055d4a80 	.word	0x055d4a80
	...

08000660 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8000660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000664:	f002 0a03 	and.w	sl, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8000668:	f3c2 0880 	ubfx	r8, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800066c:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8000670:	f3c2 1e41 	ubfx	lr, r2, #5, #2
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000674:	46d1      	mov	r9, sl
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8000676:	f3c2 12c3 	ubfx	r2, r2, #7, #4
  uint32_t bit     = 0;
 800067a:	2700      	movs	r7, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 800067c:	f04f 0b0f 	mov.w	fp, #15
 8000680:	e00f      	b.n	80006a2 <_pal_lld_setgroupmode+0x42>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000682:	6a03      	ldr	r3, [r0, #32]
 8000684:	ea23 0404 	bic.w	r4, r3, r4
 8000688:	4325      	orrs	r5, r4
 800068a:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 800068c:	0849      	lsrs	r1, r1, #1
 800068e:	d039      	beq.n	8000704 <_pal_lld_setgroupmode+0xa4>
      return;
    otyper <<= 1;
 8000690:	ea4f 0848 	mov.w	r8, r8, lsl #1
    ospeedr <<= 2;
 8000694:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
 8000698:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
 800069c:	ea4f 0989 	mov.w	r9, r9, lsl #2
    bit++;
 80006a0:	3701      	adds	r7, #1
    if ((mask & 1) != 0) {
 80006a2:	07cb      	lsls	r3, r1, #31
 80006a4:	d5f2      	bpl.n	800068c <_pal_lld_setgroupmode+0x2c>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80006a6:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 80006a8:	2401      	movs	r4, #1
 80006aa:	40bc      	lsls	r4, r7
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80006ac:	ea23 0304 	bic.w	r3, r3, r4
 80006b0:	ea43 0308 	orr.w	r3, r3, r8
 80006b4:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 80006b6:	2503      	movs	r5, #3
 80006b8:	007b      	lsls	r3, r7, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80006ba:	6884      	ldr	r4, [r0, #8]
      m2 = 3 << (bit * 2);
 80006bc:	fa05 f303 	lsl.w	r3, r5, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80006c0:	43db      	mvns	r3, r3
 80006c2:	401c      	ands	r4, r3
 80006c4:	ea44 040c 	orr.w	r4, r4, ip
 80006c8:	6084      	str	r4, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80006ca:	68c5      	ldr	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 80006cc:	f007 0407 	and.w	r4, r7, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80006d0:	401d      	ands	r5, r3
 80006d2:	ea45 050e 	orr.w	r5, r5, lr
      altrmask = altr << ((bit & 7) * 4);
 80006d6:	00a4      	lsls	r4, r4, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80006d8:	f1ba 0f02 	cmp.w	sl, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80006dc:	60c5      	str	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 80006de:	fa02 f504 	lsl.w	r5, r2, r4
      m4 = 15 << ((bit & 7) * 4);
 80006e2:	fa0b f404 	lsl.w	r4, fp, r4
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80006e6:	d00f      	beq.n	8000708 <_pal_lld_setgroupmode+0xa8>
        port->MODER   = (port->MODER & ~m2) | moder;
 80006e8:	6806      	ldr	r6, [r0, #0]
 80006ea:	4033      	ands	r3, r6
 80006ec:	ea43 0309 	orr.w	r3, r3, r9
        if (bit < 8)
 80006f0:	2f07      	cmp	r7, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 80006f2:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 80006f4:	d9c5      	bls.n	8000682 <_pal_lld_setgroupmode+0x22>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80006f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80006f8:	ea23 0404 	bic.w	r4, r3, r4
 80006fc:	4325      	orrs	r5, r4
    if (!mask)
 80006fe:	0849      	lsrs	r1, r1, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000700:	6245      	str	r5, [r0, #36]	; 0x24
    if (!mask)
 8000702:	d1c5      	bne.n	8000690 <_pal_lld_setgroupmode+0x30>
 8000704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bit < 8)
 8000708:	2f07      	cmp	r7, #7
 800070a:	d80a      	bhi.n	8000722 <_pal_lld_setgroupmode+0xc2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800070c:	6a06      	ldr	r6, [r0, #32]
 800070e:	ea26 0404 	bic.w	r4, r6, r4
 8000712:	4325      	orrs	r5, r4
 8000714:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8000716:	6804      	ldr	r4, [r0, #0]
 8000718:	4023      	ands	r3, r4
 800071a:	ea43 0309 	orr.w	r3, r3, r9
 800071e:	6003      	str	r3, [r0, #0]
 8000720:	e7b4      	b.n	800068c <_pal_lld_setgroupmode+0x2c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000722:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8000724:	ea26 0404 	bic.w	r4, r6, r4
 8000728:	4325      	orrs	r5, r4
 800072a:	6245      	str	r5, [r0, #36]	; 0x24
 800072c:	e7f3      	b.n	8000716 <_pal_lld_setgroupmode+0xb6>
 800072e:	bf00      	nop

08000730 <_port_irq_epilogue>:
 8000730:	2320      	movs	r3, #32
 8000732:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <_port_irq_epilogue+0x58>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800073e:	d102      	bne.n	8000746 <_port_irq_epilogue+0x16>
 8000740:	f383 8811 	msr	BASEPRI, r3
 8000744:	4770      	bx	lr
void _port_irq_epilogue(void) {
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
#if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800074a:	eef1 3a10 	vmrs	r3, fpscr
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800074e:	f3ef 8309 	mrs	r3, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <_port_irq_epilogue+0x5c>)
    ctxp->xpsr = (regarm_t)0x01000000;
 8000754:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8000758:	68d2      	ldr	r2, [r2, #12]
 800075a:	f843 2c08 	str.w	r2, [r3, #-8]
    ctxp->xpsr = (regarm_t)0x01000000;
 800075e:	f843 1c4c 	str.w	r1, [r3, #-76]
    ctxp--;
 8000762:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000766:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 800076a:	4a09      	ldr	r2, [pc, #36]	; (8000790 <_port_irq_epilogue+0x60>)
 800076c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800076e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000770:	6889      	ldr	r1, [r1, #8]
 8000772:	6892      	ldr	r2, [r2, #8]
 8000774:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000776:	bf8c      	ite	hi
 8000778:	4a06      	ldrhi	r2, [pc, #24]	; (8000794 <_port_irq_epilogue+0x64>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800077a:	4a07      	ldrls	r2, [pc, #28]	; (8000798 <_port_irq_epilogue+0x68>)
 800077c:	f843 2c50 	str.w	r2, [r3, #-80]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	e000ef30 	.word	0xe000ef30
 8000790:	20003164 	.word	0x20003164
 8000794:	08000315 	.word	0x08000315
 8000798:	08000320 	.word	0x08000320
 800079c:	00000000 	.word	0x00000000

080007a0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <chTMStopMeasurementX+0x40>)
 80007a4:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 80007a6:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80007a8:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 80007aa:	6887      	ldr	r7, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80007ac:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
  if (tmp->last > tmp->worst) {
 80007ae:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 80007b0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 80007b4:	1bdb      	subs	r3, r3, r7
 80007b6:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 80007b8:	18e4      	adds	r4, r4, r3
 80007ba:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 80007be:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 80007c0:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 80007c2:	bf88      	it	hi
 80007c4:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 80007c6:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 80007c8:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 80007ca:	e9c0 4504 	strd	r4, r5, [r0, #16]
  tmp->n++;
 80007ce:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 80007d0:	6083      	str	r3, [r0, #8]
    tmp->best = tmp->last;
 80007d2:	bf38      	it	cc
 80007d4:	6003      	strcc	r3, [r0, #0]
}
 80007d6:	bcf0      	pop	{r4, r5, r6, r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e0001000 	.word	0xe0001000
 80007e0:	20003164 	.word	0x20003164
	...

080007f0 <chDbgCheckClassS>:
 *
 * @api
 */
void chDbgCheckClassS(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <chDbgCheckClassS+0x18>)
 80007f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007f4:	b91a      	cbnz	r2, 80007fe <chDbgCheckClassS+0xe>
 80007f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	dd00      	ble.n	80007fe <chDbgCheckClassS+0xe>
 80007fc:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 80007fe:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8000800:	4a02      	ldr	r2, [pc, #8]	; (800080c <chDbgCheckClassS+0x1c>)
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
 8000804:	e7fe      	b.n	8000804 <chDbgCheckClassS+0x14>
 8000806:	bf00      	nop
 8000808:	20003164 	.word	0x20003164
 800080c:	08004d90 	.word	0x08004d90

08000810 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8000810:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8000812:	4c09      	ldr	r4, [pc, #36]	; (8000838 <chSchGoSleepS+0x28>)
 8000814:	69a1      	ldr	r1, [r4, #24]
  chDbgCheckClassS();
 8000816:	f7ff ffeb 	bl	80007f0 <chDbgCheckClassS>
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 800081a:	6823      	ldr	r3, [r4, #0]
  otp->state = newstate;
 800081c:	f881 0020 	strb.w	r0, [r1, #32]

  tqp->next             = tp->queue.next;
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	6022      	str	r2, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 8000824:	2501      	movs	r5, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000826:	6054      	str	r4, [r2, #4]
 8000828:	f883 5020 	strb.w	r5, [r3, #32]
  chSysSwitch(currp, otp);
 800082c:	4618      	mov	r0, r3
  currp = queue_fifo_remove(&ch.rlist.queue);
 800082e:	61a3      	str	r3, [r4, #24]
}
 8000830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 8000834:	f7ff bd58 	b.w	80002e8 <_port_switch>
 8000838:	20003164 	.word	0x20003164
 800083c:	00000000 	.word	0x00000000

08000840 <chDbgCheckClassI>:
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <chDbgCheckClassI+0x18>)
 8000842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000844:	2a00      	cmp	r2, #0
 8000846:	db03      	blt.n	8000850 <chDbgCheckClassI+0x10>
 8000848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800084a:	2a00      	cmp	r2, #0
 800084c:	dd00      	ble.n	8000850 <chDbgCheckClassI+0x10>
 800084e:	4770      	bx	lr
 8000850:	b672      	cpsid	i
 8000852:	4a02      	ldr	r2, [pc, #8]	; (800085c <chDbgCheckClassI+0x1c>)
 8000854:	62da      	str	r2, [r3, #44]	; 0x2c
 8000856:	e7fe      	b.n	8000856 <chDbgCheckClassI+0x16>
 8000858:	20003164 	.word	0x20003164
 800085c:	08004d88 	.word	0x08004d88

08000860 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000860:	b510      	push	{r4, lr}
  thread_t *otp = currp;
 8000862:	4c0f      	ldr	r4, [pc, #60]	; (80008a0 <chSchDoReschedule+0x40>)
  thread_t *tp = tqp->next;
 8000864:	6823      	ldr	r3, [r4, #0]
 8000866:	69a1      	ldr	r1, [r4, #24]
  tqp->next             = tp->queue.next;
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	6020      	str	r0, [r4, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 800086c:	2201      	movs	r2, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 800086e:	6044      	str	r4, [r0, #4]
 8000870:	f883 2020 	strb.w	r2, [r3, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000874:	61a3      	str	r3, [r4, #24]
  chDbgCheckClassI();
 8000876:	f7ff ffe3 	bl	8000840 <chDbgCheckClassI>
  tp->state = CH_STATE_READY;
 800087a:	2300      	movs	r3, #0
 800087c:	688a      	ldr	r2, [r1, #8]
 800087e:	f881 3020 	strb.w	r3, [r1, #32]
 8000882:	e000      	b.n	8000886 <chSchDoReschedule+0x26>
 8000884:	6800      	ldr	r0, [r0, #0]
  } while (cp->prio > tp->prio);
 8000886:	6883      	ldr	r3, [r0, #8]
 8000888:	4293      	cmp	r3, r2
 800088a:	d8fb      	bhi.n	8000884 <chSchDoReschedule+0x24>
  tp->queue.prev             = cp->queue.prev;
 800088c:	6843      	ldr	r3, [r0, #4]
 800088e:	e881 0009 	stmia.w	r1, {r0, r3}
  tp->queue.prev->queue.next = tp;
 8000892:	6019      	str	r1, [r3, #0]
  cp->queue.prev             = tp;
 8000894:	6041      	str	r1, [r0, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8000896:	69a0      	ldr	r0, [r4, #24]
}
 8000898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSysSwitch(currp, otp);
 800089c:	f7ff bd24 	b.w	80002e8 <_port_switch>
 80008a0:	20003164 	.word	0x20003164
	...

080008b0 <chSchRescheduleS>:
void chSchRescheduleS(void) {
 80008b0:	b508      	push	{r3, lr}
  chDbgCheckClassS();
 80008b2:	f7ff ff9d 	bl	80007f0 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 80008b6:	f7ff ffc3 	bl	8000840 <chDbgCheckClassI>

  return firstprio(&ch.rlist.queue) > currp->prio;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <chSchRescheduleS+0x24>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 80008c0:	6892      	ldr	r2, [r2, #8]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d800      	bhi.n	80008ca <chSchRescheduleS+0x1a>
 80008c8:	bd08      	pop	{r3, pc}
}
 80008ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    chSchDoRescheduleAhead();
 80008ce:	f7ff bfc7 	b.w	8000860 <chSchDoReschedule>
 80008d2:	bf00      	nop
 80008d4:	20003164 	.word	0x20003164
	...

080008e0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80008e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008e2:	b087      	sub	sp, #28
  chDbgCheckClassS();
 80008e4:	f7ff ff84 	bl	80007f0 <chDbgCheckClassS>
  if (TIME_INFINITE != time) {
 80008e8:	1c4b      	adds	r3, r1, #1
 80008ea:	d04e      	beq.n	800098a <chSchGoSleepTimeoutS+0xaa>
    chVTDoSetI(&vt, time, wakeup, currp);
 80008ec:	4c41      	ldr	r4, [pc, #260]	; (80009f4 <chSchGoSleepTimeoutS+0x114>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 80008ee:	4e42      	ldr	r6, [pc, #264]	; (80009f8 <chSchGoSleepTimeoutS+0x118>)
  chDbgCheckClassI();
 80008f0:	f7ff ffa6 	bl	8000840 <chDbgCheckClassI>
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80008f4:	4625      	mov	r5, r4
 80008f6:	2902      	cmp	r1, #2
 80008f8:	f855 3f1c 	ldr.w	r3, [r5, #28]!
 80008fc:	69a2      	ldr	r2, [r4, #24]
  vtp->par = par;
 80008fe:	9205      	str	r2, [sp, #20]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000900:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8000904:	bf38      	it	cc
 8000906:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000908:	42ab      	cmp	r3, r5
 800090a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  vtp->func = vtfunc;
 800090c:	9604      	str	r6, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800090e:	d05c      	beq.n	80009ca <chSchGoSleepTimeoutS+0xea>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
 8000910:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000912:	1b92      	subs	r2, r2, r6

    if (delta < now - ch.vtlist.lasttime) {
 8000914:	1889      	adds	r1, r1, r2
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8000916:	689a      	ldr	r2, [r3, #8]
    if (delta < now - ch.vtlist.lasttime) {
 8000918:	d233      	bcs.n	8000982 <chSchGoSleepTimeoutS+0xa2>
      p = p->next;
    }
    else if (delta < p->delta) {
 800091a:	4291      	cmp	r1, r2
     /* A small delay that will become the first element in the delta list
        and next deadline.*/
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
 800091c:	bf3c      	itt	cc
 800091e:	1876      	addcc	r6, r6, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000920:	637e      	strcc	r6, [r7, #52]	; 0x34
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8000922:	4291      	cmp	r1, r2
 8000924:	d904      	bls.n	8000930 <chSchGoSleepTimeoutS+0x50>
    delta -= p->delta;
    p = p->next;
 8000926:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 8000928:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 800092a:	689a      	ldr	r2, [r3, #8]
 800092c:	428a      	cmp	r2, r1
 800092e:	d3fa      	bcc.n	8000926 <chSchGoSleepTimeoutS+0x46>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8000930:	685a      	ldr	r2, [r3, #4]
 8000932:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
 8000934:	ae01      	add	r6, sp, #4
  vtp->next = p;
 8000936:	9301      	str	r3, [sp, #4]
  vtp->prev->next = vtp;
 8000938:	6016      	str	r6, [r2, #0]
  p->prev = vtp;
 800093a:	605e      	str	r6, [r3, #4]
  vtp->delta = delta
 800093c:	9103      	str	r1, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 800093e:	689a      	ldr	r2, [r3, #8]
 8000940:	1a51      	subs	r1, r2, r1
  ch.vtlist.delta = (systime_t)-1;
 8000942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->delta -= delta;
 8000946:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
 8000948:	6262      	str	r2, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 800094a:	f7ff ff61 	bl	8000810 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 800094e:	f7ff ff77 	bl	8000840 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 8000952:	9b04      	ldr	r3, [sp, #16]
 8000954:	b18b      	cbz	r3, 800097a <chSchGoSleepTimeoutS+0x9a>
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8000956:	f7ff ff73 	bl	8000840 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800095a:	69e3      	ldr	r3, [r4, #28]
 800095c:	42b3      	cmp	r3, r6
 800095e:	d01b      	beq.n	8000998 <chSchGoSleepTimeoutS+0xb8>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8000960:	9a02      	ldr	r2, [sp, #8]
 8000962:	9b01      	ldr	r3, [sp, #4]
 8000964:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8000966:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;
 8000968:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800096a:	42ab      	cmp	r3, r5
    vtp->next->prev = vtp->prev;
 800096c:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 800096e:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000970:	d003      	beq.n	800097a <chSchGoSleepTimeoutS+0x9a>
      vtp->next->delta += vtp->delta;
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	9903      	ldr	r1, [sp, #12]
 8000976:	440a      	add	r2, r1
 8000978:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 800097a:	69a3      	ldr	r3, [r4, #24]
}
 800097c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800097e:	b007      	add	sp, #28
 8000980:	bdf0      	pop	{r4, r5, r6, r7, pc}
      p = p->next;
 8000982:	681b      	ldr	r3, [r3, #0]
      delta -= p->delta;
 8000984:	1a89      	subs	r1, r1, r2
 8000986:	689a      	ldr	r2, [r3, #8]
 8000988:	e7cb      	b.n	8000922 <chSchGoSleepTimeoutS+0x42>
 800098a:	4c1a      	ldr	r4, [pc, #104]	; (80009f4 <chSchGoSleepTimeoutS+0x114>)
    chSchGoSleepS(newstate);
 800098c:	f7ff ff40 	bl	8000810 <chSchGoSleepS>
  return currp->u.rdymsg;
 8000990:	69a3      	ldr	r3, [r4, #24]
}
 8000992:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000994:	b007      	add	sp, #28
 8000996:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8000998:	9a01      	ldr	r2, [sp, #4]
 800099a:	61e2      	str	r2, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 800099c:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800099e:	42aa      	cmp	r2, r5
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80009a0:	6055      	str	r5, [r2, #4]
  vtp->func = NULL;
 80009a2:	9304      	str	r3, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80009a4:	d021      	beq.n	80009ea <chSchGoSleepTimeoutS+0x10a>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80009a6:	6893      	ldr	r3, [r2, #8]
 80009a8:	9803      	ldr	r0, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 80009aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 80009ac:	4403      	add	r3, r0
  return (systime_t)STM32_ST_TIM->CNT;
 80009ae:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80009b2:	6093      	str	r3, [r2, #8]
 80009b4:	6a68      	ldr	r0, [r5, #36]	; 0x24
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 80009b6:	1a42      	subs	r2, r0, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d9de      	bls.n	800097a <chSchGoSleepTimeoutS+0x9a>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 80009bc:	1a9b      	subs	r3, r3, r2
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
 80009be:	2b02      	cmp	r3, #2
 80009c0:	bf2c      	ite	cs
 80009c2:	18c3      	addcs	r3, r0, r3
 80009c4:	1c83      	addcc	r3, r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80009c6:	636b      	str	r3, [r5, #52]	; 0x34
 80009c8:	e7d7      	b.n	800097a <chSchGoSleepTimeoutS+0x9a>
      ch.vtlist.lasttime = now;
 80009ca:	62a2      	str	r2, [r4, #40]	; 0x28
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
 80009cc:	eb01 0e02 	add.w	lr, r1, r2
      ch.vtlist.next = vtp;
 80009d0:	ae01      	add	r6, sp, #4
  STM32_ST_TIM->SR     = 0;
 80009d2:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80009d4:	2302      	movs	r3, #2
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 80009d6:	9501      	str	r5, [sp, #4]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80009d8:	9502      	str	r5, [sp, #8]
      vtp->delta = delay;
 80009da:	9103      	str	r1, [sp, #12]
      ch.vtlist.next = vtp;
 80009dc:	61e6      	str	r6, [r4, #28]
      ch.vtlist.prev = vtp;
 80009de:	6226      	str	r6, [r4, #32]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80009e0:	f8c7 e034 	str.w	lr, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80009e4:	613a      	str	r2, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	e7af      	b.n	800094a <chSchGoSleepTimeoutS+0x6a>
  STM32_ST_TIM->DIER = 0;
 80009ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ee:	60d3      	str	r3, [r2, #12]
 80009f0:	e7c3      	b.n	800097a <chSchGoSleepTimeoutS+0x9a>
 80009f2:	bf00      	nop
 80009f4:	20003164 	.word	0x20003164
 80009f8:	08001251 	.word	0x08001251
 80009fc:	00000000 	.word	0x00000000

08000a00 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8000a00:	b169      	cbz	r1, 8000a1e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8000a04:	b410      	push	{r4}
 8000a06:	4602      	mov	r2, r0
  tp->queue.prev             = tqp->prev;
 8000a08:	6844      	ldr	r4, [r0, #4]
  queue_insert(currp, tqp);
 8000a0a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000a0c:	2004      	movs	r0, #4
 8000a0e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
 8000a12:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8000a14:	6053      	str	r3, [r2, #4]
}
 8000a16:	f85d 4b04 	ldr.w	r4, [sp], #4
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000a1a:	f7ff bf61 	b.w	80008e0 <chSchGoSleepTimeoutS>
}
 8000a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a22:	4770      	bx	lr
 8000a24:	20003164 	.word	0x20003164
	...

08000a30 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8000a30:	b510      	push	{r4, lr}
 8000a32:	4604      	mov	r4, r0
  chDbgCheckClassI();
 8000a34:	f7ff ff04 	bl	8000840 <chDbgCheckClassI>
  tp->state = CH_STATE_READY;
 8000a38:	2200      	movs	r2, #0
 8000a3a:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <chSchReadyI+0x28>)
  tp->state = CH_STATE_READY;
 8000a3e:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8000a42:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000a44:	689a      	ldr	r2, [r3, #8]
 8000a46:	428a      	cmp	r2, r1
 8000a48:	d2fb      	bcs.n	8000a42 <chSchReadyI+0x12>
  tp->queue.prev             = cp->queue.prev;
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 8000a4e:	6023      	str	r3, [r4, #0]
}
 8000a50:	4620      	mov	r0, r4
  tp->queue.prev->queue.next = tp;
 8000a52:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000a54:	605c      	str	r4, [r3, #4]
}
 8000a56:	bd10      	pop	{r4, pc}
 8000a58:	20003164 	.word	0x20003164
 8000a5c:	00000000 	.word	0x00000000

08000a60 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
 8000a62:	f7ff feed 	bl	8000840 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000a66:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000a68:	42a0      	cmp	r0, r4
 8000a6a:	d024      	beq.n	8000ab6 <chEvtBroadcastFlagsI+0x56>
 8000a6c:	4605      	mov	r5, r0
 8000a6e:	460f      	mov	r7, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8000a70:	2600      	movs	r6, #0
 8000a72:	e002      	b.n	8000a7a <chEvtBroadcastFlagsI+0x1a>
    elp = elp->next;
 8000a74:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000a76:	42a5      	cmp	r5, r4
 8000a78:	d01d      	beq.n	8000ab6 <chEvtBroadcastFlagsI+0x56>
    elp->flags |= flags;
 8000a7a:	68e3      	ldr	r3, [r4, #12]
 8000a7c:	433b      	orrs	r3, r7
 8000a7e:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8000a80:	b117      	cbz	r7, 8000a88 <chEvtBroadcastFlagsI+0x28>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 8000a82:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8000a84:	4213      	tst	r3, r2
 8000a86:	d0f5      	beq.n	8000a74 <chEvtBroadcastFlagsI+0x14>
      chEvtSignalI(elp->listener, elp->events);
 8000a88:	6860      	ldr	r0, [r4, #4]
  chDbgCheckClassI();
 8000a8a:	f7ff fed9 	bl	8000840 <chDbgCheckClassI>
  tp->epending |= events;
 8000a8e:	68a3      	ldr	r3, [r4, #8]
 8000a90:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000a92:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8000a96:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000a98:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8000a9a:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000a9c:	d00c      	beq.n	8000ab8 <chEvtBroadcastFlagsI+0x58>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000a9e:	2a0b      	cmp	r2, #11
 8000aa0:	d1e8      	bne.n	8000a74 <chEvtBroadcastFlagsI+0x14>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000aa2:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000aa4:	ea32 0303 	bics.w	r3, r2, r3
 8000aa8:	d1e4      	bne.n	8000a74 <chEvtBroadcastFlagsI+0x14>
    tp->u.rdymsg = MSG_OK;
 8000aaa:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000aac:	f7ff ffc0 	bl	8000a30 <chSchReadyI>
    elp = elp->next;
 8000ab0:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000ab2:	42a5      	cmp	r5, r4
 8000ab4:	d1e1      	bne.n	8000a7a <chEvtBroadcastFlagsI+0x1a>
 8000ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000ab8:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000aba:	4213      	tst	r3, r2
 8000abc:	d0da      	beq.n	8000a74 <chEvtBroadcastFlagsI+0x14>
    tp->u.rdymsg = MSG_OK;
 8000abe:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000ac0:	f7ff ffb6 	bl	8000a30 <chSchReadyI>
 8000ac4:	e7f4      	b.n	8000ab0 <chEvtBroadcastFlagsI+0x50>
 8000ac6:	bf00      	nop
	...

08000ad0 <_dbg_check_leave_isr>:
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000ad0:	2320      	movs	r3, #32
 8000ad2:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <_dbg_check_leave_isr+0x24>)
 8000ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ada:	2a00      	cmp	r2, #0
 8000adc:	dd01      	ble.n	8000ae2 <_dbg_check_leave_isr+0x12>
 8000ade:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ae0:	b119      	cbz	r1, 8000aea <_dbg_check_leave_isr+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae2:	b672      	cpsid	i
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <_dbg_check_leave_isr+0x28>)
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ae8:	e7fe      	b.n	8000ae8 <_dbg_check_leave_isr+0x18>
  ch.dbg.isr_cnt--;
 8000aea:	3a01      	subs	r2, #1
 8000aec:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000aee:	f381 8811 	msr	BASEPRI, r1
 8000af2:	4770      	bx	lr
 8000af4:	20003164 	.word	0x20003164
 8000af8:	08004d60 	.word	0x08004d60
 8000afc:	00000000 	.word	0x00000000

08000b00 <_dbg_check_enter_isr>:
 8000b00:	2320      	movs	r3, #32
 8000b02:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_dbg_check_enter_isr+0x24>)
 8000b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	db01      	blt.n	8000b12 <_dbg_check_enter_isr+0x12>
 8000b0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b10:	b119      	cbz	r1, 8000b1a <_dbg_check_enter_isr+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b12:	b672      	cpsid	i
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <_dbg_check_enter_isr+0x28>)
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b18:	e7fe      	b.n	8000b18 <_dbg_check_enter_isr+0x18>
  ch.dbg.isr_cnt++;
 8000b1a:	3201      	adds	r2, #1
 8000b1c:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000b1e:	f381 8811 	msr	BASEPRI, r1
 8000b22:	4770      	bx	lr
 8000b24:	20003164 	.word	0x20003164
 8000b28:	08004d58 	.word	0x08004d58
 8000b2c:	00000000 	.word	0x00000000

08000b30 <VectorF0>:
OSAL_IRQ_HANDLER(STM32_TIM8_UP_HANDLER) {
 8000b30:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8000b32:	f7ff ffe5 	bl	8000b00 <_dbg_check_enter_isr>
  pwm_lld_serve_interrupt(&PWMD8);
 8000b36:	4804      	ldr	r0, [pc, #16]	; (8000b48 <VectorF0+0x18>)
 8000b38:	f001 f85a 	bl	8001bf0 <pwm_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 8000b3c:	f7ff ffc8 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000b40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8000b44:	f7ff bdf4 	b.w	8000730 <_port_irq_epilogue>
 8000b48:	20000ac8 	.word	0x20000ac8
 8000b4c:	00000000 	.word	0x00000000

08000b50 <VectorF8>:
 8000b50:	f7ff bfee 	b.w	8000b30 <VectorF0>
	...

08000b60 <VectorB4>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8000b60:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8000b62:	f7ff ffcd 	bl	8000b00 <_dbg_check_enter_isr>
  pwm_lld_serve_interrupt(&PWMD3);
 8000b66:	4804      	ldr	r0, [pc, #16]	; (8000b78 <VectorB4+0x18>)
 8000b68:	f001 f842 	bl	8001bf0 <pwm_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 8000b6c:	f7ff ffb0 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000b70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8000b74:	f7ff bddc 	b.w	8000730 <_port_irq_epilogue>
 8000b78:	200031e4 	.word	0x200031e4
 8000b7c:	00000000 	.word	0x00000000

08000b80 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8000b80:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8000b82:	f7ff ffbd 	bl	8000b00 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <Vector158+0x2c>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8000b88:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <Vector158+0x30>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000b8a:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
 8000b8c:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000b8e:	0d89      	lsrs	r1, r1, #22
 8000b90:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 8000b94:	058c      	lsls	r4, r1, #22
 8000b96:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8000b98:	b10a      	cbz	r2, 8000b9e <Vector158+0x1e>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8000b9a:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8000b9c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000b9e:	f7ff ff97 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000ba6:	f7ff bdc3 	b.w	8000730 <_port_irq_epilogue>
 8000baa:	bf00      	nop
 8000bac:	40026400 	.word	0x40026400
 8000bb0:	20000a10 	.word	0x20000a10
	...

08000bc0 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8000bc0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8000bc2:	f7ff ff9d 	bl	8000b00 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <Vector154+0x2c>)
  if (dma_isr_redir[14].dma_func)
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <Vector154+0x30>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000bca:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
 8000bcc:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000bce:	0c09      	lsrs	r1, r1, #16
 8000bd0:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 8000bd4:	040c      	lsls	r4, r1, #16
 8000bd6:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8000bd8:	b10a      	cbz	r2, 8000bde <Vector154+0x1e>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8000bda:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8000bdc:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8000bde:	f7ff ff77 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000be6:	f7ff bda3 	b.w	8000730 <_port_irq_epilogue>
 8000bea:	bf00      	nop
 8000bec:	40026400 	.word	0x40026400
 8000bf0:	20000a10 	.word	0x20000a10
	...

08000c00 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8000c00:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8000c02:	f7ff ff7d 	bl	8000b00 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <Vector150+0x2c>)
  if (dma_isr_redir[13].dma_func)
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <Vector150+0x30>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000c0a:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
 8000c0c:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000c0e:	0989      	lsrs	r1, r1, #6
 8000c10:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 8000c14:	018c      	lsls	r4, r1, #6
 8000c16:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8000c18:	b10a      	cbz	r2, 8000c1e <Vector150+0x1e>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8000c1a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8000c1c:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8000c1e:	f7ff ff57 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000c26:	f7ff bd83 	b.w	8000730 <_port_irq_epilogue>
 8000c2a:	bf00      	nop
 8000c2c:	40026400 	.word	0x40026400
 8000c30:	20000a10 	.word	0x20000a10
	...

08000c40 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8000c40:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8000c42:	f7ff ff5d 	bl	8000b00 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <Vector130+0x28>)
  if (dma_isr_redir[12].dma_func)
 8000c48:	4808      	ldr	r0, [pc, #32]	; (8000c6c <Vector130+0x2c>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000c4a:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
 8000c4c:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000c4e:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8000c52:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8000c54:	b10a      	cbz	r2, 8000c5a <Vector130+0x1a>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8000c56:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8000c58:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8000c5a:	f7ff ff39 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000c5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8000c62:	f7ff bd65 	b.w	8000730 <_port_irq_epilogue>
 8000c66:	bf00      	nop
 8000c68:	40026400 	.word	0x40026400
 8000c6c:	20000a10 	.word	0x20000a10

08000c70 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8000c70:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8000c72:	f7ff ff45 	bl	8000b00 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <Vector12C+0x2c>)
  if (dma_isr_redir[11].dma_func)
 8000c78:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <Vector12C+0x30>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000c7a:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
 8000c7c:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000c7e:	0d89      	lsrs	r1, r1, #22
 8000c80:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 8000c84:	058c      	lsls	r4, r1, #22
 8000c86:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8000c88:	b10a      	cbz	r2, 8000c8e <Vector12C+0x1e>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8000c8a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8000c8c:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8000c8e:	f7ff ff1f 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000c96:	f7ff bd4b 	b.w	8000730 <_port_irq_epilogue>
 8000c9a:	bf00      	nop
 8000c9c:	40026400 	.word	0x40026400
 8000ca0:	20000a10 	.word	0x20000a10
	...

08000cb0 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8000cb0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8000cb2:	f7ff ff25 	bl	8000b00 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <Vector128+0x2c>)
  if (dma_isr_redir[10].dma_func)
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <Vector128+0x30>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000cba:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
 8000cbc:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000cbe:	0c09      	lsrs	r1, r1, #16
 8000cc0:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 8000cc4:	040c      	lsls	r4, r1, #16
 8000cc6:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8000cc8:	b10a      	cbz	r2, 8000cce <Vector128+0x1e>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8000cca:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8000ccc:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8000cce:	f7ff feff 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000cd6:	f7ff bd2b 	b.w	8000730 <_port_irq_epilogue>
 8000cda:	bf00      	nop
 8000cdc:	40026400 	.word	0x40026400
 8000ce0:	20000a10 	.word	0x20000a10
	...

08000cf0 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8000cf0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8000cf2:	f7ff ff05 	bl	8000b00 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <Vector124+0x2c>)
  if (dma_isr_redir[9].dma_func)
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <Vector124+0x30>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000cfa:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
 8000cfc:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000cfe:	0989      	lsrs	r1, r1, #6
 8000d00:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 8000d04:	018c      	lsls	r4, r1, #6
 8000d06:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8000d08:	b10a      	cbz	r2, 8000d0e <Vector124+0x1e>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8000d0a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8000d0c:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8000d0e:	f7ff fedf 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000d16:	f7ff bd0b 	b.w	8000730 <_port_irq_epilogue>
 8000d1a:	bf00      	nop
 8000d1c:	40026400 	.word	0x40026400
 8000d20:	20000a10 	.word	0x20000a10
	...

08000d30 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8000d30:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8000d32:	f7ff fee5 	bl	8000b00 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <Vector120+0x28>)
  if (dma_isr_redir[8].dma_func)
 8000d38:	4808      	ldr	r0, [pc, #32]	; (8000d5c <Vector120+0x2c>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000d3a:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
 8000d3c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000d3e:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8000d42:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 8000d44:	b10a      	cbz	r2, 8000d4a <Vector120+0x1a>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8000d46:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000d48:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8000d4a:	f7ff fec1 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000d4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8000d52:	f7ff bced 	b.w	8000730 <_port_irq_epilogue>
 8000d56:	bf00      	nop
 8000d58:	40026400 	.word	0x40026400
 8000d5c:	20000a10 	.word	0x20000a10

08000d60 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8000d60:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8000d62:	f7ff fecd 	bl	8000b00 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <VectorFC+0x2c>)
  if (dma_isr_redir[7].dma_func)
 8000d68:	4809      	ldr	r0, [pc, #36]	; (8000d90 <VectorFC+0x30>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000d6a:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
 8000d6c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000d6e:	0d89      	lsrs	r1, r1, #22
 8000d70:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 8000d74:	058c      	lsls	r4, r1, #22
 8000d76:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 8000d78:	b10a      	cbz	r2, 8000d7e <VectorFC+0x1e>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8000d7a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000d7c:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8000d7e:	f7ff fea7 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000d86:	f7ff bcd3 	b.w	8000730 <_port_irq_epilogue>
 8000d8a:	bf00      	nop
 8000d8c:	40026000 	.word	0x40026000
 8000d90:	20000a10 	.word	0x20000a10
	...

08000da0 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8000da0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8000da2:	f7ff fead 	bl	8000b00 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <Vector84+0x2c>)
  if (dma_isr_redir[6].dma_func)
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <Vector84+0x30>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000daa:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8000dac:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000dae:	0c09      	lsrs	r1, r1, #16
 8000db0:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 8000db4:	040c      	lsls	r4, r1, #16
 8000db6:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8000db8:	b10a      	cbz	r2, 8000dbe <Vector84+0x1e>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8000dba:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000dbc:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8000dbe:	f7ff fe87 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000dc6:	f7ff bcb3 	b.w	8000730 <_port_irq_epilogue>
 8000dca:	bf00      	nop
 8000dcc:	40026000 	.word	0x40026000
 8000dd0:	20000a10 	.word	0x20000a10
	...

08000de0 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8000de0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8000de2:	f7ff fe8d 	bl	8000b00 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <Vector80+0x2c>)
  if (dma_isr_redir[5].dma_func)
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <Vector80+0x30>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000dea:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8000dec:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000dee:	0989      	lsrs	r1, r1, #6
 8000df0:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 8000df4:	018c      	lsls	r4, r1, #6
 8000df6:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8000df8:	b10a      	cbz	r2, 8000dfe <Vector80+0x1e>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8000dfa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000dfc:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8000dfe:	f7ff fe67 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000e06:	f7ff bc93 	b.w	8000730 <_port_irq_epilogue>
 8000e0a:	bf00      	nop
 8000e0c:	40026000 	.word	0x40026000
 8000e10:	20000a10 	.word	0x20000a10
	...

08000e20 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8000e20:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8000e22:	f7ff fe6d 	bl	8000b00 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <Vector7C+0x28>)
  if (dma_isr_redir[4].dma_func)
 8000e28:	4808      	ldr	r0, [pc, #32]	; (8000e4c <Vector7C+0x2c>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000e2a:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 8000e2c:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000e2e:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 8000e32:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8000e34:	b10a      	cbz	r2, 8000e3a <Vector7C+0x1a>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8000e36:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000e38:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8000e3a:	f7ff fe49 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000e3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8000e42:	f7ff bc75 	b.w	8000730 <_port_irq_epilogue>
 8000e46:	bf00      	nop
 8000e48:	40026000 	.word	0x40026000
 8000e4c:	20000a10 	.word	0x20000a10

08000e50 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8000e50:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8000e52:	f7ff fe55 	bl	8000b00 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <Vector78+0x2c>)
  if (dma_isr_redir[3].dma_func)
 8000e58:	4809      	ldr	r0, [pc, #36]	; (8000e80 <Vector78+0x30>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000e5a:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
 8000e5c:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000e5e:	0d89      	lsrs	r1, r1, #22
 8000e60:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 8000e64:	058c      	lsls	r4, r1, #22
 8000e66:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 8000e68:	b10a      	cbz	r2, 8000e6e <Vector78+0x1e>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8000e6a:	69c0      	ldr	r0, [r0, #28]
 8000e6c:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8000e6e:	f7ff fe2f 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000e76:	f7ff bc5b 	b.w	8000730 <_port_irq_epilogue>
 8000e7a:	bf00      	nop
 8000e7c:	40026000 	.word	0x40026000
 8000e80:	20000a10 	.word	0x20000a10
	...

08000e90 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8000e90:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8000e92:	f7ff fe35 	bl	8000b00 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <Vector74+0x2c>)
  if (dma_isr_redir[2].dma_func)
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <Vector74+0x30>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000e9a:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
 8000e9c:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000e9e:	0c09      	lsrs	r1, r1, #16
 8000ea0:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 8000ea4:	040c      	lsls	r4, r1, #16
 8000ea6:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 8000ea8:	b10a      	cbz	r2, 8000eae <Vector74+0x1e>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8000eaa:	6940      	ldr	r0, [r0, #20]
 8000eac:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8000eae:	f7ff fe0f 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000eb6:	f7ff bc3b 	b.w	8000730 <_port_irq_epilogue>
 8000eba:	bf00      	nop
 8000ebc:	40026000 	.word	0x40026000
 8000ec0:	20000a10 	.word	0x20000a10
	...

08000ed0 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8000ed0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8000ed2:	f7ff fe15 	bl	8000b00 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <Vector70+0x2c>)
  if (dma_isr_redir[1].dma_func)
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <Vector70+0x30>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000eda:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
 8000edc:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000ede:	0989      	lsrs	r1, r1, #6
 8000ee0:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 8000ee4:	018c      	lsls	r4, r1, #6
 8000ee6:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 8000ee8:	b10a      	cbz	r2, 8000eee <Vector70+0x1e>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8000eea:	68c0      	ldr	r0, [r0, #12]
 8000eec:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8000eee:	f7ff fdef 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000ef6:	f7ff bc1b 	b.w	8000730 <_port_irq_epilogue>
 8000efa:	bf00      	nop
 8000efc:	40026000 	.word	0x40026000
 8000f00:	20000a10 	.word	0x20000a10
	...

08000f10 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8000f10:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8000f12:	f7ff fdf5 	bl	8000b00 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <Vector6C+0x28>)
  if (dma_isr_redir[0].dma_func)
 8000f18:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <Vector6C+0x2c>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000f1a:	6819      	ldr	r1, [r3, #0]
 8000f1c:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8000f20:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 8000f22:	6813      	ldr	r3, [r2, #0]
 8000f24:	b10b      	cbz	r3, 8000f2a <Vector6C+0x1a>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8000f26:	6850      	ldr	r0, [r2, #4]
 8000f28:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8000f2a:	f7ff fdd1 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000f2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8000f32:	f7ff bbfd 	b.w	8000730 <_port_irq_epilogue>
 8000f36:	bf00      	nop
 8000f38:	40026000 	.word	0x40026000
 8000f3c:	20000a10 	.word	0x20000a10

08000f40 <_dbg_check_unlock_from_isr>:
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <_dbg_check_unlock_from_isr+0x1c>)
 8000f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	dd05      	ble.n	8000f54 <_dbg_check_unlock_from_isr+0x14>
 8000f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f4a:	2a00      	cmp	r2, #0
 8000f4c:	dd02      	ble.n	8000f54 <_dbg_check_unlock_from_isr+0x14>
  _dbg_leave_lock();
 8000f4e:	2200      	movs	r2, #0
 8000f50:	635a      	str	r2, [r3, #52]	; 0x34
 8000f52:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
 8000f56:	4a02      	ldr	r2, [pc, #8]	; (8000f60 <_dbg_check_unlock_from_isr+0x20>)
 8000f58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f5a:	e7fe      	b.n	8000f5a <_dbg_check_unlock_from_isr+0x1a>
 8000f5c:	20003164 	.word	0x20003164
 8000f60:	08004d80 	.word	0x08004d80
	...

08000f70 <_dbg_check_lock_from_isr>:
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <_dbg_check_lock_from_isr+0x1c>)
 8000f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f74:	2a00      	cmp	r2, #0
 8000f76:	dd01      	ble.n	8000f7c <_dbg_check_lock_from_isr+0xc>
 8000f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f7a:	b11a      	cbz	r2, 8000f84 <_dbg_check_lock_from_isr+0x14>
 8000f7c:	b672      	cpsid	i
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <_dbg_check_lock_from_isr+0x20>)
 8000f80:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f82:	e7fe      	b.n	8000f82 <_dbg_check_lock_from_isr+0x12>
  _dbg_enter_lock();
 8000f84:	2201      	movs	r2, #1
 8000f86:	635a      	str	r2, [r3, #52]	; 0x34
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20003164 	.word	0x20003164
 8000f90:	08004d70 	.word	0x08004d70
	...

08000fa0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000fa4:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  OSAL_IRQ_PROLOGUE();
 8000fa8:	f7ff fdaa 	bl	8000b00 <_dbg_check_enter_isr>
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000fac:	6933      	ldr	r3, [r6, #16]
 8000fae:	079b      	lsls	r3, r3, #30
 8000fb0:	d405      	bmi.n	8000fbe <VectorB0+0x1e>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000fb2:	f7ff fd8d 	bl	8000ad0 <_dbg_check_leave_isr>
}
 8000fb6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8000fba:	f7ff bbb9 	b.w	8000730 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 8000fbe:	2500      	movs	r5, #0
 8000fc0:	6135      	str	r5, [r6, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000fc2:	2720      	movs	r7, #32
 8000fc4:	f387 8811 	msr	BASEPRI, r7
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 8000fc8:	4c22      	ldr	r4, [pc, #136]	; (8001054 <VectorB0+0xb4>)
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8000fca:	f7ff ffd1 	bl	8000f70 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {

  chDbgCheckClassI();
 8000fce:	f7ff fc37 	bl	8000840 <chDbgCheckClassI>
  chDbgCheckClassI();
 8000fd2:	f7ff fc35 	bl	8000840 <chDbgCheckClassI>
  vtp = ch.vtlist.next;
 8000fd6:	69e1      	ldr	r1, [r4, #28]
  return (systime_t)STM32_ST_TIM->CNT;
 8000fd8:	6a72      	ldr	r2, [r6, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000fda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fdc:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8000fe0:	1ad0      	subs	r0, r2, r3
 8000fe2:	4570      	cmp	r0, lr
 8000fe4:	f104 081c 	add.w	r8, r4, #28
 8000fe8:	d31d      	bcc.n	8001026 <VectorB0+0x86>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000fea:	680a      	ldr	r2, [r1, #0]
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
 8000fec:	f8d1 900c 	ldr.w	r9, [r1, #12]
    ch.vtlist.lasttime += vtp->delta;
 8000ff0:	4473      	add	r3, lr
    vtp->func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8000ff2:	4542      	cmp	r2, r8
    ch.vtlist.lasttime += vtp->delta;
 8000ff4:	62a3      	str	r3, [r4, #40]	; 0x28
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000ff6:	f8c2 8004 	str.w	r8, [r2, #4]
    ch.vtlist.next = vtp->next;
 8000ffa:	61e2      	str	r2, [r4, #28]
    vtp->func = NULL;
 8000ffc:	60cd      	str	r5, [r1, #12]
  STM32_ST_TIM->DIER = 0;
 8000ffe:	bf08      	it	eq
 8001000:	60f5      	streq	r5, [r6, #12]
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001002:	f7ff ff9d 	bl	8000f40 <_dbg_check_unlock_from_isr>
 8001006:	f385 8811 	msr	BASEPRI, r5
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
 800100a:	6908      	ldr	r0, [r1, #16]
 800100c:	47c8      	blx	r9
 800100e:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock_from_isr();
 8001012:	f7ff ffad 	bl	8000f70 <_dbg_check_lock_from_isr>
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
 8001016:	69e1      	ldr	r1, [r4, #28]
  return (systime_t)STM32_ST_TIM->CNT;
 8001018:	6a72      	ldr	r2, [r6, #36]	; 0x24
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 800101a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800101c:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8001020:	1ad0      	subs	r0, r2, r3
 8001022:	4586      	cmp	lr, r0
 8001024:	d9e1      	bls.n	8000fea <VectorB0+0x4a>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8001026:	4541      	cmp	r1, r8
 8001028:	d008      	beq.n	800103c <VectorB0+0x9c>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
 800102a:	4473      	add	r3, lr
 800102c:	1a9b      	subs	r3, r3, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800102e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 8001032:	2b02      	cmp	r3, #2
 8001034:	bf2c      	ite	cs
 8001036:	18d3      	addcs	r3, r2, r3
 8001038:	1c93      	addcc	r3, r2, #2
 800103a:	634b      	str	r3, [r1, #52]	; 0x34
  _dbg_check_unlock_from_isr();
 800103c:	f7ff ff80 	bl	8000f40 <_dbg_check_unlock_from_isr>
 8001040:	2300      	movs	r3, #0
 8001042:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_EPILOGUE();
 8001046:	f7ff fd43 	bl	8000ad0 <_dbg_check_leave_isr>
}
 800104a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800104e:	f7ff bb6f 	b.w	8000730 <_port_irq_epilogue>
 8001052:	bf00      	nop
 8001054:	20003164 	.word	0x20003164
	...

08001060 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 8001060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();
 8001062:	f7ff fd4d 	bl	8000b00 <_dbg_check_enter_isr>

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <Vector88+0x9c>)
 8001068:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
 800106a:	2100      	movs	r1, #0
 800106c:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 800106e:	0693      	lsls	r3, r2, #26
 8001070:	d53a      	bpl.n	80010e8 <Vector88+0x88>
 8001072:	4c23      	ldr	r4, [pc, #140]	; (8001100 <Vector88+0xa0>)
 8001074:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001076:	680a      	ldr	r2, [r1, #0]
 8001078:	6853      	ldr	r3, [r2, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d034      	beq.n	80010e8 <Vector88+0x88>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
 800107e:	6925      	ldr	r5, [r4, #16]
 8001080:	2d00      	cmp	r5, #0
 8001082:	d031      	beq.n	80010e8 <Vector88+0x88>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001084:	6813      	ldr	r3, [r2, #0]
 8001086:	f023 031f 	bic.w	r3, r3, #31
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	6813      	ldr	r3, [r2, #0]
 800108e:	f013 0301 	ands.w	r3, r3, #1
 8001092:	d1fb      	bne.n	800108c <Vector88+0x2c>
 8001094:	7a0f      	ldrb	r7, [r1, #8]
 8001096:	684e      	ldr	r6, [r1, #4]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8001098:	68ad      	ldr	r5, [r5, #8]
  adcp->adc->CR1 = 0;
 800109a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 800109c:	203d      	movs	r0, #61	; 0x3d
 800109e:	40b8      	lsls	r0, r7
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 80010a0:	2101      	movs	r1, #1
  dmaStreamDisable(adcp->dmastp);
 80010a2:	6030      	str	r0, [r6, #0]
  adcp->adc->CR1 = 0;
 80010a4:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 80010a6:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 80010a8:	6091      	str	r1, [r2, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 80010aa:	b31d      	cbz	r5, 80010f4 <Vector88+0x94>
 80010ac:	2305      	movs	r3, #5
 80010ae:	7023      	strb	r3, [r4, #0]
 80010b0:	4813      	ldr	r0, [pc, #76]	; (8001100 <Vector88+0xa0>)
 80010b2:	47a8      	blx	r5
 80010b4:	7823      	ldrb	r3, [r4, #0]
 80010b6:	2b05      	cmp	r3, #5
 80010b8:	bf04      	itt	eq
 80010ba:	2302      	moveq	r3, #2
 80010bc:	7023      	strbeq	r3, [r4, #0]
 80010be:	2300      	movs	r3, #0
 80010c0:	6123      	str	r3, [r4, #16]
 80010c2:	2320      	movs	r3, #32
 80010c4:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80010c8:	f7ff ff52 	bl	8000f70 <_dbg_check_lock_from_isr>
  if (*trp != NULL) {
 80010cc:	6960      	ldr	r0, [r4, #20]
 80010ce:	b130      	cbz	r0, 80010de <Vector88+0x7e>
    tp->u.rdymsg = msg;
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010d4:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	6163      	str	r3, [r4, #20]
    (void) chSchReadyI(tp);
 80010da:	f7ff fca9 	bl	8000a30 <chSchReadyI>
  _dbg_check_unlock_from_isr();
 80010de:	f7ff ff2f 	bl	8000f40 <_dbg_check_unlock_from_isr>
 80010e2:	2300      	movs	r3, #0
 80010e4:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_EPILOGUE();
 80010e8:	f7ff fcf2 	bl	8000ad0 <_dbg_check_leave_isr>
}
 80010ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 80010f0:	f7ff bb1e 	b.w	8000730 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 80010f4:	2302      	movs	r3, #2
 80010f6:	6125      	str	r5, [r4, #16]
 80010f8:	7023      	strb	r3, [r4, #0]
 80010fa:	e7e2      	b.n	80010c2 <Vector88+0x62>
 80010fc:	40012000 	.word	0x40012000
 8001100:	20000a94 	.word	0x20000a94
	...

08001110 <adc_lld_serve_rx_interrupt.lto_priv.73>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001110:	f011 0f0c 	tst.w	r1, #12
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8001114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001118:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800111a:	d038      	beq.n	800118e <adc_lld_serve_rx_interrupt.lto_priv.73+0x7e>
  dmaStreamDisable(adcp->dmastp);
 800111c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800111e:	6803      	ldr	r3, [r0, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	f022 021f 	bic.w	r2, r2, #31
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	6819      	ldr	r1, [r3, #0]
 800112a:	f011 0101 	ands.w	r1, r1, #1
 800112e:	d1fb      	bne.n	8001128 <adc_lld_serve_rx_interrupt.lto_priv.73+0x18>
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001130:	6922      	ldr	r2, [r4, #16]
  dmaStreamDisable(adcp->dmastp);
 8001132:	7a07      	ldrb	r7, [r0, #8]
 8001134:	6846      	ldr	r6, [r0, #4]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001136:	6895      	ldr	r5, [r2, #8]
  adcp->adc->CR1 = 0;
 8001138:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 800113a:	223d      	movs	r2, #61	; 0x3d
 800113c:	40ba      	lsls	r2, r7
  adcp->adc->CR2 = ADC_CR2_ADON;
 800113e:	2001      	movs	r0, #1
  dmaStreamDisable(adcp->dmastp);
 8001140:	6032      	str	r2, [r6, #0]
  adcp->adc->CR1 = 0;
 8001142:	6059      	str	r1, [r3, #4]
  adcp->adc->CR2 = 0;
 8001144:	6099      	str	r1, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001146:	6098      	str	r0, [r3, #8]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001148:	2d00      	cmp	r5, #0
 800114a:	d038      	beq.n	80011be <adc_lld_serve_rx_interrupt.lto_priv.73+0xae>
 800114c:	2305      	movs	r3, #5
 800114e:	7023      	strb	r3, [r4, #0]
 8001150:	4620      	mov	r0, r4
 8001152:	47a8      	blx	r5
 8001154:	7823      	ldrb	r3, [r4, #0]
 8001156:	2b05      	cmp	r3, #5
 8001158:	bf04      	itt	eq
 800115a:	2302      	moveq	r3, #2
 800115c:	7023      	strbeq	r3, [r4, #0]
 800115e:	2300      	movs	r3, #0
 8001160:	6123      	str	r3, [r4, #16]
 8001162:	2320      	movs	r3, #32
 8001164:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8001168:	f7ff ff02 	bl	8000f70 <_dbg_check_lock_from_isr>
  if (*trp != NULL) {
 800116c:	6963      	ldr	r3, [r4, #20]
 800116e:	b13b      	cbz	r3, 8001180 <adc_lld_serve_rx_interrupt.lto_priv.73+0x70>
    *trp = NULL;
 8001170:	2100      	movs	r1, #0
    tp->u.rdymsg = msg;
 8001172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    *trp = NULL;
 8001176:	6161      	str	r1, [r4, #20]
    (void) chSchReadyI(tp);
 8001178:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800117c:	f7ff fc58 	bl	8000a30 <chSchReadyI>
  _dbg_check_unlock_from_isr();
 8001180:	f7ff fede 	bl	8000f40 <_dbg_check_unlock_from_isr>
 8001184:	2300      	movs	r3, #0
 8001186:	f383 8811 	msr	BASEPRI, r3
 800118a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (adcp->grpp != NULL) {
 800118e:	6905      	ldr	r5, [r0, #16]
 8001190:	b19d      	cbz	r5, 80011ba <adc_lld_serve_rx_interrupt.lto_priv.73+0xaa>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 8001192:	068a      	lsls	r2, r1, #26
 8001194:	d50f      	bpl.n	80011b6 <adc_lld_serve_rx_interrupt.lto_priv.73+0xa6>
        _adc_isr_full_code(adcp);
 8001196:	782b      	ldrb	r3, [r5, #0]
 8001198:	b1f3      	cbz	r3, 80011d8 <adc_lld_serve_rx_interrupt.lto_priv.73+0xc8>
 800119a:	686b      	ldr	r3, [r5, #4]
 800119c:	b16b      	cbz	r3, 80011ba <adc_lld_serve_rx_interrupt.lto_priv.73+0xaa>
 800119e:	68c2      	ldr	r2, [r0, #12]
 80011a0:	2a01      	cmp	r2, #1
 80011a2:	d94c      	bls.n	800123e <adc_lld_serve_rx_interrupt.lto_priv.73+0x12e>
 80011a4:	886d      	ldrh	r5, [r5, #2]
 80011a6:	6884      	ldr	r4, [r0, #8]
 80011a8:	0852      	lsrs	r2, r2, #1
 80011aa:	0051      	lsls	r1, r2, #1
 80011ac:	fb05 4101 	mla	r1, r5, r1, r4
}
 80011b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_full_code(adcp);
 80011b4:	4718      	bx	r3
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 80011b6:	06cb      	lsls	r3, r1, #27
 80011b8:	d405      	bmi.n	80011c6 <adc_lld_serve_rx_interrupt.lto_priv.73+0xb6>
 80011ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 80011be:	2302      	movs	r3, #2
 80011c0:	6125      	str	r5, [r4, #16]
 80011c2:	7023      	strb	r3, [r4, #0]
 80011c4:	e7cd      	b.n	8001162 <adc_lld_serve_rx_interrupt.lto_priv.73+0x52>
        _adc_isr_half_code(adcp);
 80011c6:	686b      	ldr	r3, [r5, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f6      	beq.n	80011ba <adc_lld_serve_rx_interrupt.lto_priv.73+0xaa>
 80011cc:	68c2      	ldr	r2, [r0, #12]
 80011ce:	6881      	ldr	r1, [r0, #8]
 80011d0:	0852      	lsrs	r2, r2, #1
}
 80011d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_half_code(adcp);
 80011d6:	4718      	bx	r3
  dmaStreamDisable(adcp->dmastp);
 80011d8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80011da:	6802      	ldr	r2, [r0, #0]
 80011dc:	6813      	ldr	r3, [r2, #0]
 80011de:	f023 031f 	bic.w	r3, r3, #31
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	6813      	ldr	r3, [r2, #0]
 80011e6:	f013 0301 	ands.w	r3, r3, #1
 80011ea:	d1fb      	bne.n	80011e4 <adc_lld_serve_rx_interrupt.lto_priv.73+0xd4>
 80011ec:	7a07      	ldrb	r7, [r0, #8]
 80011ee:	6846      	ldr	r6, [r0, #4]
        _adc_isr_full_code(adcp);
 80011f0:	686d      	ldr	r5, [r5, #4]
  adcp->adc->CR1 = 0;
 80011f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 80011f4:	213d      	movs	r1, #61	; 0x3d
 80011f6:	40b9      	lsls	r1, r7
  adcp->adc->CR2 = ADC_CR2_ADON;
 80011f8:	2001      	movs	r0, #1
  dmaStreamDisable(adcp->dmastp);
 80011fa:	6031      	str	r1, [r6, #0]
  adcp->adc->CR1 = 0;
 80011fc:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 80011fe:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001200:	6090      	str	r0, [r2, #8]
        _adc_isr_full_code(adcp);
 8001202:	b1bd      	cbz	r5, 8001234 <adc_lld_serve_rx_interrupt.lto_priv.73+0x124>
 8001204:	2304      	movs	r3, #4
 8001206:	7023      	strb	r3, [r4, #0]
 8001208:	68e2      	ldr	r2, [r4, #12]
 800120a:	68a1      	ldr	r1, [r4, #8]
 800120c:	4620      	mov	r0, r4
 800120e:	47a8      	blx	r5
 8001210:	7823      	ldrb	r3, [r4, #0]
 8001212:	2b04      	cmp	r3, #4
 8001214:	d00e      	beq.n	8001234 <adc_lld_serve_rx_interrupt.lto_priv.73+0x124>
 8001216:	2320      	movs	r3, #32
 8001218:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 800121c:	f7ff fea8 	bl	8000f70 <_dbg_check_lock_from_isr>
  if (*trp != NULL) {
 8001220:	6963      	ldr	r3, [r4, #20]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0ac      	beq.n	8001180 <adc_lld_serve_rx_interrupt.lto_priv.73+0x70>
    *trp = NULL;
 8001226:	2200      	movs	r2, #0
 8001228:	6162      	str	r2, [r4, #20]
    (void) chSchReadyI(tp);
 800122a:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800122e:	f7ff fbff 	bl	8000a30 <chSchReadyI>
 8001232:	e7a5      	b.n	8001180 <adc_lld_serve_rx_interrupt.lto_priv.73+0x70>
 8001234:	2202      	movs	r2, #2
 8001236:	2300      	movs	r3, #0
 8001238:	7022      	strb	r2, [r4, #0]
 800123a:	6123      	str	r3, [r4, #16]
 800123c:	e7eb      	b.n	8001216 <adc_lld_serve_rx_interrupt.lto_priv.73+0x106>
 800123e:	6881      	ldr	r1, [r0, #8]
}
 8001240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_full_code(adcp);
 8001244:	4718      	bx	r3
 8001246:	bf00      	nop
	...

08001250 <wakeup>:
static void wakeup(void *p) {
 8001250:	b508      	push	{r3, lr}
 8001252:	2320      	movs	r3, #32
 8001254:	f383 8811 	msr	BASEPRI, r3
 8001258:	f7ff fe8a 	bl	8000f70 <_dbg_check_lock_from_isr>
  switch (tp->state) {
 800125c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001260:	2b07      	cmp	r3, #7
 8001262:	d810      	bhi.n	8001286 <wakeup+0x36>
 8001264:	e8df f003 	tbb	[pc, r3]
 8001268:	1a0f0f14 	.word	0x1a0f0f14
 800126c:	0a0f040a 	.word	0x0a0f040a
    chSemFastSignalI(tp->u.wtsemp);
 8001270:	6a41      	ldr	r1, [r0, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 8001272:	f7ff fae5 	bl	8000840 <chDbgCheckClassI>

  sp->cnt++;
 8001276:	688b      	ldr	r3, [r1, #8]
 8001278:	3301      	adds	r3, #1
 800127a:	608b      	str	r3, [r1, #8]
  tp->queue.prev->queue.next = tp->queue.next;
 800127c:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001280:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001282:	6802      	ldr	r2, [r0, #0]
 8001284:	6053      	str	r3, [r2, #4]
  tp->u.rdymsg = MSG_TIMEOUT;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800128a:	6243      	str	r3, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 800128c:	f7ff fbd0 	bl	8000a30 <chSchReadyI>
  _dbg_check_unlock_from_isr();
 8001290:	f7ff fe56 	bl	8000f40 <_dbg_check_unlock_from_isr>
 8001294:	2300      	movs	r3, #0
 8001296:	f383 8811 	msr	BASEPRI, r3
 800129a:	bd08      	pop	{r3, pc}
    *tp->u.wttrp = NULL;
 800129c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
  tp->u.rdymsg = MSG_TIMEOUT;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012a6:	6243      	str	r3, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 80012a8:	f7ff fbc2 	bl	8000a30 <chSchReadyI>
 80012ac:	e7f0      	b.n	8001290 <wakeup+0x40>
 80012ae:	bf00      	nop

080012b0 <_dbg_check_unlock>:
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <_dbg_check_unlock+0x18>)
 80012b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b4:	b922      	cbnz	r2, 80012c0 <_dbg_check_unlock+0x10>
 80012b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012b8:	2900      	cmp	r1, #0
 80012ba:	dd01      	ble.n	80012c0 <_dbg_check_unlock+0x10>
  _dbg_leave_lock();
 80012bc:	635a      	str	r2, [r3, #52]	; 0x34
 80012be:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80012c2:	4a02      	ldr	r2, [pc, #8]	; (80012cc <_dbg_check_unlock+0x1c>)
 80012c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80012c6:	e7fe      	b.n	80012c6 <_dbg_check_unlock+0x16>
 80012c8:	20003164 	.word	0x20003164
 80012cc:	08004d78 	.word	0x08004d78

080012d0 <_dbg_check_lock>:
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <_dbg_check_lock+0x18>)
 80012d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d4:	b90a      	cbnz	r2, 80012da <_dbg_check_lock+0xa>
 80012d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012d8:	b11a      	cbz	r2, 80012e2 <_dbg_check_lock+0x12>
 80012da:	b672      	cpsid	i
 80012dc:	4a03      	ldr	r2, [pc, #12]	; (80012ec <_dbg_check_lock+0x1c>)
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
 80012e0:	e7fe      	b.n	80012e0 <_dbg_check_lock+0x10>
  _dbg_enter_lock();
 80012e2:	2201      	movs	r2, #1
 80012e4:	635a      	str	r2, [r3, #52]	; 0x34
 80012e6:	4770      	bx	lr
 80012e8:	20003164 	.word	0x20003164
 80012ec:	08004d68 	.word	0x08004d68

080012f0 <pwmEnablePeriodicNotification>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @api
 */
void pwmEnablePeriodicNotification(PWMDriver *pwmp) {
 80012f0:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80012f2:	2320      	movs	r3, #32
 80012f4:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80012f8:	f7ff ffea 	bl	80012d0 <_dbg_check_lock>
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_enable_periodic_notification(PWMDriver *pwmp) {
  uint32_t dier = pwmp->tim->DIER;
 80012fc:	6983      	ldr	r3, [r0, #24]
 80012fe:	68da      	ldr	r2, [r3, #12]

  /* If the IRQ is not already enabled care must be taken to clear it,
     it is probably already pending because the timer is running.*/
  if ((dier & STM32_TIM_DIER_UIE) == 0) {
 8001300:	07d1      	lsls	r1, r2, #31
 8001302:	d406      	bmi.n	8001312 <pwmEnablePeriodicNotification+0x22>
    pwmp->tim->DIER = dier | STM32_TIM_DIER_UIE;
 8001304:	f042 0201 	orr.w	r2, r2, #1
 8001308:	60da      	str	r2, [r3, #12]
    pwmp->tim->SR &= STM32_TIM_SR_UIF;
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	f002 0201 	and.w	r2, r2, #1
 8001310:	611a      	str	r2, [r3, #16]
  _dbg_check_unlock();
 8001312:	f7ff ffcd 	bl	80012b0 <_dbg_check_unlock>
 8001316:	2300      	movs	r3, #0
 8001318:	f383 8811 	msr	BASEPRI, r3
 800131c:	bd08      	pop	{r3, pc}
 800131e:	bf00      	nop

08001320 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
 8001320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001324:	460d      	mov	r5, r1
 8001326:	b083      	sub	sp, #12
 8001328:	4604      	mov	r4, r0
 800132a:	4616      	mov	r6, r2
 800132c:	4699      	mov	r9, r3
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
 800132e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001332:	2120      	movs	r1, #32
 8001334:	f381 8811 	msr	BASEPRI, r1
  _dbg_check_lock();
 8001338:	f7ff ffca 	bl	80012d0 <_dbg_check_lock>
  return (systime_t)STM32_ST_TIM->CNT;
 800133c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  size_t w = 0;
 8001340:	2700      	movs	r7, #0
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	9100      	str	r1, [sp, #0]
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001346:	444b      	add	r3, r9
 8001348:	9301      	str	r3, [sp, #4]
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800134a:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800134e:	46ba      	mov	sl, r7
    while (oqIsFullI(oqp)) {
 8001350:	68a0      	ldr	r0, [r4, #8]
 8001352:	b318      	cbz	r0, 800139c <oqWriteTimeout+0x7c>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001354:	6962      	ldr	r2, [r4, #20]
    oqp->q_counter--;
 8001356:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001358:	1c51      	adds	r1, r2, #1
    oqp->q_counter--;
 800135a:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800135c:	6161      	str	r1, [r4, #20]
    oqp->q_counter--;
 800135e:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001360:	782b      	ldrb	r3, [r5, #0]
 8001362:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001364:	6923      	ldr	r3, [r4, #16]
 8001366:	6962      	ldr	r2, [r4, #20]
 8001368:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 800136a:	bf24      	itt	cs
 800136c:	68e3      	ldrcs	r3, [r4, #12]
 800136e:	6163      	strcs	r3, [r4, #20]
    *oqp->q_wrptr++ = *bp++;
 8001370:	3501      	adds	r5, #1
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
 8001372:	f1b8 0f00 	cmp.w	r8, #0
 8001376:	d001      	beq.n	800137c <oqWriteTimeout+0x5c>
      nfy(oqp);
 8001378:	4620      	mov	r0, r4
 800137a:	47c0      	blx	r8
  _dbg_check_unlock();
 800137c:	f7ff ff98 	bl	80012b0 <_dbg_check_unlock>
 8001380:	f38a 8811 	msr	BASEPRI, sl

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
 8001384:	3e01      	subs	r6, #1
    w++;
 8001386:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 800138a:	d01b      	beq.n	80013c4 <oqWriteTimeout+0xa4>
 800138c:	9b00      	ldr	r3, [sp, #0]
 800138e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8001392:	f7ff ff9d 	bl	80012d0 <_dbg_check_lock>
    while (oqIsFullI(oqp)) {
 8001396:	68a0      	ldr	r0, [r4, #8]
 8001398:	2800      	cmp	r0, #0
 800139a:	d1db      	bne.n	8001354 <oqWriteTimeout+0x34>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800139c:	f11b 0f03 	cmn.w	fp, #3
 80013a0:	d814      	bhi.n	80013cc <oqWriteTimeout+0xac>
 80013a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 80013a8:	9b01      	ldr	r3, [sp, #4]
 80013aa:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
 80013ac:	4589      	cmp	r9, r1
 80013ae:	d314      	bcc.n	80013da <oqWriteTimeout+0xba>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 80013b0:	4620      	mov	r0, r4
 80013b2:	f7ff fb25 	bl	8000a00 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 80013b6:	2800      	cmp	r0, #0
 80013b8:	d0ca      	beq.n	8001350 <oqWriteTimeout+0x30>
  _dbg_check_unlock();
 80013ba:	f7ff ff79 	bl	80012b0 <_dbg_check_unlock>
 80013be:	2300      	movs	r3, #0
 80013c0:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
 80013c4:	4638      	mov	r0, r7
 80013c6:	b003      	add	sp, #12
 80013c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013cc:	4649      	mov	r1, r9
 80013ce:	4620      	mov	r0, r4
 80013d0:	f7ff fb16 	bl	8000a00 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 80013d4:	2800      	cmp	r0, #0
 80013d6:	d0bb      	beq.n	8001350 <oqWriteTimeout+0x30>
 80013d8:	e7ef      	b.n	80013ba <oqWriteTimeout+0x9a>
 80013da:	f7ff ff69 	bl	80012b0 <_dbg_check_unlock>
 80013de:	f380 8811 	msr	BASEPRI, r0
}
 80013e2:	4638      	mov	r0, r7
 80013e4:	b003      	add	sp, #12
 80013e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013ea:	bf00      	nop
 80013ec:	0000      	movs	r0, r0
	...

080013f0 <_writet.lto_priv.88>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80013f0:	3030      	adds	r0, #48	; 0x30
 80013f2:	f7ff bf95 	b.w	8001320 <oqWriteTimeout>
 80013f6:	bf00      	nop
	...

08001400 <_write.lto_priv.82>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001400:	3030      	adds	r0, #48	; 0x30
 8001402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001406:	f7ff bf8b 	b.w	8001320 <oqWriteTimeout>
 800140a:	bf00      	nop
 800140c:	0000      	movs	r0, r0
	...

08001410 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001412:	4604      	mov	r4, r0
 8001414:	460f      	mov	r7, r1
 8001416:	4616      	mov	r6, r2
 8001418:	2320      	movs	r3, #32
 800141a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800141e:	f7ff ff57 	bl	80012d0 <_dbg_check_lock>
 8001422:	e003      	b.n	800142c <oqPutTimeout+0x1c>
 8001424:	f7ff faec 	bl	8000a00 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001428:	2800      	cmp	r0, #0
 800142a:	db1b      	blt.n	8001464 <oqPutTimeout+0x54>
  while (oqIsFullI(oqp)) {
 800142c:	68a5      	ldr	r5, [r4, #8]
 800142e:	4631      	mov	r1, r6
 8001430:	4620      	mov	r0, r4
 8001432:	2d00      	cmp	r5, #0
 8001434:	d0f6      	beq.n	8001424 <oqPutTimeout+0x14>
  *oqp->q_wrptr++ = b;
 8001436:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8001438:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800143a:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 800143c:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800143e:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8001440:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001442:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001444:	6923      	ldr	r3, [r4, #16]
 8001446:	6962      	ldr	r2, [r4, #20]
 8001448:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 800144a:	bf24      	itt	cs
 800144c:	68e3      	ldrcs	r3, [r4, #12]
 800144e:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8001450:	69e3      	ldr	r3, [r4, #28]
 8001452:	b10b      	cbz	r3, 8001458 <oqPutTimeout+0x48>
    oqp->q_notify(oqp);
 8001454:	4620      	mov	r0, r4
 8001456:	4798      	blx	r3
  _dbg_check_unlock();
 8001458:	f7ff ff2a 	bl	80012b0 <_dbg_check_unlock>
 800145c:	2000      	movs	r0, #0
 800145e:	f380 8811 	msr	BASEPRI, r0
}
 8001462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001464:	f7ff ff24 	bl	80012b0 <_dbg_check_unlock>
 8001468:	f385 8811 	msr	BASEPRI, r5
 800146c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800146e:	bf00      	nop

08001470 <_putt.lto_priv.86>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001470:	3030      	adds	r0, #48	; 0x30
 8001472:	f7ff bfcd 	b.w	8001410 <oqPutTimeout>
 8001476:	bf00      	nop
	...

08001480 <_put.lto_priv.84>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001480:	3030      	adds	r0, #48	; 0x30
 8001482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001486:	f7ff bfc3 	b.w	8001410 <oqPutTimeout>
 800148a:	bf00      	nop
 800148c:	0000      	movs	r0, r0
	...

08001490 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
 8001490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001494:	460d      	mov	r5, r1
 8001496:	b083      	sub	sp, #12
 8001498:	4604      	mov	r4, r0
 800149a:	4616      	mov	r6, r2
 800149c:	4699      	mov	r9, r3
  qnotify_t nfy = iqp->q_notify;
 800149e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80014a2:	2120      	movs	r1, #32
 80014a4:	f381 8811 	msr	BASEPRI, r1
  _dbg_check_lock();
 80014a8:	f7ff ff12 	bl	80012d0 <_dbg_check_lock>
 80014ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  size_t r = 0;
 80014b0:	2700      	movs	r7, #0
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	9100      	str	r1, [sp, #0]
  deadline = osalOsGetSystemTimeX() + timeout;
 80014b6:	444b      	add	r3, r9
 80014b8:	9301      	str	r3, [sp, #4]
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80014ba:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80014be:	46ba      	mov	sl, r7
    while (iqIsEmptyI(iqp)) {
 80014c0:	68a0      	ldr	r0, [r4, #8]
 80014c2:	b318      	cbz	r0, 800150c <iqReadTimeout+0x7c>
    *bp++ = *iqp->q_rdptr++;
 80014c4:	69a2      	ldr	r2, [r4, #24]
    iqp->q_counter--;
 80014c6:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80014c8:	1c51      	adds	r1, r2, #1
    iqp->q_counter--;
 80014ca:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 80014cc:	61a1      	str	r1, [r4, #24]
    iqp->q_counter--;
 80014ce:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80014d0:	7813      	ldrb	r3, [r2, #0]
 80014d2:	702b      	strb	r3, [r5, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
 80014d4:	6923      	ldr	r3, [r4, #16]
 80014d6:	69a2      	ldr	r2, [r4, #24]
 80014d8:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 80014da:	bf24      	itt	cs
 80014dc:	68e3      	ldrcs	r3, [r4, #12]
 80014de:	61a3      	strcs	r3, [r4, #24]
    *bp++ = *iqp->q_rdptr++;
 80014e0:	3501      	adds	r5, #1
    if (nfy != NULL) {
 80014e2:	f1b8 0f00 	cmp.w	r8, #0
 80014e6:	d001      	beq.n	80014ec <iqReadTimeout+0x5c>
      nfy(iqp);
 80014e8:	4620      	mov	r0, r4
 80014ea:	47c0      	blx	r8
  _dbg_check_unlock();
 80014ec:	f7ff fee0 	bl	80012b0 <_dbg_check_unlock>
 80014f0:	f38a 8811 	msr	BASEPRI, sl
    if (--n == 0U) {
 80014f4:	3e01      	subs	r6, #1
    r++;
 80014f6:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 80014fa:	d01b      	beq.n	8001534 <iqReadTimeout+0xa4>
 80014fc:	9b00      	ldr	r3, [sp, #0]
 80014fe:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8001502:	f7ff fee5 	bl	80012d0 <_dbg_check_lock>
    while (iqIsEmptyI(iqp)) {
 8001506:	68a0      	ldr	r0, [r4, #8]
 8001508:	2800      	cmp	r0, #0
 800150a:	d1db      	bne.n	80014c4 <iqReadTimeout+0x34>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800150c:	f11b 0f03 	cmn.w	fp, #3
 8001510:	d814      	bhi.n	800153c <iqReadTimeout+0xac>
 8001512:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001516:	6a59      	ldr	r1, [r3, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8001518:	9b01      	ldr	r3, [sp, #4]
 800151a:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
 800151c:	4589      	cmp	r9, r1
 800151e:	d314      	bcc.n	800154a <iqReadTimeout+0xba>
 8001520:	4620      	mov	r0, r4
 8001522:	f7ff fa6d 	bl	8000a00 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001526:	2800      	cmp	r0, #0
 8001528:	d0ca      	beq.n	80014c0 <iqReadTimeout+0x30>
  _dbg_check_unlock();
 800152a:	f7ff fec1 	bl	80012b0 <_dbg_check_unlock>
 800152e:	2300      	movs	r3, #0
 8001530:	f383 8811 	msr	BASEPRI, r3
}
 8001534:	4638      	mov	r0, r7
 8001536:	b003      	add	sp, #12
 8001538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800153c:	4649      	mov	r1, r9
 800153e:	4620      	mov	r0, r4
 8001540:	f7ff fa5e 	bl	8000a00 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001544:	2800      	cmp	r0, #0
 8001546:	d0bb      	beq.n	80014c0 <iqReadTimeout+0x30>
 8001548:	e7ef      	b.n	800152a <iqReadTimeout+0x9a>
 800154a:	f7ff feb1 	bl	80012b0 <_dbg_check_unlock>
 800154e:	f380 8811 	msr	BASEPRI, r0
}
 8001552:	4638      	mov	r0, r7
 8001554:	b003      	add	sp, #12
 8001556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800155a:	bf00      	nop
 800155c:	0000      	movs	r0, r0
	...

08001560 <_readt.lto_priv.89>:
}

static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001560:	300c      	adds	r0, #12
 8001562:	f7ff bf95 	b.w	8001490 <iqReadTimeout>
 8001566:	bf00      	nop
	...

08001570 <_read.lto_priv.83>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001570:	300c      	adds	r0, #12
 8001572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001576:	f7ff bf8b 	b.w	8001490 <iqReadTimeout>
 800157a:	bf00      	nop
 800157c:	0000      	movs	r0, r0
	...

08001580 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001580:	b570      	push	{r4, r5, r6, lr}
 8001582:	2320      	movs	r3, #32
 8001584:	4604      	mov	r4, r0
 8001586:	460e      	mov	r6, r1
 8001588:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800158c:	f7ff fea0 	bl	80012d0 <_dbg_check_lock>
 8001590:	e003      	b.n	800159a <iqGetTimeout+0x1a>
 8001592:	f7ff fa35 	bl	8000a00 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001596:	2800      	cmp	r0, #0
 8001598:	db1c      	blt.n	80015d4 <iqGetTimeout+0x54>
  while (iqIsEmptyI(iqp)) {
 800159a:	68a5      	ldr	r5, [r4, #8]
 800159c:	4631      	mov	r1, r6
 800159e:	4620      	mov	r0, r4
 80015a0:	2d00      	cmp	r5, #0
 80015a2:	d0f6      	beq.n	8001592 <iqGetTimeout+0x12>
  b = *iqp->q_rdptr++;
 80015a4:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 80015a6:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 80015a8:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 80015aa:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 80015ac:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 80015ae:	4282      	cmp	r2, r0
  iqp->q_counter--;
 80015b0:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 80015b2:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 80015b4:	bf28      	it	cs
 80015b6:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 80015b8:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 80015ba:	bf28      	it	cs
 80015bc:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 80015be:	69e3      	ldr	r3, [r4, #28]
 80015c0:	b10b      	cbz	r3, 80015c6 <iqGetTimeout+0x46>
    iqp->q_notify(iqp);
 80015c2:	4620      	mov	r0, r4
 80015c4:	4798      	blx	r3
  _dbg_check_unlock();
 80015c6:	f7ff fe73 	bl	80012b0 <_dbg_check_unlock>
 80015ca:	2300      	movs	r3, #0
 80015cc:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 80015d0:	4628      	mov	r0, r5
}
 80015d2:	bd70      	pop	{r4, r5, r6, pc}
 80015d4:	f7ff fe6c 	bl	80012b0 <_dbg_check_unlock>
 80015d8:	f385 8811 	msr	BASEPRI, r5
 80015dc:	bd70      	pop	{r4, r5, r6, pc}
 80015de:	bf00      	nop

080015e0 <_gett.lto_priv.87>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80015e0:	300c      	adds	r0, #12
 80015e2:	f7ff bfcd 	b.w	8001580 <iqGetTimeout>
 80015e6:	bf00      	nop
	...

080015f0 <_get.lto_priv.85>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80015f0:	300c      	adds	r0, #12
 80015f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015f6:	f7ff bfc3 	b.w	8001580 <iqGetTimeout>
 80015fa:	bf00      	nop
 80015fc:	0000      	movs	r0, r0
	...

08001600 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
 8001600:	b570      	push	{r4, r5, r6, lr}
 8001602:	2320      	movs	r3, #32
 8001604:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 8001608:	4e0d      	ldr	r6, [pc, #52]	; (8001640 <chCoreAllocAligned+0x40>)
  _dbg_check_lock();
 800160a:	f7ff fe61 	bl	80012d0 <_dbg_check_lock>
  chDbgCheckClassI();
 800160e:	f7ff f917 	bl	8000840 <chDbgCheckClassI>
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 8001612:	6833      	ldr	r3, [r6, #0]
  if (((size_t)endmem - (size_t)p) < size) {
 8001614:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <chCoreAllocAligned+0x44>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 8001616:	3b01      	subs	r3, #1
  if (((size_t)endmem - (size_t)p) < size) {
 8001618:	6815      	ldr	r5, [r2, #0]
  size = MEM_ALIGN_NEXT(size, align);
 800161a:	424c      	negs	r4, r1
 800161c:	1e4a      	subs	r2, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 800161e:	440b      	add	r3, r1
  size = MEM_ALIGN_NEXT(size, align);
 8001620:	1811      	adds	r1, r2, r0
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 8001622:	ea03 0004 	and.w	r0, r3, r4
  size = MEM_ALIGN_NEXT(size, align);
 8001626:	4021      	ands	r1, r4
  if (((size_t)endmem - (size_t)p) < size) {
 8001628:	1a2b      	subs	r3, r5, r0
 800162a:	4299      	cmp	r1, r3
  nextmem = p + size;
 800162c:	bf9a      	itte	ls
 800162e:	1809      	addls	r1, r1, r0
 8001630:	6031      	strls	r1, [r6, #0]
    return NULL;
 8001632:	2000      	movhi	r0, #0
  _dbg_check_unlock();
 8001634:	f7ff fe3c 	bl	80012b0 <_dbg_check_unlock>
 8001638:	2300      	movs	r3, #0
 800163a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
 800163e:	bd70      	pop	{r4, r5, r6, pc}
 8001640:	200009c4 	.word	0x200009c4
 8001644:	200009c0 	.word	0x200009c0
	...

08001650 <chEvtWaitAny>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8001650:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <chEvtWaitAny+0x38>)
eventmask_t chEvtWaitAny(eventmask_t events) {
 8001654:	4605      	mov	r5, r0
  thread_t *ctp = currp;
 8001656:	699c      	ldr	r4, [r3, #24]
 8001658:	2320      	movs	r3, #32
 800165a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800165e:	f7ff fe37 	bl	80012d0 <_dbg_check_lock>
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8001662:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8001664:	4018      	ands	r0, r3
 8001666:	d106      	bne.n	8001676 <chEvtWaitAny+0x26>
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
 8001668:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 800166a:	6265      	str	r5, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 800166c:	f7ff f8d0 	bl	8000810 <chSchGoSleepS>
    m = ctp->epending & events;
 8001670:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001672:	ea05 0003 	and.w	r0, r5, r3
  }
  ctp->epending &= ~m;
 8001676:	ea23 0300 	bic.w	r3, r3, r0
 800167a:	6363      	str	r3, [r4, #52]	; 0x34
  _dbg_check_unlock();
 800167c:	f7ff fe18 	bl	80012b0 <_dbg_check_unlock>
 8001680:	2300      	movs	r3, #0
 8001682:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8001686:	bd38      	pop	{r3, r4, r5, pc}
 8001688:	20003164 	.word	0x20003164
 800168c:	00000000 	.word	0x00000000

08001690 <chEvtBroadcastFlags>:
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {
 8001690:	b508      	push	{r3, lr}
 8001692:	2320      	movs	r3, #32
 8001694:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8001698:	f7ff fe1a 	bl	80012d0 <_dbg_check_lock>
  chEvtBroadcastFlagsI(esp, flags);
 800169c:	f7ff f9e0 	bl	8000a60 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 80016a0:	f7ff f906 	bl	80008b0 <chSchRescheduleS>
  _dbg_check_unlock();
 80016a4:	f7ff fe04 	bl	80012b0 <_dbg_check_unlock>
 80016a8:	2300      	movs	r3, #0
 80016aa:	f383 8811 	msr	BASEPRI, r3
 80016ae:	bd08      	pop	{r3, pc}

080016b0 <chEvtRegisterMaskWithFlags>:
                                eventflags_t wflags) {
 80016b0:	b570      	push	{r4, r5, r6, lr}
 80016b2:	461d      	mov	r5, r3
 80016b4:	4616      	mov	r6, r2
 80016b6:	2320      	movs	r3, #32
 80016b8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80016bc:	f7ff fe08 	bl	80012d0 <_dbg_check_lock>
  elp->listener = currp;
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <chEvtRegisterMaskWithFlags+0x30>)
  elp->next     = esp->next;
 80016c2:	6802      	ldr	r2, [r0, #0]
  elp->listener = currp;
 80016c4:	699b      	ldr	r3, [r3, #24]
  elp->next     = esp->next;
 80016c6:	600a      	str	r2, [r1, #0]
  elp->flags    = (eventflags_t)0;
 80016c8:	2400      	movs	r4, #0
  esp->next     = elp;
 80016ca:	6001      	str	r1, [r0, #0]
  elp->listener = currp;
 80016cc:	604b      	str	r3, [r1, #4]
  elp->events   = events;
 80016ce:	608e      	str	r6, [r1, #8]
  elp->wflags   = wflags;
 80016d0:	610d      	str	r5, [r1, #16]
  elp->flags    = (eventflags_t)0;
 80016d2:	60cc      	str	r4, [r1, #12]
  _dbg_check_unlock();
 80016d4:	f7ff fdec 	bl	80012b0 <_dbg_check_unlock>
 80016d8:	f384 8811 	msr	BASEPRI, r4
 80016dc:	bd70      	pop	{r4, r5, r6, pc}
 80016de:	bf00      	nop
 80016e0:	20003164 	.word	0x20003164
	...

080016f0 <chThdSleep>:
void chThdSleep(systime_t time) {
 80016f0:	b508      	push	{r3, lr}
 80016f2:	4601      	mov	r1, r0
 80016f4:	2320      	movs	r3, #32
 80016f6:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80016fa:	f7ff fde9 	bl	80012d0 <_dbg_check_lock>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80016fe:	2008      	movs	r0, #8
 8001700:	f7ff f8ee 	bl	80008e0 <chSchGoSleepTimeoutS>
  _dbg_check_unlock();
 8001704:	f7ff fdd4 	bl	80012b0 <_dbg_check_unlock>
 8001708:	2300      	movs	r3, #0
 800170a:	f383 8811 	msr	BASEPRI, r3
 800170e:	bd08      	pop	{r3, pc}

08001710 <chThdExit>:
void chThdExit(msg_t msg) {
 8001710:	b538      	push	{r3, r4, r5, lr}
 8001712:	4601      	mov	r1, r0
 8001714:	2320      	movs	r3, #32
 8001716:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800171a:	f7ff fdd9 	bl	80012d0 <_dbg_check_lock>
  thread_t *tp = currp;
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <chThdExit+0x50>)
 8001720:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8001722:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8001724:	6261      	str	r1, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8001726:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800172a:	4285      	cmp	r5, r0
 800172c:	d006      	beq.n	800173c <chThdExit+0x2c>
  tlp->next = tp->queue.next;
 800172e:	6803      	ldr	r3, [r0, #0]
 8001730:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8001732:	f7ff f97d 	bl	8000a30 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8001736:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8001738:	42a8      	cmp	r0, r5
 800173a:	d1f8      	bne.n	800172e <chThdExit+0x1e>
  if ((tp->refs == (trefs_t)0) &&
 800173c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001740:	b943      	cbnz	r3, 8001754 <chThdExit+0x44>
 8001742:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8001746:	079b      	lsls	r3, r3, #30
 8001748:	d104      	bne.n	8001754 <chThdExit+0x44>
    REG_REMOVE(tp);
 800174a:	6963      	ldr	r3, [r4, #20]
 800174c:	6922      	ldr	r2, [r4, #16]
 800174e:	611a      	str	r2, [r3, #16]
 8001750:	6922      	ldr	r2, [r4, #16]
 8001752:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8001754:	200f      	movs	r0, #15
}
 8001756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 800175a:	f7ff b859 	b.w	8000810 <chSchGoSleepS>
 800175e:	bf00      	nop
 8001760:	20003164 	.word	0x20003164
	...

08001770 <chSysGetStatusAndLockX.part.1>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001770:	f3ef 8305 	mrs	r3, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8001774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8001778:	b923      	cbnz	r3, 8001784 <chSysGetStatusAndLockX.part.1+0x14>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800177a:	2320      	movs	r3, #32
 800177c:	f383 8811 	msr	BASEPRI, r3
 8001780:	f7ff bda6 	b.w	80012d0 <_dbg_check_lock>
 8001784:	2320      	movs	r3, #32
 8001786:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 800178a:	f7ff bbf1 	b.w	8000f70 <_dbg_check_lock_from_isr>
 800178e:	bf00      	nop

08001790 <chSysRestoreStatusX>:
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
 8001790:	b988      	cbnz	r0, 80017b6 <chSysRestoreStatusX+0x26>
void chSysRestoreStatusX(syssts_t sts) {
 8001792:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001794:	f3ef 8405 	mrs	r4, IPSR
 8001798:	f3c4 0408 	ubfx	r4, r4, #0, #9
    if (port_is_isr_context()) {
 800179c:	b934      	cbnz	r4, 80017ac <chSysRestoreStatusX+0x1c>
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 800179e:	f7ff f887 	bl	80008b0 <chSchRescheduleS>
  _dbg_check_unlock();
 80017a2:	f7ff fd85 	bl	80012b0 <_dbg_check_unlock>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80017a6:	f384 8811 	msr	BASEPRI, r4
 80017aa:	bd10      	pop	{r4, pc}
  _dbg_check_unlock_from_isr();
 80017ac:	f7ff fbc8 	bl	8000f40 <_dbg_check_unlock_from_isr>
 80017b0:	f380 8811 	msr	BASEPRI, r0
 80017b4:	bd10      	pop	{r4, pc}
 80017b6:	4770      	bx	lr
	...

080017c0 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 80017c0:	e7fe      	b.n	80017c0 <BusFault_Handler>
 80017c2:	bf00      	nop
	...

080017d0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80017d0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 80017d2:	4f12      	ldr	r7, [pc, #72]	; (800181c <__init_ram_areas+0x4c>)
void __init_ram_areas(void) {
 80017d4:	4d12      	ldr	r5, [pc, #72]	; (8001820 <__init_ram_areas+0x50>)
 80017d6:	4c13      	ldr	r4, [pc, #76]	; (8001824 <__init_ram_areas+0x54>)
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <__init_ram_areas+0x58>)
 80017da:	4914      	ldr	r1, [pc, #80]	; (800182c <__init_ram_areas+0x5c>)
 80017dc:	f107 0e80 	add.w	lr, r7, #128	; 0x80
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 80017e0:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 80017e2:	429c      	cmp	r4, r3
 80017e4:	d911      	bls.n	800180a <__init_ram_areas+0x3a>
 80017e6:	3904      	subs	r1, #4
 80017e8:	461a      	mov	r2, r3
      *p = *tp;
 80017ea:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80017ee:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 80017f2:	4294      	cmp	r4, r2
 80017f4:	d8f9      	bhi.n	80017ea <__init_ram_areas+0x1a>
 80017f6:	43da      	mvns	r2, r3
 80017f8:	4414      	add	r4, r2
 80017fa:	f024 0403 	bic.w	r4, r4, #3
 80017fe:	3404      	adds	r4, #4
 8001800:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 8001802:	429d      	cmp	r5, r3
 8001804:	d903      	bls.n	800180e <__init_ram_areas+0x3e>
      *p = 0;
 8001806:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 800180a:	429d      	cmp	r5, r3
 800180c:	d8fb      	bhi.n	8001806 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
 800180e:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8001810:	4577      	cmp	r7, lr
 8001812:	d202      	bcs.n	800181a <__init_ram_areas+0x4a>
 8001814:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
 8001818:	e7e3      	b.n	80017e2 <__init_ram_areas+0x12>
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181c:	08004d98 	.word	0x08004d98
 8001820:	2000320c 	.word	0x2000320c
 8001824:	2000320c 	.word	0x2000320c
 8001828:	2000320c 	.word	0x2000320c
 800182c:	08005078 	.word	0x08005078

08001830 <__default_exit>:
void __default_exit(void) {
 8001830:	e7fe      	b.n	8001830 <__default_exit>
 8001832:	bf00      	nop
	...

08001840 <__late_init>:
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
	...

08001850 <__core_init>:
void __core_init(void) {
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
	...

08001860 <_ZN10chibios_rt10_thd_startEPv>:
    return *this;
  }

  void _thd_start(void *arg) {

    ((BaseThread *)arg)->main();
 8001860:	6803      	ldr	r3, [r0, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4718      	bx	r3
 8001866:	bf00      	nop
	...

08001870 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8001870:	4a02      	ldr	r2, [pc, #8]	; (800187c <notify2+0xc>)
 8001872:	68d3      	ldr	r3, [r2, #12]
 8001874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001878:	60d3      	str	r3, [r2, #12]
 800187a:	4770      	bx	lr
 800187c:	40004400 	.word	0x40004400

08001880 <_ZN10chibios_rt15ThreadReference4stopEv>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001880:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8001882:	4b02      	ldr	r3, [pc, #8]	; (800188c <_ZN10chibios_rt15ThreadReference4stopEv+0xc>)
 8001884:	4a02      	ldr	r2, [pc, #8]	; (8001890 <_ZN10chibios_rt15ThreadReference4stopEv+0x10>)
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
 8001888:	e7fe      	b.n	8001888 <_ZN10chibios_rt15ThreadReference4stopEv+0x8>
 800188a:	bf00      	nop
 800188c:	20003164 	.word	0x20003164
 8001890:	08004e18 	.word	0x08004e18
	...

080018a0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80018a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 80018a4:	4d74      	ldr	r5, [pc, #464]	; (8001a78 <VectorD8+0x1d8>)

  OSAL_IRQ_PROLOGUE();
 80018a6:	f7ff f92b 	bl	8000b00 <_dbg_check_enter_isr>
  USART_TypeDef *u = sdp->usart;
 80018aa:	f8d5 6094 	ldr.w	r6, [r5, #148]	; 0x94
  uint16_t cr1 = u->CR1;
 80018ae:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 80018b2:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80018b4:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 80018b6:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 80018b8:	f100 8093 	bmi.w	80019e2 <VectorD8+0x142>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80018bc:	2320      	movs	r3, #32
 80018be:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80018c2:	f7ff fb55 	bl	8000f70 <_dbg_check_lock_from_isr>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80018c6:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80018ca:	d049      	beq.n	8001960 <VectorD8+0xc0>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80018cc:	4f6b      	ldr	r7, [pc, #428]	; (8001a7c <VectorD8+0x1dc>)
  chThdDequeueNextI(tqp, msg);
 80018ce:	f107 0808 	add.w	r8, r7, #8
 80018d2:	e008      	b.n	80018e6 <VectorD8+0x46>
    if (sr & USART_SR_RXNE)
 80018d4:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80018d6:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 80018da:	d41e      	bmi.n	800191a <VectorD8+0x7a>
    sr = u->SR;
 80018dc:	6834      	ldr	r4, [r6, #0]
 80018de:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80018e0:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80018e4:	d03c      	beq.n	8001960 <VectorD8+0xc0>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80018e6:	0723      	lsls	r3, r4, #28
 80018e8:	d0f4      	beq.n	80018d4 <VectorD8+0x34>
    sts |= SD_OVERRUN_ERROR;
 80018ea:	f014 0f08 	tst.w	r4, #8
 80018ee:	bf0c      	ite	eq
 80018f0:	2100      	moveq	r1, #0
 80018f2:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 80018f4:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 80018f6:	bf48      	it	mi
 80018f8:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 80018fc:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 80018fe:	bf48      	it	mi
 8001900:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8001904:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8001906:	bf48      	it	mi
 8001908:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  chEvtBroadcastFlagsI(esp, flags);
 800190c:	4638      	mov	r0, r7
 800190e:	f7ff f8a7 	bl	8000a60 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8001912:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8001914:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8001918:	d5e0      	bpl.n	80018dc <VectorD8+0x3c>
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
 800191a:	f7fe ff91 	bl	8000840 <chDbgCheckClassI>
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800191e:	696b      	ldr	r3, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8001920:	f895 4098 	ldrb.w	r4, [r5, #152]	; 0x98
 8001924:	b373      	cbz	r3, 8001984 <VectorD8+0xe4>
  osalDbgCheckClassI();
 8001926:	f7fe ff8b 	bl	8000840 <chDbgCheckClassI>
  if (iqIsFullI(iqp)) {
 800192a:	6a2b      	ldr	r3, [r5, #32]
 800192c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800192e:	4293      	cmp	r3, r2
 8001930:	d032      	beq.n	8001998 <VectorD8+0xf8>
  iqp->q_counter++;
 8001932:	696a      	ldr	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
 8001934:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
 8001936:	3201      	adds	r2, #1
 8001938:	ea04 0a0a 	and.w	sl, r4, sl
 800193c:	616a      	str	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
 800193e:	6229      	str	r1, [r5, #32]
 8001940:	f883 a000 	strb.w	sl, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
 8001944:	6a2a      	ldr	r2, [r5, #32]
 8001946:	69eb      	ldr	r3, [r5, #28]
 8001948:	429a      	cmp	r2, r3
 800194a:	d301      	bcc.n	8001950 <VectorD8+0xb0>
    iqp->q_wrptr = iqp->q_buffer;
 800194c:	69ab      	ldr	r3, [r5, #24]
 800194e:	622b      	str	r3, [r5, #32]
  chThdDequeueNextI(tqp, msg);
 8001950:	4640      	mov	r0, r8
 8001952:	f001 fc5d 	bl	8003210 <chThdDequeueNextI.constprop.63>
    sr = u->SR;
 8001956:	6834      	ldr	r4, [r6, #0]
 8001958:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800195a:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800195e:	d1c2      	bne.n	80018e6 <VectorD8+0x46>
  _dbg_check_unlock_from_isr();
 8001960:	f7ff faee 	bl	8000f40 <_dbg_check_unlock_from_isr>
 8001964:	2300      	movs	r3, #0
 8001966:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800196a:	f019 0f80 	tst.w	r9, #128	; 0x80
 800196e:	d001      	beq.n	8001974 <VectorD8+0xd4>
 8001970:	0622      	lsls	r2, r4, #24
 8001972:	d449      	bmi.n	8001a08 <VectorD8+0x168>
  if (sr & USART_SR_TC) {
 8001974:	0663      	lsls	r3, r4, #25
 8001976:	d418      	bmi.n	80019aa <VectorD8+0x10a>

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 8001978:	f7ff f8aa 	bl	8000ad0 <_dbg_check_leave_isr>
}
 800197c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8001980:	f7fe bed6 	b.w	8000730 <_port_irq_epilogue>
  chEvtBroadcastFlagsI(esp, flags);
 8001984:	2104      	movs	r1, #4
 8001986:	4638      	mov	r0, r7
 8001988:	f7ff f86a 	bl	8000a60 <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
 800198c:	f7fe ff58 	bl	8000840 <chDbgCheckClassI>
  if (iqIsFullI(iqp)) {
 8001990:	6a2b      	ldr	r3, [r5, #32]
 8001992:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001994:	4293      	cmp	r3, r2
 8001996:	d1cc      	bne.n	8001932 <VectorD8+0x92>
 8001998:	696a      	ldr	r2, [r5, #20]
 800199a:	2a00      	cmp	r2, #0
 800199c:	d0c9      	beq.n	8001932 <VectorD8+0x92>
 800199e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019a2:	4638      	mov	r0, r7
 80019a4:	f7ff f85c 	bl	8000a60 <chEvtBroadcastFlagsI>
 80019a8:	e798      	b.n	80018dc <VectorD8+0x3c>
 80019aa:	2320      	movs	r3, #32
 80019ac:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80019b0:	f7ff fade 	bl	8000f70 <_dbg_check_lock_from_isr>
    if (oqIsEmptyI(&sdp->oqueue))
 80019b4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80019b6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d045      	beq.n	8001a48 <VectorD8+0x1a8>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80019bc:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80019c0:	ea09 0303 	and.w	r3, r9, r3
    u->SR = ~USART_SR_TC;
 80019c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80019c8:	60f3      	str	r3, [r6, #12]
    u->SR = ~USART_SR_TC;
 80019ca:	6032      	str	r2, [r6, #0]
  _dbg_check_unlock_from_isr();
 80019cc:	f7ff fab8 	bl	8000f40 <_dbg_check_unlock_from_isr>
 80019d0:	2300      	movs	r3, #0
 80019d2:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_EPILOGUE();
 80019d6:	f7ff f87b 	bl	8000ad0 <_dbg_check_leave_isr>
}
 80019da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 80019de:	f7fe bea7 	b.w	8000730 <_port_irq_epilogue>
 80019e2:	2320      	movs	r3, #32
 80019e4:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80019e8:	f7ff fac2 	bl	8000f70 <_dbg_check_lock_from_isr>
 80019ec:	1d28      	adds	r0, r5, #4
 80019ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019f2:	f7ff f835 	bl	8000a60 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 80019f6:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80019fa:	6033      	str	r3, [r6, #0]
  _dbg_check_unlock_from_isr();
 80019fc:	f7ff faa0 	bl	8000f40 <_dbg_check_unlock_from_isr>
 8001a00:	2300      	movs	r3, #0
 8001a02:	f383 8811 	msr	BASEPRI, r3
 8001a06:	e759      	b.n	80018bc <VectorD8+0x1c>
 8001a08:	2320      	movs	r3, #32
 8001a0a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8001a0e:	f7ff faaf 	bl	8000f70 <_dbg_check_lock_from_isr>
  osalDbgCheckClassI();
 8001a12:	f7fe ff15 	bl	8000840 <chDbgCheckClassI>
  if (oqIsEmptyI(oqp)) {
 8001a16:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001a18:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d01c      	beq.n	8001a58 <VectorD8+0x1b8>
  oqp->q_counter++;
 8001a1e:	6baa      	ldr	r2, [r5, #56]	; 0x38
  if (oqp->q_rdptr >= oqp->q_top) {
 8001a20:	6c29      	ldr	r1, [r5, #64]	; 0x40
  b = *oqp->q_rdptr++;
 8001a22:	1c58      	adds	r0, r3, #1
  oqp->q_counter++;
 8001a24:	3201      	adds	r2, #1
 8001a26:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8001a28:	64a8      	str	r0, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 8001a2a:	4288      	cmp	r0, r1
  b = *oqp->q_rdptr++;
 8001a2c:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8001a2e:	d301      	bcc.n	8001a34 <VectorD8+0x194>
    oqp->q_rdptr = oqp->q_buffer;
 8001a30:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001a32:	64ab      	str	r3, [r5, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 8001a34:	4812      	ldr	r0, [pc, #72]	; (8001a80 <VectorD8+0x1e0>)
 8001a36:	f001 fbeb 	bl	8003210 <chThdDequeueNextI.constprop.63>
      u->DR = b;
 8001a3a:	6077      	str	r7, [r6, #4]
  _dbg_check_unlock_from_isr();
 8001a3c:	f7ff fa80 	bl	8000f40 <_dbg_check_unlock_from_isr>
 8001a40:	2300      	movs	r3, #0
 8001a42:	f383 8811 	msr	BASEPRI, r3
 8001a46:	e795      	b.n	8001974 <VectorD8+0xd4>
    if (oqIsEmptyI(&sdp->oqueue))
 8001a48:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0b6      	beq.n	80019bc <VectorD8+0x11c>
  chEvtBroadcastFlagsI(esp, flags);
 8001a4e:	2110      	movs	r1, #16
 8001a50:	480a      	ldr	r0, [pc, #40]	; (8001a7c <VectorD8+0x1dc>)
 8001a52:	f7ff f805 	bl	8000a60 <chEvtBroadcastFlagsI>
 8001a56:	e7b1      	b.n	80019bc <VectorD8+0x11c>
  if (oqIsEmptyI(oqp)) {
 8001a58:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001a5a:	2a00      	cmp	r2, #0
 8001a5c:	d0df      	beq.n	8001a1e <VectorD8+0x17e>
 8001a5e:	2108      	movs	r1, #8
 8001a60:	4806      	ldr	r0, [pc, #24]	; (8001a7c <VectorD8+0x1dc>)
 8001a62:	f7fe fffd 	bl	8000a60 <chEvtBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8001a66:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8001a6a:	ea09 0303 	and.w	r3, r9, r3
 8001a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a72:	60f3      	str	r3, [r6, #12]
 8001a74:	e7e2      	b.n	8001a3c <VectorD8+0x19c>
 8001a76:	bf00      	nop
 8001a78:	20000ae4 	.word	0x20000ae4
 8001a7c:	20000ae8 	.word	0x20000ae8
 8001a80:	20000b14 	.word	0x20000b14
	...

08001a90 <__early_init>:
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001a90:	4a49      	ldr	r2, [pc, #292]	; (8001bb8 <__early_init+0x128>)
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001a92:	4b4a      	ldr	r3, [pc, #296]	; (8001bbc <__early_init+0x12c>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001a94:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8001a98:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001a9c:	6410      	str	r0, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8001a9e:	6019      	str	r1, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001aa0:	6813      	ldr	r3, [r2, #0]
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001aa8:	6813      	ldr	r3, [r2, #0]
 8001aaa:	0799      	lsls	r1, r3, #30
 8001aac:	d5fc      	bpl.n	8001aa8 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8001aae:	6893      	ldr	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001ab0:	4941      	ldr	r1, [pc, #260]	; (8001bb8 <__early_init+0x128>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8001ab2:	f023 0303 	bic.w	r3, r3, #3
 8001ab6:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8001ab8:	6893      	ldr	r3, [r2, #8]
 8001aba:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001abc:	688b      	ldr	r3, [r1, #8]
 8001abe:	f013 030c 	ands.w	r3, r3, #12
 8001ac2:	d1fb      	bne.n	8001abc <__early_init+0x2c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001ac4:	680a      	ldr	r2, [r1, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001ac6:	483c      	ldr	r0, [pc, #240]	; (8001bb8 <__early_init+0x128>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001ac8:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 8001acc:	600a      	str	r2, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001ace:	608b      	str	r3, [r1, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8001ad0:	680b      	ldr	r3, [r1, #0]
 8001ad2:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001ad6:	600b      	str	r3, [r1, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001ad8:	6803      	ldr	r3, [r0, #0]
 8001ada:	039b      	lsls	r3, r3, #14
 8001adc:	d5fc      	bpl.n	8001ad8 <__early_init+0x48>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001ade:	6f43      	ldr	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001ae0:	4a35      	ldr	r2, [pc, #212]	; (8001bb8 <__early_init+0x128>)
  RCC->CSR |= RCC_CSR_LSION;
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6743      	str	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001ae8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001aea:	0799      	lsls	r1, r3, #30
 8001aec:	d5fc      	bpl.n	8001ae8 <__early_init+0x58>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8001aee:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <__early_init+0x130>)
 8001af0:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001af2:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001af4:	4931      	ldr	r1, [pc, #196]	; (8001bbc <__early_init+0x12c>)
  RCC->CR |= RCC_CR_PLLON;
 8001af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001afa:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001afc:	684b      	ldr	r3, [r1, #4]
 8001afe:	045a      	lsls	r2, r3, #17
 8001b00:	d5fc      	bpl.n	8001afc <__early_init+0x6c>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR |= PWR_CR_ODEN;
 8001b02:	680b      	ldr	r3, [r1, #0]
  while (!(PWR->CSR & PWR_CSR_ODRDY))
 8001b04:	4a2d      	ldr	r2, [pc, #180]	; (8001bbc <__early_init+0x12c>)
  PWR->CR |= PWR_CR_ODEN;
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0a:	600b      	str	r3, [r1, #0]
  while (!(PWR->CSR & PWR_CSR_ODRDY))
 8001b0c:	6853      	ldr	r3, [r2, #4]
 8001b0e:	03db      	lsls	r3, r3, #15
 8001b10:	d5fc      	bpl.n	8001b0c <__early_init+0x7c>
      ;
  PWR->CR |= PWR_CR_ODSWEN;
 8001b12:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR & PWR_CSR_ODSWRDY))
 8001b14:	4929      	ldr	r1, [pc, #164]	; (8001bbc <__early_init+0x12c>)
  PWR->CR |= PWR_CR_ODSWEN;
 8001b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1a:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR & PWR_CSR_ODSWRDY))
 8001b1c:	684b      	ldr	r3, [r1, #4]
 8001b1e:	0398      	lsls	r0, r3, #14
 8001b20:	d5fc      	bpl.n	8001b1c <__early_init+0x8c>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001b22:	4a25      	ldr	r2, [pc, #148]	; (8001bb8 <__early_init+0x128>)
 8001b24:	6813      	ldr	r3, [r2, #0]
 8001b26:	0199      	lsls	r1, r3, #6
 8001b28:	d5fc      	bpl.n	8001b24 <__early_init+0x94>
    ;
#endif /* STM32_ACTIVATE_PLL */

#if STM32_ACTIVATE_PLLI2S
  /* PLLI2S activation.*/
  RCC->PLLI2SCFGR = STM32_PLLI2SR | STM32_PLLI2SN | STM32_PLLI2SP |
 8001b2a:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <__early_init+0x134>)
 8001b2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                    STM32_PLLI2SQ | STM32_PLLI2SM;
  RCC->CR |= RCC_CR_PLLI2SON;
 8001b30:	6813      	ldr	r3, [r2, #0]

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 8001b32:	4921      	ldr	r1, [pc, #132]	; (8001bb8 <__early_init+0x128>)
  RCC->CR |= RCC_CR_PLLI2SON;
 8001b34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b38:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 8001b3a:	680b      	ldr	r3, [r1, #0]
 8001b3c:	011a      	lsls	r2, r3, #4
 8001b3e:	d5fc      	bpl.n	8001b3a <__early_init+0xaa>
    ;
#endif /* STM32_ACTIVATE_PLLI2S */

#if STM32_ACTIVATE_PLLSAI
  /* PLLSAI activation.*/
  RCC->PLLSAICFGR = STM32_PLLSAIR | STM32_PLLSAIN | STM32_PLLSAIP |
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <__early_init+0x138>)
 8001b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                    STM32_PLLSAIQ | STM32_PLLSAIM;
  RCC->CR |= RCC_CR_PLLSAION;
 8001b46:	680b      	ldr	r3, [r1, #0]

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 8001b48:	4a1b      	ldr	r2, [pc, #108]	; (8001bb8 <__early_init+0x128>)
  RCC->CR |= RCC_CR_PLLSAION;
 8001b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 8001b50:	6813      	ldr	r3, [r2, #0]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	d5fc      	bpl.n	8001b50 <__early_init+0xc0>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001b56:	491d      	ldr	r1, [pc, #116]	; (8001bcc <__early_init+0x13c>)
 8001b58:	6091      	str	r1, [r2, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <__early_init+0x140>)
    RCC->DCKCFGR = dckcfgr | STM32_PLLI2SDIVQ | STM32_PLLSAIDIVQ;
 8001b5c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 8001b60:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    RCC->DCKCFGR = dckcfgr | STM32_PLLI2SDIVQ | STM32_PLLSAIDIVQ;
 8001b64:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 8001b68:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <__early_init+0x144>)
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d016      	beq.n	8001ba2 <__early_init+0x112>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <__early_init+0x148>)
 8001b76:	f240 7205 	movw	r2, #1797	; 0x705
 8001b7a:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <__early_init+0x128>)
 8001b7e:	6893      	ldr	r3, [r2, #8]
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001b86:	6893      	ldr	r3, [r2, #8]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d1fa      	bne.n	8001b86 <__early_init+0xf6>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8001b90:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b96:	6453      	str	r3, [r2, #68]	; 0x44
 8001b98:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9e:	6653      	str	r3, [r2, #100]	; 0x64
 8001ba0:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <__early_init+0x14c>)
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <__early_init+0x150>)
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d1e3      	bne.n	8001b74 <__early_init+0xe4>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <__early_init+0x148>)
 8001bae:	f240 1205 	movw	r2, #261	; 0x105
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e7e2      	b.n	8001b7c <__early_init+0xec>
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40007000 	.word	0x40007000
 8001bc0:	07405a08 	.word	0x07405a08
 8001bc4:	44013004 	.word	0x44013004
 8001bc8:	44033004 	.word	0x44033004
 8001bcc:	40089400 	.word	0x40089400
 8001bd0:	e0042000 	.word	0xe0042000
 8001bd4:	20006411 	.word	0x20006411
 8001bd8:	40023c00 	.word	0x40023c00
 8001bdc:	e000ed00 	.word	0xe000ed00
 8001be0:	410fc241 	.word	0x410fc241
	...

08001bf0 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8001bf0:	6983      	ldr	r3, [r0, #24]
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8001bf2:	b570      	push	{r4, r5, r6, lr}
  sr  = pwmp->tim->SR;
 8001bf4:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	4014      	ands	r4, r2
 8001bfa:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 8001bfc:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8001bfe:	07a6      	lsls	r6, r4, #30
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8001c00:	4605      	mov	r5, r0
  pwmp->tim->SR = ~sr;
 8001c02:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8001c04:	d503      	bpl.n	8001c0e <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
 8001c06:	6843      	ldr	r3, [r0, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8001c0a:	b103      	cbz	r3, 8001c0e <pwm_lld_serve_interrupt+0x1e>
    pwmp->config->channels[0].callback(pwmp);
 8001c0c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8001c0e:	0760      	lsls	r0, r4, #29
 8001c10:	d504      	bpl.n	8001c1c <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
 8001c12:	686b      	ldr	r3, [r5, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8001c16:	b10b      	cbz	r3, 8001c1c <pwm_lld_serve_interrupt+0x2c>
    pwmp->config->channels[1].callback(pwmp);
 8001c18:	4628      	mov	r0, r5
 8001c1a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8001c1c:	0721      	lsls	r1, r4, #28
 8001c1e:	d504      	bpl.n	8001c2a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
 8001c20:	686b      	ldr	r3, [r5, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8001c24:	b10b      	cbz	r3, 8001c2a <pwm_lld_serve_interrupt+0x3a>
    pwmp->config->channels[2].callback(pwmp);
 8001c26:	4628      	mov	r0, r5
 8001c28:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8001c2a:	06e2      	lsls	r2, r4, #27
 8001c2c:	d504      	bpl.n	8001c38 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
 8001c2e:	686b      	ldr	r3, [r5, #4]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8001c32:	b10b      	cbz	r3, 8001c38 <pwm_lld_serve_interrupt+0x48>
    pwmp->config->channels[3].callback(pwmp);
 8001c34:	4628      	mov	r0, r5
 8001c36:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 8001c38:	07e3      	lsls	r3, r4, #31
 8001c3a:	d506      	bpl.n	8001c4a <pwm_lld_serve_interrupt+0x5a>
 8001c3c:	686b      	ldr	r3, [r5, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	b11b      	cbz	r3, 8001c4a <pwm_lld_serve_interrupt+0x5a>
    pwmp->config->callback(pwmp);
 8001c42:	4628      	mov	r0, r5
}
 8001c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->callback(pwmp);
 8001c48:	4718      	bx	r3
 8001c4a:	bd70      	pop	{r4, r5, r6, pc}
 8001c4c:	0000      	movs	r0, r0
	...

08001c50 <main>:
  rccResetAHB1(~0);
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <main+0x6c>)
  PWR->CR |= PWR_CR_DBP;
 8001c52:	4c1b      	ldr	r4, [pc, #108]	; (8001cc0 <main+0x70>)
  rccResetAHB1(~0);
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c5a:	2200      	movs	r2, #0


/*
 * Application entry point.
 */
int main(void) {
 8001c5c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001c60:	6119      	str	r1, [r3, #16]
 8001c62:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8001c64:	6958      	ldr	r0, [r3, #20]
 8001c66:	6159      	str	r1, [r3, #20]
 8001c68:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001c6a:	6a18      	ldr	r0, [r3, #32]
 8001c6c:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8001c70:	6218      	str	r0, [r3, #32]
 8001c72:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8001c74:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001c76:	6259      	str	r1, [r3, #36]	; 0x24
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(FALSE);
 8001c7a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001c7c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001c80:	6419      	str	r1, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 8001c82:	6821      	ldr	r1, [r4, #0]
 8001c84:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001c88:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001c8a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001c8c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8001c90:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001c94:	b089      	sub	sp, #36	; 0x24
 8001c96:	d003      	beq.n	8001ca0 <main+0x50>
    RCC->BDCR = RCC_BDCR_BDRST;
 8001c98:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001c9c:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8001c9e:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8001ca0:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <main+0x70>)
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 8001ca2:	4e08      	ldr	r6, [pc, #32]	; (8001cc4 <main+0x74>)
 8001ca4:	6843      	ldr	r3, [r0, #4]
 8001ca6:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <main+0x78>)
 8001ca8:	4c08      	ldr	r4, [pc, #32]	; (8001ccc <main+0x7c>)
 8001caa:	4f09      	ldr	r7, [pc, #36]	; (8001cd0 <main+0x80>)
 8001cac:	2100      	movs	r1, #0
 8001cae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001cb2:	6043      	str	r3, [r0, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001cb4:	460d      	mov	r5, r1
    _stm32_dma_streams[i].stream->CR = 0U;
 8001cb6:	460b      	mov	r3, r1
  dma_streams_mask = 0U;
 8001cb8:	6031      	str	r1, [r6, #0]
 8001cba:	e00d      	b.n	8001cd8 <main+0x88>
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40007000 	.word	0x40007000
 8001cc4:	20000a90 	.word	0x20000a90
 8001cc8:	08004e48 	.word	0x08004e48
 8001ccc:	40026010 	.word	0x40026010
 8001cd0:	20000a10 	.word	0x20000a10
 8001cd4:	f852 4c0c 	ldr.w	r4, [r2, #-12]
    _stm32_dma_streams[i].stream->CR = 0U;
 8001cd8:	6025      	str	r5, [r4, #0]
    dma_isr_redir[i].dma_func = NULL;
 8001cda:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001cde:	3301      	adds	r3, #1
 8001ce0:	2b10      	cmp	r3, #16
 8001ce2:	f102 020c 	add.w	r2, r2, #12
 8001ce6:	d1f5      	bne.n	8001cd4 <main+0x84>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8001ce8:	f8df c364 	ldr.w	ip, [pc, #868]	; 8002050 <main+0x400>
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8001cec:	f8df e364 	ldr.w	lr, [pc, #868]	; 8002054 <main+0x404>
 8001cf0:	9301      	str	r3, [sp, #4]
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8001cf2:	49b9      	ldr	r1, [pc, #740]	; (8001fd8 <main+0x388>)
  gpiop->OTYPER  = config->otyper;
 8001cf4:	f8df a360 	ldr.w	sl, [pc, #864]	; 8002058 <main+0x408>
  gpiop->PUPDR   = config->pupdr;
 8001cf8:	f8df 8360 	ldr.w	r8, [pc, #864]	; 800205c <main+0x40c>
  gpiop->OTYPER  = config->otyper;
 8001cfc:	4eb7      	ldr	r6, [pc, #732]	; (8001fdc <main+0x38c>)
 8001cfe:	f8df b360 	ldr.w	fp, [pc, #864]	; 8002060 <main+0x410>
 8001d02:	4cb7      	ldr	r4, [pc, #732]	; (8001fe0 <main+0x390>)
 8001d04:	48b7      	ldr	r0, [pc, #732]	; (8001fe4 <main+0x394>)
  sdp->vmt = &vmt;
 8001d06:	4fb8      	ldr	r7, [pc, #736]	; (8001fe8 <main+0x398>)
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8001d08:	4ab8      	ldr	r2, [pc, #736]	; (8001fec <main+0x39c>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001d0a:	f8df 9358 	ldr.w	r9, [pc, #856]	; 8002064 <main+0x414>
  DMA1->LIFCR = 0xFFFFFFFFU;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d12:	f8cc 3008 	str.w	r3, [ip, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8001d16:	f8cc 300c 	str.w	r3, [ip, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8001d1a:	f8ce 3008 	str.w	r3, [lr, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8001d1e:	f8ce 300c 	str.w	r3, [lr, #12]
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8001d22:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
 8001d26:	f04e 0eff 	orr.w	lr, lr, #255	; 0xff
 8001d2a:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8001d2e:	f8d1 e050 	ldr.w	lr, [r1, #80]	; 0x50
 8001d32:	f04e 0eff 	orr.w	lr, lr, #255	; 0xff
 8001d36:	f8c1 e050 	str.w	lr, [r1, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8001d3a:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
  gpiop->OTYPER  = config->otyper;
 8001d3e:	f8ca 5004 	str.w	r5, [sl, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001d42:	f8ca e008 	str.w	lr, [sl, #8]
  gpiop->ODR     = config->odr;
 8001d46:	f64f 7edf 	movw	lr, #65503	; 0xffdf
  gpiop->PUPDR   = config->pupdr;
 8001d4a:	f8ca 800c 	str.w	r8, [sl, #12]
  gpiop->AFRL    = config->afrl;
 8001d4e:	f44f 4cee 	mov.w	ip, #30464	; 0x7700
  gpiop->ODR     = config->odr;
 8001d52:	f8ca e014 	str.w	lr, [sl, #20]
  gpiop->MODER   = config->moder;
 8001d56:	49a6      	ldr	r1, [pc, #664]	; (8001ff0 <main+0x3a0>)
  gpiop->AFRL    = config->afrl;
 8001d58:	f8ca c020 	str.w	ip, [sl, #32]
  gpiop->AFRH    = config->afrh;
 8001d5c:	f44f 2e2a 	mov.w	lr, #696320	; 0xaa000
 8001d60:	f8ca e024 	str.w	lr, [sl, #36]	; 0x24
  gpiop->PUPDR   = config->pupdr;
 8001d64:	f04f 3c55 	mov.w	ip, #1431655765	; 0x55555555
  gpiop->MODER   = config->moder;
 8001d68:	f8ca 1000 	str.w	r1, [sl]
  gpiop->ODR     = config->odr;
 8001d6c:	f64f 7eff 	movw	lr, #65535	; 0xffff
  gpiop->MODER   = config->moder;
 8001d70:	2180      	movs	r1, #128	; 0x80
  gpiop->OTYPER  = config->otyper;
 8001d72:	6075      	str	r5, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001d74:	60b3      	str	r3, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8001d76:	f8c6 c00c 	str.w	ip, [r6, #12]
  gpiop->ODR     = config->odr;
 8001d7a:	f8c6 e014 	str.w	lr, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8001d7e:	6235      	str	r5, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8001d80:	6275      	str	r5, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001d82:	6031      	str	r1, [r6, #0]
  gpiop->PUPDR   = config->pupdr;
 8001d84:	499b      	ldr	r1, [pc, #620]	; (8001ff4 <main+0x3a4>)
  gpiop->OTYPER  = config->otyper;
 8001d86:	f8cb 5004 	str.w	r5, [fp, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001d8a:	f8cb 3008 	str.w	r3, [fp, #8]
  gpiop->PUPDR   = config->pupdr;
 8001d8e:	f8cb 100c 	str.w	r1, [fp, #12]
  gpiop->OTYPER  = config->otyper;
 8001d92:	4999      	ldr	r1, [pc, #612]	; (8001ff8 <main+0x3a8>)
  gpiop->ODR     = config->odr;
 8001d94:	f8cb e014 	str.w	lr, [fp, #20]
  gpiop->AFRL    = config->afrl;
 8001d98:	f8cb 5020 	str.w	r5, [fp, #32]
  gpiop->AFRH    = config->afrh;
 8001d9c:	f8cb 5024 	str.w	r5, [fp, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001da0:	f8cb 5000 	str.w	r5, [fp]
  gpiop->OTYPER  = config->otyper;
 8001da4:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001da6:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8001da8:	f8c4 c00c 	str.w	ip, [r4, #12]
  gpiop->ODR     = config->odr;
 8001dac:	f8c4 e014 	str.w	lr, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8001db0:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8001db2:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001db4:	6025      	str	r5, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8001db6:	6045      	str	r5, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001db8:	6083      	str	r3, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8001dba:	f8c0 c00c 	str.w	ip, [r0, #12]
  gpiop->ODR     = config->odr;
 8001dbe:	f8c0 e014 	str.w	lr, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8001dc2:	6205      	str	r5, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8001dc4:	6245      	str	r5, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001dc6:	6005      	str	r5, [r0, #0]
  gpiop->OTYPER  = config->otyper;
 8001dc8:	604d      	str	r5, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001dca:	608b      	str	r3, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8001dcc:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8001dd0:	f8c1 e014 	str.w	lr, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8001dd4:	620d      	str	r5, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8001dd6:	624d      	str	r5, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001dd8:	600d      	str	r5, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8001dda:	f8c1 5404 	str.w	r5, [r1, #1028]	; 0x404
 8001dde:	f501 6180 	add.w	r1, r1, #1024	; 0x400
  gpiop->OSPEEDR = config->ospeedr;
 8001de2:	608b      	str	r3, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8001de4:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8001de8:	f8c1 e014 	str.w	lr, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8001dec:	620d      	str	r5, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8001dee:	624d      	str	r5, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001df0:	600d      	str	r5, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8001df2:	f8c1 5404 	str.w	r5, [r1, #1028]	; 0x404
 8001df6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001dfa:	f04f 0801 	mov.w	r8, #1
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001dfe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001e02:	2660      	movs	r6, #96	; 0x60
  gpiop->PUPDR   = config->pupdr;
 8001e04:	4c7d      	ldr	r4, [pc, #500]	; (8001ffc <main+0x3ac>)
  gpiop->OSPEEDR = config->ospeedr;
 8001e06:	608b      	str	r3, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8001e08:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 8001e0a:	f8c1 e014 	str.w	lr, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8001e0e:	620d      	str	r5, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8001e10:	624d      	str	r5, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001e12:	600d      	str	r5, [r1, #0]
 8001e14:	f882 8000 	strb.w	r8, [r2]
  adcp->config   = NULL;
 8001e18:	6055      	str	r5, [r2, #4]
 8001e1a:	f889 6312 	strb.w	r6, [r9, #786]	; 0x312
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e1e:	f8c9 0180 	str.w	r0, [r9, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001e22:	f8c9 0000 	str.w	r0, [r9]
 8001e26:	4638      	mov	r0, r7
 8001e28:	f8df c23c 	ldr.w	ip, [pc, #572]	; 8002068 <main+0x418>
 8001e2c:	f840 cb04 	str.w	ip, [r0], #4
 8001e30:	9000      	str	r0, [sp, #0]
  ADCD1.adc = ADC1;
 8001e32:	4873      	ldr	r0, [pc, #460]	; (8002000 <main+0x3b0>)
 8001e34:	6290      	str	r0, [r2, #40]	; 0x28
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8001e36:	9800      	ldr	r0, [sp, #0]
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8001e38:	4e72      	ldr	r6, [pc, #456]	; (8002004 <main+0x3b4>)
 8001e3a:	6078      	str	r0, [r7, #4]
  iqp->q_buffer  = bp;
 8001e3c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001e40:	6316      	str	r6, [r2, #48]	; 0x30
 8001e42:	61b8      	str	r0, [r7, #24]
  tqp->next = (thread_t *)tqp;
 8001e44:	f107 060c 	add.w	r6, r7, #12
  iqp->q_rdptr   = bp;
 8001e48:	6278      	str	r0, [r7, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8001e4a:	6238      	str	r0, [r7, #32]
  pwmp->state    = PWM_STOP;
 8001e4c:	486e      	ldr	r0, [pc, #440]	; (8002008 <main+0x3b8>)
 8001e4e:	4c6f      	ldr	r4, [pc, #444]	; (800200c <main+0x3bc>)
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8001e50:	f8df c218 	ldr.w	ip, [pc, #536]	; 800206c <main+0x41c>
 8001e54:	60fe      	str	r6, [r7, #12]
 8001e56:	f102 0e18 	add.w	lr, r2, #24
  tqp->prev = (thread_t *)tqp;
 8001e5a:	613e      	str	r6, [r7, #16]
  PWMD3.tim = STM32_TIM3;
 8001e5c:	4e6c      	ldr	r6, [pc, #432]	; (8002010 <main+0x3c0>)
  tqp->next = (thread_t *)tqp;
 8001e5e:	f8c2 e018 	str.w	lr, [r2, #24]
  tqp->prev = (thread_t *)tqp;
 8001e62:	f8c2 e01c 	str.w	lr, [r2, #28]
 8001e66:	f8c2 c02c 	str.w	ip, [r2, #44]	; 0x2c
 8001e6a:	6186      	str	r6, [r0, #24]
  adcp->samples  = NULL;
 8001e6c:	6095      	str	r5, [r2, #8]
  PWMD3.channels = STM32_TIM3_CHANNELS;
 8001e6e:	f04f 0604 	mov.w	r6, #4
  adcp->depth    = 0;
 8001e72:	60d5      	str	r5, [r2, #12]
  adcp->grpp     = NULL;
 8001e74:	6115      	str	r5, [r2, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8001e76:	6155      	str	r5, [r2, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8001e78:	6215      	str	r5, [r2, #32]
  PWMD8.tim = STM32_TIM8;
 8001e7a:	4a66      	ldr	r2, [pc, #408]	; (8002014 <main+0x3c4>)
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8001e7c:	4966      	ldr	r1, [pc, #408]	; (8002018 <main+0x3c8>)
  PWMD3.channels = STM32_TIM3_CHANNELS;
 8001e7e:	7406      	strb	r6, [r0, #16]
 8001e80:	f880 8000 	strb.w	r8, [r0]
  pwmp->config   = NULL;
 8001e84:	6045      	str	r5, [r0, #4]
  pwmp->enabled  = 0;
 8001e86:	60c5      	str	r5, [r0, #12]
  sdp->state = SD_STOP;
 8001e88:	f887 8008 	strb.w	r8, [r7, #8]
  iqp->q_counter = 0;
 8001e8c:	617d      	str	r5, [r7, #20]
  pwmp->state    = PWM_STOP;
 8001e8e:	f884 8000 	strb.w	r8, [r4]
  pwmp->config   = NULL;
 8001e92:	6065      	str	r5, [r4, #4]
  pwmp->enabled  = 0;
 8001e94:	60e5      	str	r5, [r4, #12]
  PWMD8.tim = STM32_TIM8;
 8001e96:	61a2      	str	r2, [r4, #24]
  oqp->q_counter = size;
 8001e98:	2220      	movs	r2, #32
 8001e9a:	63ba      	str	r2, [r7, #56]	; 0x38

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001e9c:	4a4e      	ldr	r2, [pc, #312]	; (8001fd8 <main+0x388>)
  PWMD8.channels = STM32_TIM8_CHANNELS;
 8001e9e:	7426      	strb	r6, [r4, #16]
 8001ea0:	f881 8000 	strb.w	r8, [r1]
 8001ea4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ea6:	4e4c      	ldr	r6, [pc, #304]	; (8001fd8 <main+0x388>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001ea8:	485c      	ldr	r0, [pc, #368]	; (800201c <main+0x3cc>)
  iqp->q_top     = bp + size;
 8001eaa:	f107 0e74 	add.w	lr, r7, #116	; 0x74
  ST_ENABLE_CLOCK();
 8001eae:	ea42 0208 	orr.w	r2, r2, r8
 8001eb2:	f8c7 e01c 	str.w	lr, [r7, #28]
  oqp->q_buffer  = bp;
 8001eb6:	f8c7 e03c 	str.w	lr, [r7, #60]	; 0x3c
 8001eba:	6432      	str	r2, [r6, #64]	; 0x40
  ST_ENABLE_STOP();
 8001ebc:	6882      	ldr	r2, [r0, #8]
  oqp->q_rdptr   = bp;
 8001ebe:	f8c7 e048 	str.w	lr, [r7, #72]	; 0x48
 8001ec2:	ea42 0208 	orr.w	r2, r2, r8
 8001ec6:	9200      	str	r2, [sp, #0]
  oqp->q_top     = bp + size;
 8001ec8:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001ecc:	643a      	str	r2, [r7, #64]	; 0x40
  oqp->q_notify  = onfy;
 8001ece:	4a54      	ldr	r2, [pc, #336]	; (8002020 <main+0x3d0>)
 8001ed0:	64fa      	str	r2, [r7, #76]	; 0x4c
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8001ed2:	4a54      	ldr	r2, [pc, #336]	; (8002024 <main+0x3d4>)
 8001ed4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 */
void spi_lld_init(void) {

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8001ed8:	f502 426c 	add.w	r2, r2, #60416	; 0xec00
 8001edc:	61ca      	str	r2, [r1, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8001ede:	f1ac 020c 	sub.w	r2, ip, #12
 8001ee2:	624a      	str	r2, [r1, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8001ee4:	4a50      	ldr	r2, [pc, #320]	; (8002028 <main+0x3d8>)
 8001ee6:	628a      	str	r2, [r1, #40]	; 0x28
  oqp->q_wrptr   = bp;
 8001ee8:	f8c7 e044 	str.w	lr, [r7, #68]	; 0x44
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8001eec:	3230      	adds	r2, #48	; 0x30
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8001eee:	f1ac 0e30 	sub.w	lr, ip, #48	; 0x30

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001ef2:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
  tqp->next = (thread_t *)tqp;
 8001ef6:	4e4d      	ldr	r6, [pc, #308]	; (800202c <main+0x3dc>)
 8001ef8:	f8c1 e020 	str.w	lr, [r1, #32]
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8001efc:	62ca      	str	r2, [r1, #44]	; 0x2c
 8001efe:	f242 3e27 	movw	lr, #8999	; 0x2327
  ST_ENABLE_STOP();
 8001f02:	9a00      	ldr	r2, [sp, #0]
  spip->config = NULL;
 8001f04:	604d      	str	r5, [r1, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8001f06:	608d      	str	r5, [r1, #8]
 8001f08:	614d      	str	r5, [r1, #20]
  iqp->q_notify  = infy;
 8001f0a:	62bd      	str	r5, [r7, #40]	; 0x28
  iqp->q_link    = link;
 8001f0c:	62ff      	str	r7, [r7, #44]	; 0x2c
  oqp->q_link    = link;
 8001f0e:	653f      	str	r7, [r7, #80]	; 0x50
 8001f10:	6082      	str	r2, [r0, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001f12:	f8cc e028 	str.w	lr, [ip, #40]	; 0x28
 8001f16:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001f1a:	f101 0e0c 	add.w	lr, r1, #12
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001f1e:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8001f22:	f106 021c 	add.w	r2, r6, #28
 8001f26:	6338      	str	r0, [r7, #48]	; 0x30
  STM32_ST_TIM->CCMR1  = 0;
 8001f28:	f8cc 5018 	str.w	r5, [ip, #24]
  tqp->prev = (thread_t *)tqp;
 8001f2c:	6378      	str	r0, [r7, #52]	; 0x34
  STM32_ST_TIM->CCR[0] = 0;
 8001f2e:	f8cc 5034 	str.w	r5, [ip, #52]	; 0x34
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001f32:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  tqp->next = (thread_t *)tqp;
 8001f36:	f8c1 e00c 	str.w	lr, [r1, #12]
  STM32_ST_TIM->DIER   = 0;
 8001f3a:	f8cc 500c 	str.w	r5, [ip, #12]
  tqp->prev = (thread_t *)tqp;
 8001f3e:	f8c1 e010 	str.w	lr, [r1, #16]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001f42:	f06f 017f 	mvn.w	r1, #127	; 0x7f
  STM32_ST_TIM->CR2    = 0;
 8001f46:	f8cc 5004 	str.w	r5, [ip, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001f4a:	f8cc 8014 	str.w	r8, [ip, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001f4e:	f8cc 8000 	str.w	r8, [ip]
 8001f52:	f889 131c 	strb.w	r1, [r9, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001f56:	f8c9 0180 	str.w	r0, [r9, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001f5a:	f8c9 0000 	str.w	r0, [r9]
  chTMStartMeasurementX(&tm);
 8001f5e:	a802      	add	r0, sp, #8
  tmp->best       = (rtcnt_t)-1;
 8001f60:	9302      	str	r3, [sp, #8]
  ch.vtlist.delta = (systime_t)-1;
 8001f62:	6273      	str	r3, [r6, #36]	; 0x24
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8001f64:	61f2      	str	r2, [r6, #28]
  tmp->cumulative = (rttime_t)0;
 8001f66:	2300      	movs	r3, #0
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8001f68:	6232      	str	r2, [r6, #32]
  tqp->next = (thread_t *)tqp;
 8001f6a:	6036      	str	r6, [r6, #0]
 8001f6c:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8001f6e:	6076      	str	r6, [r6, #4]
 8001f70:	e9cd 2306 	strd	r2, r3, [sp, #24]
  tmp->worst      = (rtcnt_t)0;
 8001f74:	9503      	str	r5, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 8001f76:	9504      	str	r5, [sp, #16]
  tmp->n          = (ucnt_t)0;
 8001f78:	9505      	str	r5, [sp, #20]
  ch.rlist.prio = NOPRIO;
 8001f7a:	60b5      	str	r5, [r6, #8]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8001f7c:	6136      	str	r6, [r6, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8001f7e:	6176      	str	r6, [r6, #20]
  ch.vtlist.lasttime = (systime_t)0;
 8001f80:	62b5      	str	r5, [r6, #40]	; 0x28
  ch.dbg.isr_cnt  = (cnt_t)0;
 8001f82:	6335      	str	r5, [r6, #48]	; 0x30
  ch.dbg.lock_cnt = (cnt_t)0;
 8001f84:	6375      	str	r5, [r6, #52]	; 0x34
  ch.tm.offset = (rtcnt_t)0;
 8001f86:	67f5      	str	r5, [r6, #124]	; 0x7c
  chTMStartMeasurementX(&tm);
 8001f88:	f001 f93a 	bl	8003200 <chTMStartMeasurementX.constprop.66>
  chTMStopMeasurementX(&tm);
 8001f8c:	a802      	add	r0, sp, #8
 8001f8e:	f7fe fc07 	bl	80007a0 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
 8001f92:	4b27      	ldr	r3, [pc, #156]	; (8002030 <main+0x3e0>)
  nextmem = __heap_base__;
 8001f94:	4927      	ldr	r1, [pc, #156]	; (8002034 <main+0x3e4>)
 8001f96:	4828      	ldr	r0, [pc, #160]	; (8002038 <main+0x3e8>)
 8001f98:	6018      	str	r0, [r3, #0]
 8001f9a:	4828      	ldr	r0, [pc, #160]	; (800203c <main+0x3ec>)
 8001f9c:	6008      	str	r0, [r1, #0]
  endmem  = __heap_end__;
 8001f9e:	4a28      	ldr	r2, [pc, #160]	; (8002040 <main+0x3f0>)
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa0:	4828      	ldr	r0, [pc, #160]	; (8002044 <main+0x3f4>)
 8001fa2:	4929      	ldr	r1, [pc, #164]	; (8002048 <main+0x3f8>)
 8001fa4:	6011      	str	r1, [r2, #0]
 8001fa6:	68c2      	ldr	r2, [r0, #12]
 8001fa8:	9200      	str	r2, [sp, #0]
  ch.tm.offset = tm.last;
 8001faa:	9904      	ldr	r1, [sp, #16]
 8001fac:	67f1      	str	r1, [r6, #124]	; 0x7c
  tp->prio      = prio;
 8001fae:	2280      	movs	r2, #128	; 0x80
 8001fb0:	6432      	str	r2, [r6, #64]	; 0x40
  tp->realprio  = prio;
 8001fb2:	6772      	str	r2, [r6, #116]	; 0x74
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb4:	9900      	ldr	r1, [sp, #0]
  tp->name      = name;
 8001fb6:	4a25      	ldr	r2, [pc, #148]	; (800204c <main+0x3fc>)
 8001fb8:	6532      	str	r2, [r6, #80]	; 0x50
  reg_value  =  (reg_value                                   |
 8001fba:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8002070 <main+0x420>
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001fbe:	f886 5059 	strb.w	r5, [r6, #89]	; 0x59
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc2:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 8001fc6:	400a      	ands	r2, r1
  reg_value  =  (reg_value                                   |
 8001fc8:	ea42 0e0e 	orr.w	lr, r2, lr
  REG_INSERT(tp);
 8001fcc:	6972      	ldr	r2, [r6, #20]
 8001fce:	64f2      	str	r2, [r6, #76]	; 0x4c
  tqp->next = (thread_t *)tqp;
 8001fd0:	f103 0210 	add.w	r2, r3, #16
 8001fd4:	e04e      	b.n	8002074 <main+0x424>
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	20000ae4 	.word	0x20000ae4
 8001fec:	20000a94 	.word	0x20000a94
 8001ff0:	2a8004a0 	.word	0x2a8004a0
 8001ff4:	01555555 	.word	0x01555555
 8001ff8:	40021400 	.word	0x40021400
 8001ffc:	55555550 	.word	0x55555550
 8002000:	40012000 	.word	0x40012000
 8002004:	00022c16 	.word	0x00022c16
 8002008:	200031e4 	.word	0x200031e4
 800200c:	20000ac8 	.word	0x20000ac8
 8002010:	40000400 	.word	0x40000400
 8002014:	40010400 	.word	0x40010400
 8002018:	20000810 	.word	0x20000810
 800201c:	e0042000 	.word	0xe0042000
 8002020:	08001871 	.word	0x08001871
 8002024:	40004400 	.word	0x40004400
 8002028:	06010016 	.word	0x06010016
 800202c:	20003164 	.word	0x20003164
 8002030:	200009a0 	.word	0x200009a0
 8002034:	200009c4 	.word	0x200009c4
 8002038:	08001601 	.word	0x08001601
 800203c:	20003210 	.word	0x20003210
 8002040:	200009c0 	.word	0x200009c0
 8002044:	e000ed00 	.word	0xe000ed00
 8002048:	20020000 	.word	0x20020000
 800204c:	08004efc 	.word	0x08004efc
 8002050:	40026000 	.word	0x40026000
 8002054:	40026400 	.word	0x40026400
 8002058:	40020000 	.word	0x40020000
 800205c:	64155105 	.word	0x64155105
 8002060:	40020800 	.word	0x40020800
 8002064:	e000e100 	.word	0xe000e100
 8002068:	08004f24 	.word	0x08004f24
 800206c:	08004ecc 	.word	0x08004ecc
 8002070:	05fa0300 	.word	0x05fa0300
 8002074:	611a      	str	r2, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 8002076:	615a      	str	r2, [r3, #20]
 8002078:	6972      	ldr	r2, [r6, #20]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800207a:	49c4      	ldr	r1, [pc, #784]	; (800238c <main+0x73c>)
  tp->epending  = (eventmask_t)0;
 800207c:	66f5      	str	r5, [r6, #108]	; 0x6c
  REG_INSERT(tp);
 800207e:	f106 0c38 	add.w	ip, r6, #56	; 0x38
  tp->refs      = (trefs_t)1;
 8002082:	f886 805a 	strb.w	r8, [r6, #90]	; 0x5a
 8002086:	619d      	str	r5, [r3, #24]
  tp->mtxlist   = NULL;
 8002088:	6735      	str	r5, [r6, #112]	; 0x70
  REG_INSERT(tp);
 800208a:	64b6      	str	r6, [r6, #72]	; 0x48
 800208c:	f8c2 c010 	str.w	ip, [r2, #16]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002090:	f8c0 e00c 	str.w	lr, [r0, #12]
 8002094:	68ca      	ldr	r2, [r1, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002096:	f8df e334 	ldr.w	lr, [pc, #820]	; 80023cc <main+0x77c>
  H_NEXT(&default_heap.header) = NULL;
 800209a:	609d      	str	r5, [r3, #8]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800209c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80020a0:	60ca      	str	r2, [r1, #12]
  tqp->next = (thread_t *)tqp;
 80020a2:	f106 0264 	add.w	r2, r6, #100	; 0x64
  tlp->next = (thread_t *)tlp;
 80020a6:	f106 0160 	add.w	r1, r6, #96	; 0x60
  H_PAGES(&default_heap.header) = 0;
 80020aa:	60dd      	str	r5, [r3, #12]
 80020ac:	f8c6 c014 	str.w	ip, [r6, #20]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 80020b0:	f8c6 c018 	str.w	ip, [r6, #24]
  currp->wabase = NULL;
 80020b4:	6575      	str	r5, [r6, #84]	; 0x54
  currp->state = CH_STATE_CURRENT;
 80020b6:	f886 8058 	strb.w	r8, [r6, #88]	; 0x58
 80020ba:	6631      	str	r1, [r6, #96]	; 0x60
  tqp->next = (thread_t *)tqp;
 80020bc:	6672      	str	r2, [r6, #100]	; 0x64
  tqp->prev = (thread_t *)tqp;
 80020be:	66b2      	str	r2, [r6, #104]	; 0x68
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80020c0:	f8de 2000 	ldr.w	r2, [lr]
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80020c4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80020c6:	ea42 0208 	orr.w	r2, r2, r8
 80020ca:	f8ce 2000 	str.w	r2, [lr]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80020d2:	77c2      	strb	r2, [r0, #31]
 80020d4:	f04f 0220 	mov.w	r2, #32
 80020d8:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
 80020dc:	b90b      	cbnz	r3, 80020e2 <main+0x492>
 80020de:	6b75      	ldr	r5, [r6, #52]	; 0x34
 80020e0:	b11d      	cbz	r5, 80020ea <main+0x49a>
  __ASM volatile ("cpsid i" : : : "memory");
 80020e2:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80020e4:	4baa      	ldr	r3, [pc, #680]	; (8002390 <main+0x740>)
 80020e6:	62f3      	str	r3, [r6, #44]	; 0x2c
 80020e8:	e7fe      	b.n	80020e8 <main+0x498>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80020ea:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 80020ee:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80020f0:	2320      	movs	r3, #32
 80020f2:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80020f6:	f7ff f8eb 	bl	80012d0 <_dbg_check_lock>
  chDbgCheckClassI();
 80020fa:	f7fe fba1 	bl	8000840 <chDbgCheckClassI>
  tp->wabase = tdp->wbase;
 80020fe:	4ba5      	ldr	r3, [pc, #660]	; (8002394 <main+0x744>)
  REG_INSERT(tp);
 8002100:	f8d6 e014 	ldr.w	lr, [r6, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002104:	49a4      	ldr	r1, [pc, #656]	; (8002398 <main+0x748>)
 8002106:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
 800210a:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 800210e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  tp->state     = CH_STATE_WTSTART;
 8002112:	2202      	movs	r2, #2
 8002114:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002118:	48a0      	ldr	r0, [pc, #640]	; (800239c <main+0x74c>)
  tp->name      = name;
 800211a:	49a1      	ldr	r1, [pc, #644]	; (80023a0 <main+0x750>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800211c:	f8c3 00f4 	str.w	r0, [r3, #244]	; 0xf4
  REG_INSERT(tp);
 8002120:	f503 728c 	add.w	r2, r3, #280	; 0x118
  tp->name      = name;
 8002124:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  REG_INSERT(tp);
 8002128:	f8c3 e12c 	str.w	lr, [r3, #300]	; 0x12c
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800212c:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
  tp->prio      = prio;
 8002130:	f8c3 8120 	str.w	r8, [r3, #288]	; 0x120
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002134:	f883 5139 	strb.w	r5, [r3, #313]	; 0x139
  tp->realprio  = prio;
 8002138:	f8c3 8154 	str.w	r8, [r3, #340]	; 0x154
  tp->mtxlist   = NULL;
 800213c:	f8c3 5150 	str.w	r5, [r3, #336]	; 0x150
  tp->epending  = (eventmask_t)0;
 8002140:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
  tp->refs      = (trefs_t)1;
 8002144:	f883 813a 	strb.w	r8, [r3, #314]	; 0x13a
  REG_INSERT(tp);
 8002148:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
  tp->wabase = tdp->wbase;
 800214c:	f8c3 3134 	str.w	r3, [r3, #308]	; 0x134
  chSchWakeupS(tp, MSG_OK);
 8002150:	4610      	mov	r0, r2
  REG_INSERT(tp);
 8002152:	f8ce 2010 	str.w	r2, [lr, #16]
  tlp->next = (thread_t *)tlp;
 8002156:	f503 71a0 	add.w	r1, r3, #320	; 0x140
 800215a:	6172      	str	r2, [r6, #20]
  tqp->next = (thread_t *)tqp;
 800215c:	f503 72a2 	add.w	r2, r3, #324	; 0x144
  tlp->next = (thread_t *)tlp;
 8002160:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
  tqp->next = (thread_t *)tqp;
 8002164:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
  tqp->prev = (thread_t *)tqp;
 8002168:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  chSchWakeupS(tp, MSG_OK);
 800216c:	f001 f818 	bl	80031a0 <chSchWakeupS.constprop.70>
  _dbg_check_unlock();
 8002170:	f7ff f89e 	bl	80012b0 <_dbg_check_unlock>
 8002174:	f385 8811 	msr	BASEPRI, r5
   * Activates the serial driver 2 using the driver default configuration.
   * PA2(TX) and PA3(RX) are routed to USART2.
   */
  /* sdInit(); should be used as we see in the SerialDriver state machine
  , but it is already implicitely called in halInit();*/
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7)); // used function : USART2_TX
 8002178:	f240 3282 	movw	r2, #898	; 0x382
 800217c:	4650      	mov	r0, sl
 800217e:	2104      	movs	r1, #4
 8002180:	f7fe fa6e 	bl	8000660 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7)); // used function : USART2_RX
 8002184:	4650      	mov	r0, sl
 8002186:	f240 3282 	movw	r2, #898	; 0x382
 800218a:	2108      	movs	r1, #8
 800218c:	f7fe fa68 	bl	8000660 <_pal_lld_setgroupmode>


  palSetPadMode(GPIOC, 3, PAL_MODE_OUTPUT_PUSHPULL);
 8002190:	4642      	mov	r2, r8
 8002192:	4658      	mov	r0, fp
 8002194:	2108      	movs	r1, #8
 8002196:	f7fe fa63 	bl	8000660 <_pal_lld_setgroupmode>
 800219a:	2320      	movs	r3, #32
 800219c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80021a0:	f7ff f896 	bl	80012d0 <_dbg_check_lock>
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80021a4:	7a3b      	ldrb	r3, [r7, #8]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d10d      	bne.n	80021c6 <main+0x576>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 80021aa:	4b7e      	ldr	r3, [pc, #504]	; (80023a4 <main+0x754>)
 80021ac:	487d      	ldr	r0, [pc, #500]	; (80023a4 <main+0x754>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80021b0:	2240      	movs	r2, #64	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80021b2:	21c0      	movs	r1, #192	; 0xc0
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b8:	6403      	str	r3, [r0, #64]	; 0x40
 80021ba:	f889 1326 	strb.w	r1, [r9, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80021be:	f8c9 2184 	str.w	r2, [r9, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80021c2:	f8c9 2004 	str.w	r2, [r9, #4]
  USART_TypeDef *u = sdp->usart;
 80021c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80021ca:	4a77      	ldr	r2, [pc, #476]	; (80023a8 <main+0x758>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	f000 8185 	beq.w	80024dc <main+0x88c>
 80021d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021d6:	4293      	cmp	r3, r2
 80021d8:	f000 8180 	beq.w	80024dc <main+0x88c>
    u->BRR = STM32_PCLK1 / config->speed;
 80021dc:	4a73      	ldr	r2, [pc, #460]	; (80023ac <main+0x75c>)
 80021de:	4974      	ldr	r1, [pc, #464]	; (80023b0 <main+0x760>)
 80021e0:	6810      	ldr	r0, [r2, #0]
 80021e2:	fbb1 f1f0 	udiv	r1, r1, r0
 80021e6:	6099      	str	r1, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80021e8:	8895      	ldrh	r5, [r2, #4]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80021ea:	88d0      	ldrh	r0, [r2, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80021ec:	8911      	ldrh	r1, [r2, #8]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80021ee:	f445 5604 	orr.w	r6, r5, #8448	; 0x2100
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80021f2:	f041 0201 	orr.w	r2, r1, #1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80021f6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80021fa:	b280      	uxth	r0, r0
  u->SR = 0;
 80021fc:	2100      	movs	r1, #0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80021fe:	b292      	uxth	r2, r2
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8002200:	f046 062c 	orr.w	r6, r6, #44	; 0x2c
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 8002204:	f405 55a0 	and.w	r5, r5, #5120	; 0x1400
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002208:	6118      	str	r0, [r3, #16]
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 800220a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800220e:	615a      	str	r2, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002210:	60de      	str	r6, [r3, #12]
  u->SR = 0;
 8002212:	6019      	str	r1, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8002214:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8002216:	685b      	ldr	r3, [r3, #4]
  sdp->state = SD_READY;
 8002218:	f04f 0602 	mov.w	r6, #2
    sdp->rxmask = 0x7F;
 800221c:	bf0c      	ite	eq
 800221e:	237f      	moveq	r3, #127	; 0x7f
    sdp->rxmask = 0xFF;
 8002220:	23ff      	movne	r3, #255	; 0xff
 8002222:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
 8002226:	723e      	strb	r6, [r7, #8]
  _dbg_check_unlock();
 8002228:	f7ff f842 	bl	80012b0 <_dbg_check_unlock>
 800222c:	2300      	movs	r3, #0
 800222e:	f383 8811 	msr	BASEPRI, r3
     * @api
     */
    virtual ThreadReference start(tprio_t prio) {
      void _thd_start(void *arg);

      thread_ref = chThdCreateStatic(wa, sizeof(wa), prio, _thd_start, this);
 8002232:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80023d0 <main+0x780>
 8002236:	4f5f      	ldr	r7, [pc, #380]	; (80023b4 <main+0x764>)
 8002238:	4d5f      	ldr	r5, [pc, #380]	; (80023b8 <main+0x768>)
 800223a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 80023d4 <main+0x784>
        //enable pins


        palClearPad(GPIOA, 6);
        palClearPad(GPIOA, 7);
        palClearPad(GPIOB, 1);
 800223e:	f8df b198 	ldr.w	fp, [pc, #408]	; 80023d8 <main+0x788>
 8002242:	4643      	mov	r3, r8
 8002244:	f108 0008 	add.w	r0, r8, #8
 8002248:	2281      	movs	r2, #129	; 0x81
 800224a:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 800224e:	f001 fac7 	bl	80037e0 <chThdCreateStatic.constprop.64>
 8002252:	463b      	mov	r3, r7
 8002254:	f8c8 0004 	str.w	r0, [r8, #4]
 8002258:	227e      	movs	r2, #126	; 0x7e
 800225a:	f107 0008 	add.w	r0, r7, #8
 800225e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002262:	f001 fabd 	bl	80037e0 <chThdCreateStatic.constprop.64>
 8002266:	462b      	mov	r3, r5
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	2282      	movs	r2, #130	; 0x82
 800226c:	f105 0008 	add.w	r0, r5, #8
 8002270:	f44f 7154 	mov.w	r1, #848	; 0x350
 8002274:	f001 fab4 	bl	80037e0 <chThdCreateStatic.constprop.64>
 8002278:	464b      	mov	r3, r9
 800227a:	6068      	str	r0, [r5, #4]
 800227c:	2280      	movs	r2, #128	; 0x80
 800227e:	f109 0008 	add.w	r0, r9, #8
 8002282:	f44f 7114 	mov.w	r1, #592	; 0x250
 8002286:	f001 faab 	bl	80037e0 <chThdCreateStatic.constprop.64>

        if (mode == THREEPHASE_MODE_SIN) {
 800228a:	4d4c      	ldr	r5, [pc, #304]	; (80023bc <main+0x76c>)
        palClearPad(GPIOA, 6);
 800228c:	4f4c      	ldr	r7, [pc, #304]	; (80023c0 <main+0x770>)
        if (mode == THREEPHASE_MODE_SIN) {
 800228e:	f8b5 825c 	ldrh.w	r8, [r5, #604]	; 0x25c
 8002292:	f8c9 0004 	str.w	r0, [r9, #4]
        palClearPad(GPIOA, 7);
 8002296:	f04f 0a80 	mov.w	sl, #128	; 0x80
        palClearPad(GPIOA, 6);
 800229a:	f04f 0940 	mov.w	r9, #64	; 0x40
 800229e:	f8a7 901a 	strh.w	r9, [r7, #26]
        palClearPad(GPIOA, 7);
 80022a2:	f8a7 a01a 	strh.w	sl, [r7, #26]
        palClearPad(GPIOB, 1);
 80022a6:	f8ab 601a 	strh.w	r6, [fp, #26]
        if (mode == THREEPHASE_MODE_SIN) {
 80022aa:	f1b8 0f00 	cmp.w	r8, #0
 80022ae:	f000 80d4 	beq.w	800245a <main+0x80a>
            (&PWMD8)->tim->CR1 |= STM32_TIM_CR1_CMS(2); //magic to set it in center aligned mode
            pwmEnablePeriodicNotification(&PWMD8);

        } else {
            // normal mode
            palSetPadMode(GPIOC, 6, PAL_MODE_OUTPUT_PUSHPULL);
 80022b2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80023c8 <main+0x778>
 80022b6:	4649      	mov	r1, r9
 80022b8:	4640      	mov	r0, r8
 80022ba:	2201      	movs	r2, #1
 80022bc:	f7fe f9d0 	bl	8000660 <_pal_lld_setgroupmode>
            palSetPadMode(GPIOC, 8, PAL_MODE_OUTPUT_PUSHPULL);
 80022c0:	4640      	mov	r0, r8
 80022c2:	2201      	movs	r2, #1
 80022c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022c8:	f7fe f9ca 	bl	8000660 <_pal_lld_setgroupmode>
            palSetPadMode(GPIOC, 9, PAL_MODE_OUTPUT_PUSHPULL);
 80022cc:	4640      	mov	r0, r8
 80022ce:	2201      	movs	r2, #1
 80022d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022d4:	f7fe f9c4 	bl	8000660 <_pal_lld_setgroupmode>
            palClearPad(GPIOC, 6);
            palClearPad(GPIOC, 8);
 80022d8:	f44f 7280 	mov.w	r2, #256	; 0x100
            palClearPad(GPIOC, 9);
 80022dc:	f44f 7000 	mov.w	r0, #512	; 0x200
            palClearPad(GPIOC, 6);
 80022e0:	f8a8 901a 	strh.w	r9, [r8, #26]

            palSetPadMode(GPIOA, 6, PAL_MODE_ALTERNATE(2));
 80022e4:	4649      	mov	r1, r9
            palClearPad(GPIOC, 8);
 80022e6:	f8a8 201a 	strh.w	r2, [r8, #26]
            palClearPad(GPIOC, 9);
 80022ea:	f8a8 001a 	strh.w	r0, [r8, #26]
            palSetPadMode(GPIOA, 6, PAL_MODE_ALTERNATE(2));
 80022ee:	f44f 7281 	mov.w	r2, #258	; 0x102
 80022f2:	4638      	mov	r0, r7
 80022f4:	f7fe f9b4 	bl	8000660 <_pal_lld_setgroupmode>
            palSetPadMode(GPIOA, 7, PAL_MODE_ALTERNATE(2));
 80022f8:	4651      	mov	r1, sl
 80022fa:	4638      	mov	r0, r7
 80022fc:	f44f 7281 	mov.w	r2, #258	; 0x102
 8002300:	f7fe f9ae 	bl	8000660 <_pal_lld_setgroupmode>
            palSetPadMode(GPIOB, 1, PAL_MODE_ALTERNATE(2));
 8002304:	4658      	mov	r0, fp
 8002306:	f44f 7281 	mov.w	r2, #258	; 0x102
 800230a:	4631      	mov	r1, r6
 800230c:	f7fe f9a8 	bl	8000660 <_pal_lld_setgroupmode>
 8002310:	2720      	movs	r7, #32
 8002312:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock();
 8002316:	f7fe ffdb 	bl	80012d0 <_dbg_check_lock>
  pwm_lld_start(pwmp);
 800231a:	482a      	ldr	r0, [pc, #168]	; (80023c4 <main+0x774>)
  pwmp->period = config->period;
 800231c:	f8d5 3de4 	ldr.w	r3, [r5, #3556]	; 0xde4
 8002320:	6083      	str	r3, [r0, #8]
  pwmp->config = config;
 8002322:	f505 625e 	add.w	r2, r5, #3552	; 0xde0
 8002326:	6042      	str	r2, [r0, #4]
  pwm_lld_start(pwmp);
 8002328:	f7fe f8ca 	bl	80004c0 <pwm_lld_start>
  pwmp->enabled = 0;
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <main+0x774>)
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
  pwmp->state = PWM_READY;
 8002332:	701e      	strb	r6, [r3, #0]
  _dbg_check_unlock();
 8002334:	f7fe ffbc 	bl	80012b0 <_dbg_check_unlock>
 8002338:	2300      	movs	r3, #0
 800233a:	f383 8811 	msr	BASEPRI, r3

            pwmStart(&PWMD3, &(this->pwmcfgSimple));
            pwmEnablePeriodicNotification(&PWMD3);
 800233e:	4821      	ldr	r0, [pc, #132]	; (80023c4 <main+0x774>)
 8002340:	f7fe ffd6 	bl	80012f0 <pwmEnablePeriodicNotification>
 8002344:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock();
 8002348:	f7fe ffc2 	bl	80012d0 <_dbg_check_lock>
  uint32_t dier = pwmp->tim->DIER;
 800234c:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <main+0x774>)
 800234e:	699a      	ldr	r2, [r3, #24]
 8002350:	68d3      	ldr	r3, [r2, #12]
  if ((dier & (2 << channel)) == 0) {
 8002352:	0718      	lsls	r0, r3, #28
 8002354:	d405      	bmi.n	8002362 <main+0x712>
    pwmp->tim->DIER = dier | (2 << channel);
 8002356:	f043 0308 	orr.w	r3, r3, #8
    pwmp->tim->SR   = ~(2 << channel);
 800235a:	f06f 0108 	mvn.w	r1, #8
    pwmp->tim->DIER = dier | (2 << channel);
 800235e:	60d3      	str	r3, [r2, #12]
    pwmp->tim->SR   = ~(2 << channel);
 8002360:	6111      	str	r1, [r2, #16]
  _dbg_check_unlock();
 8002362:	f7fe ffa5 	bl	80012b0 <_dbg_check_unlock>
 8002366:	2300      	movs	r3, #0
 8002368:	f383 8811 	msr	BASEPRI, r3
            pwmEnableChannelNotification(&PWMD3, 2); //callback on channel 3
        }


        //pwmEnableChannelNotification(&PWMD8, 0);
        this->enableOutput();
 800236c:	f001 f9b0 	bl	80036d0 <_ZN16ThreePhaseDriver12enableOutputEv.constprop.5>
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <main+0x76c>)
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!palReadPad(GPIOC, GPIOC_BUTTON)) {
 8002372:	4e15      	ldr	r6, [pc, #84]	; (80023c8 <main+0x778>)
      //sdWrite(&SD2, (uint8_t *) data, strlen(data)); // Writes "Hello World in the UART output
      //test_execute((BaseSequentialStream *)&SD2);
        //palTogglePad(GPIOC, 3);
      //palSetPad(GPIOC, 3);
      palSetPad(GPIOA, GPIOA_LED_GREEN);
 8002374:	4f12      	ldr	r7, [pc, #72]	; (80023c0 <main+0x770>)
  palClearPad(GPIOB, 1);
 8002376:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80023d8 <main+0x788>
 800237a:	f103 0008 	add.w	r0, r3, #8
 800237e:	2280      	movs	r2, #128	; 0x80
 8002380:	f44f 7114 	mov.w	r1, #592	; 0x250
 8002384:	f001 fa2c 	bl	80037e0 <chThdCreateStatic.constprop.64>
 8002388:	6068      	str	r0, [r5, #4]
 800238a:	e02b      	b.n	80023e4 <main+0x794>
 800238c:	e000edf0 	.word	0xe000edf0
 8002390:	08004f14 	.word	0x08004f14
 8002394:	20000840 	.word	0x20000840
 8002398:	08000301 	.word	0x08000301
 800239c:	08000491 	.word	0x08000491
 80023a0:	08004f1c 	.word	0x08004f1c
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40011000 	.word	0x40011000
 80023ac:	20000800 	.word	0x20000800
 80023b0:	02aea540 	.word	0x02aea540
 80023b4:	20001bf8 	.word	0x20001bf8
 80023b8:	20001dd8 	.word	0x20001dd8
 80023bc:	20000de0 	.word	0x20000de0
 80023c0:	40020000 	.word	0x40020000
 80023c4:	200031e4 	.word	0x200031e4
 80023c8:	40020800 	.word	0x40020800
 80023cc:	e0001000 	.word	0xe0001000
 80023d0:	20002170 	.word	0x20002170
 80023d4:	20000b80 	.word	0x20000b80
 80023d8:	40020400 	.word	0x40020400

      }

    }

    chThdSleepMilliseconds(500);
 80023dc:	f241 3088 	movw	r0, #5000	; 0x1388
 80023e0:	f7ff f986 	bl	80016f0 <chThdSleep>
    if (!palReadPad(GPIOC, GPIOC_BUTTON)) {
 80023e4:	6933      	ldr	r3, [r6, #16]
 80023e6:	0499      	lsls	r1, r3, #18
 80023e8:	d4f8      	bmi.n	80023dc <main+0x78c>
      palSetPad(GPIOA, GPIOA_LED_GREEN);
 80023ea:	2320      	movs	r3, #32
 80023ec:	833b      	strh	r3, [r7, #24]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023ee:	f3ef 8511 	mrs	r5, BASEPRI
  if (port_irq_enabled(sts)) {
 80023f2:	b90d      	cbnz	r5, 80023f8 <main+0x7a8>
 80023f4:	f7ff f9bc 	bl	8001770 <chSysGetStatusAndLockX.part.1>
  pwmDisableChannelI(&PWMD8, 0);
 80023f8:	68e3      	ldr	r3, [r4, #12]
 80023fa:	483c      	ldr	r0, [pc, #240]	; (80024ec <main+0x89c>)
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	2100      	movs	r1, #0
 8002402:	60e3      	str	r3, [r4, #12]
 8002404:	f7fe f84c 	bl	80004a0 <pwm_lld_disable_channel>
  pwmDisableChannelI(&PWMD8, 2);
 8002408:	68e3      	ldr	r3, [r4, #12]
 800240a:	4838      	ldr	r0, [pc, #224]	; (80024ec <main+0x89c>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	2102      	movs	r1, #2
 8002412:	60e3      	str	r3, [r4, #12]
 8002414:	f7fe f844 	bl	80004a0 <pwm_lld_disable_channel>
  pwmDisableChannelI(&PWMD8, 3);
 8002418:	68e3      	ldr	r3, [r4, #12]
 800241a:	4834      	ldr	r0, [pc, #208]	; (80024ec <main+0x89c>)
 800241c:	f023 0308 	bic.w	r3, r3, #8
 8002420:	2103      	movs	r1, #3
 8002422:	60e3      	str	r3, [r4, #12]
 8002424:	f7fe f83c 	bl	80004a0 <pwm_lld_disable_channel>
  palClearPad(GPIOA, 7);
 8002428:	2280      	movs	r2, #128	; 0x80
  palClearPad(GPIOB, 1);
 800242a:	2302      	movs	r3, #2
  palClearPad(GPIOA, 6);
 800242c:	2140      	movs	r1, #64	; 0x40
 800242e:	8379      	strh	r1, [r7, #26]
  chSysRestoreStatusX(sts);
 8002430:	4628      	mov	r0, r5
  palClearPad(GPIOA, 7);
 8002432:	837a      	strh	r2, [r7, #26]
  palClearPad(GPIOB, 1);
 8002434:	f8a8 301a 	strh.w	r3, [r8, #26]
  chSysRestoreStatusX(sts);
 8002438:	f7ff f9aa 	bl	8001790 <chSysRestoreStatusX>
          if (palReadPad(GPIOC, GPIOC_BUTTON)) {
 800243c:	6933      	ldr	r3, [r6, #16]
 800243e:	049a      	lsls	r2, r3, #18
 8002440:	d406      	bmi.n	8002450 <main+0x800>
          chThdSleepMilliseconds(300);
 8002442:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002446:	f7ff f953 	bl	80016f0 <chThdSleep>
          if (palReadPad(GPIOC, GPIOC_BUTTON)) {
 800244a:	6933      	ldr	r3, [r6, #16]
 800244c:	049b      	lsls	r3, r3, #18
 800244e:	d5f8      	bpl.n	8002442 <main+0x7f2>
            threePhaseDriver.enableOutput();
 8002450:	f001 f93e 	bl	80036d0 <_ZN16ThreePhaseDriver12enableOutputEv.constprop.5>
            palSetPad(GPIOA, GPIOA_LED_GREEN);
 8002454:	2320      	movs	r3, #32
 8002456:	833b      	strh	r3, [r7, #24]
 8002458:	e7c0      	b.n	80023dc <main+0x78c>
            palSetPadMode(GPIOA, 6, PAL_MODE_OUTPUT_PUSHPULL);
 800245a:	4649      	mov	r1, r9
 800245c:	4638      	mov	r0, r7
 800245e:	2201      	movs	r2, #1
 8002460:	f7fe f8fe 	bl	8000660 <_pal_lld_setgroupmode>
            palSetPadMode(GPIOA, 7, PAL_MODE_OUTPUT_PUSHPULL);
 8002464:	4651      	mov	r1, sl
 8002466:	4638      	mov	r0, r7
 8002468:	2201      	movs	r2, #1
 800246a:	f7fe f8f9 	bl	8000660 <_pal_lld_setgroupmode>
            palSetPadMode(GPIOB, 1, PAL_MODE_OUTPUT_PUSHPULL);
 800246e:	4658      	mov	r0, fp
 8002470:	4631      	mov	r1, r6
 8002472:	2201      	movs	r2, #1
 8002474:	f7fe f8f4 	bl	8000660 <_pal_lld_setgroupmode>
            palSetPadMode(GPIOC, 6, PAL_MODE_ALTERNATE(3));
 8002478:	4649      	mov	r1, r9
 800247a:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800247e:	481c      	ldr	r0, [pc, #112]	; (80024f0 <main+0x8a0>)
 8002480:	f7fe f8ee 	bl	8000660 <_pal_lld_setgroupmode>
            palSetPadMode(GPIOC, 8, PAL_MODE_ALTERNATE(3));
 8002484:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8002488:	f44f 7180 	mov.w	r1, #256	; 0x100
 800248c:	4818      	ldr	r0, [pc, #96]	; (80024f0 <main+0x8a0>)
 800248e:	f7fe f8e7 	bl	8000660 <_pal_lld_setgroupmode>
            palSetPadMode(GPIOC, 9, PAL_MODE_ALTERNATE(3));
 8002492:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8002496:	f44f 7100 	mov.w	r1, #512	; 0x200
 800249a:	4815      	ldr	r0, [pc, #84]	; (80024f0 <main+0x8a0>)
 800249c:	f7fe f8e0 	bl	8000660 <_pal_lld_setgroupmode>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80024a0:	2320      	movs	r3, #32
 80024a2:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80024a6:	f7fe ff13 	bl	80012d0 <_dbg_check_lock>
  pwmp->config = config;
 80024aa:	f605 52a8 	addw	r2, r5, #3496	; 0xda8
  pwmp->period = config->period;
 80024ae:	f8d5 3dac 	ldr.w	r3, [r5, #3500]	; 0xdac
  pwm_lld_start(pwmp);
 80024b2:	480e      	ldr	r0, [pc, #56]	; (80024ec <main+0x89c>)
  pwmp->config = config;
 80024b4:	6062      	str	r2, [r4, #4]
  pwmp->period = config->period;
 80024b6:	60a3      	str	r3, [r4, #8]
  pwm_lld_start(pwmp);
 80024b8:	f7fe f802 	bl	80004c0 <pwm_lld_start>
  pwmp->enabled = 0;
 80024bc:	f8c4 800c 	str.w	r8, [r4, #12]
  pwmp->state = PWM_READY;
 80024c0:	7026      	strb	r6, [r4, #0]
  _dbg_check_unlock();
 80024c2:	f7fe fef5 	bl	80012b0 <_dbg_check_unlock>
 80024c6:	f388 8811 	msr	BASEPRI, r8
            (&PWMD8)->tim->CR1 |= STM32_TIM_CR1_CMS(2); //magic to set it in center aligned mode
 80024ca:	69a2      	ldr	r2, [r4, #24]
            pwmEnablePeriodicNotification(&PWMD8);
 80024cc:	4807      	ldr	r0, [pc, #28]	; (80024ec <main+0x89c>)
            (&PWMD8)->tim->CR1 |= STM32_TIM_CR1_CMS(2); //magic to set it in center aligned mode
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	ea43 0309 	orr.w	r3, r3, r9
 80024d4:	6013      	str	r3, [r2, #0]
            pwmEnablePeriodicNotification(&PWMD8);
 80024d6:	f7fe ff0b 	bl	80012f0 <pwmEnablePeriodicNotification>
 80024da:	e747      	b.n	800236c <main+0x71c>
    u->BRR = STM32_PCLK2 / config->speed;
 80024dc:	4a05      	ldr	r2, [pc, #20]	; (80024f4 <main+0x8a4>)
 80024de:	4906      	ldr	r1, [pc, #24]	; (80024f8 <main+0x8a8>)
 80024e0:	6810      	ldr	r0, [r2, #0]
 80024e2:	fbb1 f1f0 	udiv	r1, r1, r0
 80024e6:	6099      	str	r1, [r3, #8]
 80024e8:	e67e      	b.n	80021e8 <main+0x598>
 80024ea:	bf00      	nop
 80024ec:	20000ac8 	.word	0x20000ac8
 80024f0:	40020800 	.word	0x40020800
 80024f4:	20000800 	.word	0x20000800
 80024f8:	055d4a80 	.word	0x055d4a80
 80024fc:	00000000 	.word	0x00000000

08002500 <_ZN10CommandsTh4mainEv>:


/*
 * Command thread, waits for commands from the serial connection, then does stuff with that information
 */
void CommandsTh::main(void) {
 8002500:	b580      	push	{r7, lr}
  static union {
    float32_t f;
    uint32_t m;
  } value;
  while (true) {
      sdRead(&SD2, &c, 1); //waits FOREVER, or until something comes along
 8002502:	4c19      	ldr	r4, [pc, #100]	; (8002568 <_ZN10CommandsTh4mainEv+0x68>)
              value.m |= ((current[3] & 0xFF) <<24);
              controllerTh.setCurrent(value.f);
              chprintf((BaseSequentialStream *)&SD2, "ievent!\r\n");
          } // else, something is wrong
          else {
              chprintf((BaseSequentialStream *)&SD2, "ifail!\r\n");
 8002504:	4e19      	ldr	r6, [pc, #100]	; (800256c <_ZN10CommandsTh4mainEv+0x6c>)
void CommandsTh::main(void) {
 8002506:	b082      	sub	sp, #8
 8002508:	4682      	mov	sl, r0
              chprintf((BaseSequentialStream *)&SD2, "ifail!\r\n");
 800250a:	f1a4 050c 	sub.w	r5, r4, #12
      sdRead(&SD2, &c, 1); //waits FOREVER, or until something comes along
 800250e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002512:	2201      	movs	r2, #1
 8002514:	f10d 0103 	add.w	r1, sp, #3
 8002518:	4620      	mov	r0, r4
 800251a:	f7fe ffb9 	bl	8001490 <iqReadTimeout>
      if (c == 'c') {
 800251e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002522:	2b63      	cmp	r3, #99	; 0x63
 8002524:	d1f3      	bne.n	800250e <_ZN10CommandsTh4mainEv+0xe>
          if (sdReadTimeout(&SD2, current, 4, MS2ST(10)) == 4) {
 8002526:	2204      	movs	r2, #4
 8002528:	eb0d 0102 	add.w	r1, sp, r2
 800252c:	2364      	movs	r3, #100	; 0x64
 800252e:	4620      	mov	r0, r4
 8002530:	f7fe ffae 	bl	8001490 <iqReadTimeout>
 8002534:	2804      	cmp	r0, #4
              chprintf((BaseSequentialStream *)&SD2, "ifail!\r\n");
 8002536:	4631      	mov	r1, r6
 8002538:	4628      	mov	r0, r5
          if (sdReadTimeout(&SD2, current, 4, MS2ST(10)) == 4) {
 800253a:	d002      	beq.n	8002542 <_ZN10CommandsTh4mainEv+0x42>
              chprintf((BaseSequentialStream *)&SD2, "ifail!\r\n");
 800253c:	f000 fee0 	bl	8003300 <chprintf.constprop.23>
 8002540:	e7e5      	b.n	800250e <_ZN10CommandsTh4mainEv+0xe>
              controllerTh.setCurrent(value.f);
 8002542:	f8da 8258 	ldr.w	r8, [sl, #600]	; 0x258
 8002546:	f8dd 9004 	ldr.w	r9, [sp, #4]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800254a:	f3ef 8711 	mrs	r7, BASEPRI
 800254e:	b90f      	cbnz	r7, 8002554 <_ZN10CommandsTh4mainEv+0x54>
 8002550:	f7ff f90e 	bl	8001770 <chSysGetStatusAndLockX.part.1>

}
void ControllerTh::setCurrent(float32_t cur) {
  syssts_t sts = chSysGetStatusAndLockX(); // could be called from anywhere, lock while we're writing the data
  currentSetPoint = cur;
  chSysRestoreStatusX(sts);
 8002554:	4638      	mov	r0, r7
  currentSetPoint = cur;
 8002556:	f8c8 9384 	str.w	r9, [r8, #900]	; 0x384
  chSysRestoreStatusX(sts);
 800255a:	f7ff f919 	bl	8001790 <chSysRestoreStatusX>
              chprintf((BaseSequentialStream *)&SD2, "ievent!\r\n");
 800255e:	4904      	ldr	r1, [pc, #16]	; (8002570 <_ZN10CommandsTh4mainEv+0x70>)
 8002560:	4628      	mov	r0, r5
 8002562:	f000 fecd 	bl	8003300 <chprintf.constprop.23>
 8002566:	e7d2      	b.n	800250e <_ZN10CommandsTh4mainEv+0xe>
 8002568:	20000af0 	.word	0x20000af0
 800256c:	08004f50 	.word	0x08004f50
 8002570:	08004f44 	.word	0x08004f44
	...

08002580 <_ZN10chibios_rt16BaseStaticThreadILi1024EE5startEm>:
    virtual ThreadReference start(tprio_t prio) {
 8002580:	b538      	push	{r3, r4, r5, lr}
 8002582:	4604      	mov	r4, r0
 8002584:	460d      	mov	r5, r1
      thread_ref = chThdCreateStatic(wa, sizeof(wa), prio, _thd_start, this);
 8002586:	460b      	mov	r3, r1
 8002588:	f101 0008 	add.w	r0, r1, #8
 800258c:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 8002590:	f001 f926 	bl	80037e0 <chThdCreateStatic.constprop.64>
  class ThreadReference {
 8002594:	4a03      	ldr	r2, [pc, #12]	; (80025a4 <_ZN10chibios_rt16BaseStaticThreadILi1024EE5startEm+0x24>)
      thread_ref = chThdCreateStatic(wa, sizeof(wa), prio, _thd_start, this);
 8002596:	6068      	str	r0, [r5, #4]
 8002598:	4603      	mov	r3, r0
  class ThreadReference {
 800259a:	e884 000c 	stmia.w	r4, {r2, r3}
      return *this;
    }
 800259e:	4620      	mov	r0, r4
 80025a0:	bd38      	pop	{r3, r4, r5, pc}
 80025a2:	bf00      	nop
 80025a4:	0800501c 	.word	0x0800501c
	...

080025b0 <_ZN10chibios_rt16BaseStaticThreadILi256EE5startEm>:
    virtual ThreadReference start(tprio_t prio) {
 80025b0:	b538      	push	{r3, r4, r5, lr}
 80025b2:	4604      	mov	r4, r0
 80025b4:	460d      	mov	r5, r1
      thread_ref = chThdCreateStatic(wa, sizeof(wa), prio, _thd_start, this);
 80025b6:	460b      	mov	r3, r1
 80025b8:	f101 0008 	add.w	r0, r1, #8
 80025bc:	f44f 7114 	mov.w	r1, #592	; 0x250
 80025c0:	f001 f90e 	bl	80037e0 <chThdCreateStatic.constprop.64>
  class ThreadReference {
 80025c4:	4a03      	ldr	r2, [pc, #12]	; (80025d4 <_ZN10chibios_rt16BaseStaticThreadILi256EE5startEm+0x24>)
      thread_ref = chThdCreateStatic(wa, sizeof(wa), prio, _thd_start, this);
 80025c6:	6068      	str	r0, [r5, #4]
 80025c8:	4603      	mov	r3, r0
  class ThreadReference {
 80025ca:	e884 000c 	stmia.w	r4, {r2, r3}
    }
 80025ce:	4620      	mov	r0, r4
 80025d0:	bd38      	pop	{r3, r4, r5, pc}
 80025d2:	bf00      	nop
 80025d4:	0800501c 	.word	0x0800501c
	...

080025e0 <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18>:
    }

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
 80025e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		     _RandomAccessIterator __last,
		     _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 80025e4:	1a0b      	subs	r3, r1, r0
 80025e6:	2b21      	cmp	r3, #33	; 0x21
 80025e8:	dd74      	ble.n	80026d4 <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0xf4>
 80025ea:	4606      	mov	r6, r0
 80025ec:	4691      	mov	r9, r2
	{
	  if (__depth_limit == 0)
 80025ee:	2a00      	cmp	r2, #0
 80025f0:	d074      	beq.n	80026dc <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0xfc>
 80025f2:	f100 0802 	add.w	r8, r0, #2
 80025f6:	1d07      	adds	r7, r0, #4
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 80025f8:	109b      	asrs	r3, r3, #2
 80025fa:	8870      	ldrh	r0, [r6, #2]
 80025fc:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
 8002600:	f831 4c02 	ldrh.w	r4, [r1, #-2]
      if (__comp(__a, __b))
 8002604:	4290      	cmp	r0, r2
	    {
	      std::__partial_sort(__first, __last, __last, __comp);
	      return;
	    }
	  --__depth_limit;
 8002606:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
      if (__comp(__a, __b))
 800260a:	da4d      	bge.n	80026a8 <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0xc8>
	  if (__comp(__b, __c))
 800260c:	42a2      	cmp	r2, r4
 800260e:	db4f      	blt.n	80026b0 <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0xd0>
	  else if (__comp(__a, __c))
 8002610:	42a0      	cmp	r0, r4
 8002612:	da57      	bge.n	80026c4 <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0xe4>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002614:	8832      	ldrh	r2, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
 8002616:	8034      	strh	r4, [r6, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002618:	f821 2c02 	strh.w	r2, [r1, #-2]
 800261c:	f8b6 e002 	ldrh.w	lr, [r6, #2]
 8002620:	8830      	ldrh	r0, [r6, #0]
 8002622:	4644      	mov	r4, r8
 8002624:	46bc      	mov	ip, r7
	  if (__depth_limit == 0)
 8002626:	460b      	mov	r3, r1
	  while (__comp(__first, __pivot))
 8002628:	4586      	cmp	lr, r0
 800262a:	4625      	mov	r5, r4
 800262c:	db0f      	blt.n	800264e <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0x6e>
	  while (__comp(__pivot, __last))
 800262e:	4290      	cmp	r0, r2
	  --__last;
 8002630:	f1a3 0302 	sub.w	r3, r3, #2
	  while (__comp(__pivot, __last))
 8002634:	da03      	bge.n	800263e <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0x5e>
 8002636:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 800263a:	4290      	cmp	r0, r2
 800263c:	dbfb      	blt.n	8002636 <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0x56>
	  if (!(__first < __last))
 800263e:	429c      	cmp	r4, r3
 8002640:	d209      	bcs.n	8002656 <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0x76>
      __a = _GLIBCXX_MOVE(__b);
 8002642:	8022      	strh	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002644:	f8a3 e000 	strh.w	lr, [r3]
 8002648:	8830      	ldrh	r0, [r6, #0]
 800264a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800264e:	f83c eb02 	ldrh.w	lr, [ip], #2
 8002652:	3402      	adds	r4, #2
 8002654:	e7e8      	b.n	8002628 <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0x48>
	  _RandomAccessIterator __cut =
	    std::__unguarded_partition_pivot(__first, __last, __comp);
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8002656:	464a      	mov	r2, r9
 8002658:	4620      	mov	r0, r4
 800265a:	f7ff ffc1 	bl	80025e0 <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18>
      while (__last - __first > int(_S_threshold))
 800265e:	1ba3      	subs	r3, r4, r6
 8002660:	2b21      	cmp	r3, #33	; 0x21
 8002662:	dd39      	ble.n	80026d8 <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0xf8>
 8002664:	4621      	mov	r1, r4
	  if (__depth_limit == 0)
 8002666:	f1b9 0f00 	cmp.w	r9, #0
 800266a:	d1c5      	bne.n	80025f8 <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0x18>
	  _DistanceType;

      if (__last - __first < 2)
	return;

      const _DistanceType __len = __last - __first;
 800266c:	105c      	asrs	r4, r3, #1
      _DistanceType __parent = (__len - 2) / 2;
 800266e:	1ea7      	subs	r7, r4, #2
 8002670:	107f      	asrs	r7, r7, #1
 8002672:	eb06 0847 	add.w	r8, r6, r7, lsl #1
 8002676:	e000      	b.n	800267a <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0x9a>
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
			     __comp);
	  if (__parent == 0)
	    return;
	  __parent--;
 8002678:	3f01      	subs	r7, #1
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800267a:	f838 3902 	ldrh.w	r3, [r8], #-2
 800267e:	4622      	mov	r2, r4
 8002680:	4639      	mov	r1, r7
 8002682:	4630      	mov	r0, r6
 8002684:	f001 f84c 	bl	8003720 <_ZSt13__adjust_heapIPtitN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.constprop.0>
	  if (__parent == 0)
 8002688:	2f00      	cmp	r7, #0
 800268a:	d1f5      	bne.n	8002678 <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0x98>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800268c:	f835 3d02 	ldrh.w	r3, [r5, #-2]!
      *__result = _GLIBCXX_MOVE(*__first);
 8002690:	8832      	ldrh	r2, [r6, #0]
 8002692:	802a      	strh	r2, [r5, #0]
			 _DistanceType(__last - __first),
 8002694:	1bac      	subs	r4, r5, r6
      std::__adjust_heap(__first, _DistanceType(0),
 8002696:	1062      	asrs	r2, r4, #1
 8002698:	2100      	movs	r1, #0
 800269a:	4630      	mov	r0, r6
 800269c:	f001 f840 	bl	8003720 <_ZSt13__adjust_heapIPtitN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.constprop.0>
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare __comp)
    {
      while (__last - __first > 1)
 80026a0:	2c03      	cmp	r4, #3
 80026a2:	dcf3      	bgt.n	800268c <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0xac>
 80026a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      else if (__comp(__a, __c))
 80026a8:	42a0      	cmp	r0, r4
 80026aa:	db0b      	blt.n	80026c4 <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0xe4>
      else if (__comp(__b, __c))
 80026ac:	42a2      	cmp	r2, r4
 80026ae:	dbb1      	blt.n	8002614 <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0x34>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80026b0:	8830      	ldrh	r0, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
 80026b2:	8032      	strh	r2, [r6, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80026b4:	f826 0013 	strh.w	r0, [r6, r3, lsl #1]
 80026b8:	f8b6 e002 	ldrh.w	lr, [r6, #2]
 80026bc:	8830      	ldrh	r0, [r6, #0]
 80026be:	f831 2c02 	ldrh.w	r2, [r1, #-2]
 80026c2:	e7ae      	b.n	8002622 <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0x42>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80026c4:	f8b6 e000 	ldrh.w	lr, [r6]
      __b = _GLIBCXX_MOVE(__tmp);
 80026c8:	f8a6 e002 	strh.w	lr, [r6, #2]
      __a = _GLIBCXX_MOVE(__b);
 80026cc:	8030      	strh	r0, [r6, #0]
 80026ce:	f831 2c02 	ldrh.w	r2, [r1, #-2]
 80026d2:	e7a6      	b.n	8002622 <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0x42>
 80026d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	  if (__depth_limit == 0)
 80026dc:	460d      	mov	r5, r1
 80026de:	e7c5      	b.n	800266c <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18+0x8c>

080026e0 <_ZSt16__insertion_sortIPtN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_.isra.9>:
      if (__first == __last) return;
 80026e0:	4288      	cmp	r0, r1
 80026e2:	d037      	beq.n	8002754 <_ZSt16__insertion_sortIPtN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_.isra.9+0x74>
    __insertion_sort(_RandomAccessIterator __first,
 80026e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80026e8:	1c86      	adds	r6, r0, #2
 80026ea:	42b1      	cmp	r1, r6
 80026ec:	d021      	beq.n	8002732 <_ZSt16__insertion_sortIPtN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_.isra.9+0x52>
 80026ee:	468a      	mov	sl, r1
 80026f0:	4681      	mov	r9, r0
 80026f2:	4607      	mov	r7, r0
 80026f4:	f04f 0802 	mov.w	r8, #2
 80026f8:	4631      	mov	r1, r6
  {
    template<typename _Iterator1, typename _Iterator2>
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
 80026fa:	f8b9 3000 	ldrh.w	r3, [r9]
 80026fe:	f836 5b02 	ldrh.w	r5, [r6], #2
	  if (__comp(__i, __first))
 8002702:	429d      	cmp	r5, r3
 8002704:	db17      	blt.n	8002736 <_ZSt16__insertion_sortIPtN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_.isra.9+0x56>
 8002706:	883b      	ldrh	r3, [r7, #0]
      while (__comp(__val, __next))
 8002708:	429d      	cmp	r5, r3
      --__next;
 800270a:	463a      	mov	r2, r7
      while (__comp(__val, __next))
 800270c:	da20      	bge.n	8002750 <_ZSt16__insertion_sortIPtN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_.isra.9+0x70>
 800270e:	4634      	mov	r4, r6
 8002710:	e000      	b.n	8002714 <_ZSt16__insertion_sortIPtN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_.isra.9+0x34>
 8002712:	460a      	mov	r2, r1
	  *__last = _GLIBCXX_MOVE(*__next);
 8002714:	f824 3d02 	strh.w	r3, [r4, #-2]!
 8002718:	f832 3c02 	ldrh.w	r3, [r2, #-2]
      while (__comp(__val, __next))
 800271c:	429d      	cmp	r5, r3
	  --__next;
 800271e:	f1a2 0102 	sub.w	r1, r2, #2
      while (__comp(__val, __next))
 8002722:	dbf6      	blt.n	8002712 <_ZSt16__insertion_sortIPtN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_.isra.9+0x32>
      *__last = _GLIBCXX_MOVE(__val);
 8002724:	8015      	strh	r5, [r2, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8002726:	45b2      	cmp	sl, r6
 8002728:	f107 0702 	add.w	r7, r7, #2
 800272c:	f108 0802 	add.w	r8, r8, #2
 8002730:	d1e2      	bne.n	80026f8 <_ZSt16__insertion_sortIPtN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_.isra.9+0x18>
 8002732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 8002736:	ea5f 0358 	movs.w	r3, r8, lsr #1
 800273a:	d006      	beq.n	800274a <_ZSt16__insertion_sortIPtN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_.isra.9+0x6a>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800273c:	f1c8 0002 	rsb	r0, r8, #2
 8002740:	4408      	add	r0, r1
 8002742:	4642      	mov	r2, r8
 8002744:	4649      	mov	r1, r9
 8002746:	f001 fc19 	bl	8003f7c <memmove>
	      *__first = _GLIBCXX_MOVE(__val);
 800274a:	f8a9 5000 	strh.w	r5, [r9]
 800274e:	e7ea      	b.n	8002726 <_ZSt16__insertion_sortIPtN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_.isra.9+0x46>
      while (__comp(__val, __next))
 8002750:	460a      	mov	r2, r1
 8002752:	e7e7      	b.n	8002724 <_ZSt16__insertion_sortIPtN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_.isra.9+0x44>
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
	...

08002760 <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj>:
 * [1,3,6,9][1,3,4,8]        [1,1,3,3,4,6,8,9]     (3+3+4+6)/4 = 4
 * [2,4,8,9][1,3,6,9]        [1,2,3,4,6,8,9,9]     (3+4+6+8)/4 = 5.25
 *
 * NOTE: callback is in ISR context, be fast and pass on the message
 */
void ADCManager::adccb_sin(ADCDriver *adcp, adcsample_t *buffer, size_t n) {
 8002760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}


  float32_t average;


  if (state == ADC_READY) {
 8002764:	4e51      	ldr	r6, [pc, #324]	; (80028ac <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x14c>)
 8002766:	7833      	ldrb	r3, [r6, #0]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d001      	beq.n	8002770 <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x10>
 800276c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002770:	460f      	mov	r7, r1
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002772:	2320      	movs	r3, #32
 8002774:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8002778:	f7fe fbfa 	bl	8000f70 <_dbg_check_lock_from_isr>
      state = ADC_ACTIVE;
      /* Initialize input and output buffer pointers */
      // buf = block * 2 ->
      // index = 0 -> 0 + block
      // index = block -> (block + block) % block = 0
      adcindex = (adcindex + ADC_BLOCK_SIZE) % (ADC_BLOCK_SIZE * 2);
 800277c:	4a4c      	ldr	r2, [pc, #304]	; (80028b0 <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x150>)
 800277e:	4d4d      	ldr	r5, [pc, #308]	; (80028b4 <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x154>)
 8002780:	6813      	ldr	r3, [r2, #0]
      // by sorting here, we have to sort less later
      // but still wish there was a faster sort than this.. if I don't allow folks to set size with #define and stuff
      // then maybe I could use a network sort of some kind?

      // copy to the circular buffer
      std::copy(&buffer[0], &buffer[ADC_BLOCK_SIZE], samples_average_buf.begin() + adcindex);
 8002782:	4c4d      	ldr	r4, [pc, #308]	; (80028b8 <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x158>)
      adcindex = (adcindex + ADC_BLOCK_SIZE) % (ADC_BLOCK_SIZE * 2);
 8002784:	3306      	adds	r3, #6
 8002786:	fba5 1503 	umull	r1, r5, r5, r3
 800278a:	08ed      	lsrs	r5, r5, #3
 800278c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002790:	eba3 0585 	sub.w	r5, r3, r5, lsl #2
      std::sort(&buffer[0], &buffer[ADC_BLOCK_SIZE]);
 8002794:	f107 080c 	add.w	r8, r7, #12
      state = ADC_ACTIVE;
 8002798:	2003      	movs	r0, #3
      adcindex = (adcindex + ADC_BLOCK_SIZE) % (ADC_BLOCK_SIZE * 2);
 800279a:	6015      	str	r5, [r2, #0]
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
	   _Compare __comp)
    {
      if (__first != __last)
	{
	  std::__introsort_loop(__first, __last,
 800279c:	4641      	mov	r1, r8
 800279e:	2204      	movs	r2, #4
      state = ADC_ACTIVE;
 80027a0:	7030      	strb	r0, [r6, #0]
 80027a2:	4638      	mov	r0, r7
 80027a4:	f7ff ff1c 	bl	80025e0 <_ZSt16__introsort_loopIPtiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.18>
	std::__insertion_sort(__first, __last, __comp);
 80027a8:	4638      	mov	r0, r7
 80027aa:	4641      	mov	r1, r8
 80027ac:	f7ff ff98 	bl	80026e0 <_ZSt16__insertion_sortIPtN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_.isra.9>
      palClearPad(GPIOC, 3);
 80027b0:	4b42      	ldr	r3, [pc, #264]	; (80028bc <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x15c>)
 80027b2:	2208      	movs	r2, #8
 80027b4:	835a      	strh	r2, [r3, #26]
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80027b6:	4639      	mov	r1, r7
 80027b8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 80027bc:	220c      	movs	r2, #12
 80027be:	f001 fbdd 	bl	8003f7c <memmove>
 80027c2:	4b3f      	ldr	r3, [pc, #252]	; (80028c0 <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x160>)
 * we use this only on things with a fixed size, so we use std::array
 *
 * [ 5 8 12 15 | 6 7 15 17 ]
 */
void ADCManager::sortMove(const std::array<adcsample_t, ((ADC_BLOCK_SIZE) * 2)> &input, std::array<adcsample_t, ((ADC_BLOCK_SIZE) * 2)> &output) {
  size_t j = ADC_BLOCK_SIZE;
 80027c4:	2506      	movs	r5, #6
 80027c6:	f103 0718 	add.w	r7, r3, #24
  size_t i = 0;
 80027ca:	2000      	movs	r0, #0
  for (size_t l = 0; l < ((ADC_BLOCK_SIZE) * 2); l++) {
      if (input[i] < input[j]) {
 80027cc:	f834 1010 	ldrh.w	r1, [r4, r0, lsl #1]
 80027d0:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
 80027d4:	4291      	cmp	r1, r2
        output[l] = input[i];
 80027d6:	bfb4      	ite	lt
 80027d8:	8019      	strhlt	r1, [r3, #0]
        i++;
      }
      else {
        output[l] = input[j];
 80027da:	801a      	strhge	r2, [r3, #0]
 80027dc:	f103 0302 	add.w	r3, r3, #2
        i++;
 80027e0:	bfb4      	ite	lt
 80027e2:	3001      	addlt	r0, #1
        j++;
 80027e4:	3501      	addge	r5, #1
  for (size_t l = 0; l < ((ADC_BLOCK_SIZE) * 2); l++) {
 80027e6:	429f      	cmp	r7, r3
 80027e8:	d1f0      	bne.n	80027cc <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x6c>
 80027ea:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x164>)
 80027ec:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80028c8 <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x168>
 80027f0:	f103 020c 	add.w	r2, r3, #12
          average += static_cast<float32_t>(tempBuffer[i]);
 80027f4:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 80027f8:	ee07 1a90 	vmov	s15, r1
 80027fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
      for (size_t i = ((ADC_BLOCK_SIZE) / 2); i < ((ADC_BLOCK_SIZE) / 2) + (ADC_BLOCK_SIZE); i++) {
 8002800:	429a      	cmp	r2, r3
          average += static_cast<float32_t>(tempBuffer[i]);
 8002802:	ee37 7a27 	vadd.f32	s14, s14, s15
      for (size_t i = ((ADC_BLOCK_SIZE) / 2); i < ((ADC_BLOCK_SIZE) / 2) + (ADC_BLOCK_SIZE); i++) {
 8002806:	d1f5      	bne.n	80027f4 <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x94>
      average = average / (ADC_BLOCK_SIZE);
 8002808:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800280c:	eec7 7a26 	vdiv.f32	s15, s14, s13
      (*current_used_buffer)[current_used_buffer_index] = average;
 8002810:	4a2e      	ldr	r2, [pc, #184]	; (80028cc <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x16c>)
 8002812:	4d2f      	ldr	r5, [pc, #188]	; (80028d0 <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x170>)
 8002814:	6813      	ldr	r3, [r2, #0]
 8002816:	682f      	ldr	r7, [r5, #0]
 8002818:	eb07 0183 	add.w	r1, r7, r3, lsl #2
      current_used_buffer_index++;
 800281c:	3301      	adds	r3, #1
      if (current_used_buffer_index >= CURRENT_BUFFERS_SIZE) {
 800281e:	2b31      	cmp	r3, #49	; 0x31
      current_used_buffer_index++;
 8002820:	6013      	str	r3, [r2, #0]

/*
 * returns a measurement in milliamp (mA)
 */
float32_t ADCManager::measurement2MilAmp(float32_t measurement) {
  return measurement * ADC_CONV_MA;
 8002822:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80028d4 <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x174>
 8002826:	ee67 7a87 	vmul.f32	s15, s15, s14
      (*current_used_buffer)[current_used_buffer_index] = average;
 800282a:	edc1 7a00 	vstr	s15, [r1]
      if (current_used_buffer_index >= CURRENT_BUFFERS_SIZE) {
 800282e:	d808      	bhi.n	8002842 <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0xe2>
          state = ADC_READY;
 8002830:	2302      	movs	r3, #2
 8002832:	7033      	strb	r3, [r6, #0]
  _dbg_check_unlock_from_isr();
 8002834:	f7fe fb84 	bl	8000f40 <_dbg_check_unlock_from_isr>
 8002838:	2300      	movs	r3, #0
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8002842:	4c25      	ldr	r4, [pc, #148]	; (80028d8 <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x178>)
          current_used_buffer_index = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	6013      	str	r3, [r2, #0]
  chDbgCheckClassI();
 8002848:	f7fd fffa 	bl	8000840 <chDbgCheckClassI>
  if (mbp->reset) {
 800284c:	7d23      	ldrb	r3, [r4, #20]
 800284e:	b9e3      	cbnz	r3, 800288a <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x12a>
 *
 * @iclass
 */
static inline cnt_t chMBGetFreeCountI(mailbox_t *mbp) {

  chDbgCheckClassI();
 8002850:	f7fd fff6 	bl	8000840 <chDbgCheckClassI>
 8002854:	f8d4 9000 	ldr.w	r9, [r4]
 8002858:	f8d4 8004 	ldr.w	r8, [r4, #4]
  chDbgCheckClassI();
 800285c:	f7fd fff0 	bl	8000840 <chDbgCheckClassI>

  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8002860:	6923      	ldr	r3, [r4, #16]
  return (cnt_t)(mbp->top - mbp->buffer);
 8002862:	eba8 0209 	sub.w	r2, r8, r9
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8002866:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (cnt_t)0) {
 800286a:	2b00      	cmp	r3, #0
 800286c:	dd0d      	ble.n	800288a <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x12a>
    *mbp->wrptr++ = msg;
 800286e:	68a2      	ldr	r2, [r4, #8]
      mbp->wrptr = mbp->buffer;
    }
    mbp->cnt++;

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8002870:	481a      	ldr	r0, [pc, #104]	; (80028dc <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x17c>)
    *mbp->wrptr++ = msg;
 8002872:	1d13      	adds	r3, r2, #4
 8002874:	60a3      	str	r3, [r4, #8]
 8002876:	6017      	str	r7, [r2, #0]
    if (mbp->wrptr >= mbp->top) {
 8002878:	4598      	cmp	r8, r3
    mbp->cnt++;
 800287a:	6923      	ldr	r3, [r4, #16]
      mbp->wrptr = mbp->buffer;
 800287c:	bf98      	it	ls
 800287e:	f8c4 9008 	strls.w	r9, [r4, #8]
    mbp->cnt++;
 8002882:	3301      	adds	r3, #1
 8002884:	6123      	str	r3, [r4, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8002886:	f000 fcc3 	bl	8003210 <chThdDequeueNextI.constprop.63>
    chPoolLoadArray(&pool, p, n);
  }

  void *MemoryPool::allocI(void) {

    return chPoolAllocI(&pool);
 800288a:	f000 fcd1 	bl	8003230 <chPoolAllocI.constprop.53>
          current_used_buffer = (std::array<float32_t, CURRENT_BUFFERS_SIZE> *) current_free_buffers.allocI();
 800288e:	6028      	str	r0, [r5, #0]
          if (current_used_buffer != NULL) {
 8002890:	b138      	cbz	r0, 80028a2 <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x142>
              state = ADC_READY;
 8002892:	2302      	movs	r3, #2
 8002894:	7033      	strb	r3, [r6, #0]
          flagsOut |= ADC_EVT_FILLEDBLOCK;
 8002896:	2180      	movs	r1, #128	; 0x80
         chEvtBroadcastFlagsI(ADCManager::current_event_source, flagsOut);
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x180>)
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	f7fe f8e0 	bl	8000a60 <chEvtBroadcastFlagsI>
 80028a0:	e7c8      	b.n	8002834 <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0xd4>
              state = ADC_NO_BUFF;
 80028a2:	2306      	movs	r3, #6
 80028a4:	7033      	strb	r3, [r6, #0]
              flagsOut |= ADC_EVT_NOBUFFER;
 80028a6:	2188      	movs	r1, #136	; 0x88
 80028a8:	e7f6      	b.n	8002898 <_ZN10ADCManager9adccb_sinEP9ADCDriverPtj+0x138>
 80028aa:	bf00      	nop
 80028ac:	200009ec 	.word	0x200009ec
 80028b0:	200009f0 	.word	0x200009f0
 80028b4:	aaaaaaab 	.word	0xaaaaaaab
 80028b8:	200009cc 	.word	0x200009cc
 80028bc:	40020800 	.word	0x40020800
 80028c0:	200009f4 	.word	0x200009f4
 80028c4:	200009f8 	.word	0x200009f8
 80028c8:	00000000 	.word	0x00000000
 80028cc:	200009e8 	.word	0x200009e8
 80028d0:	200009c8 	.word	0x200009c8
 80028d4:	3fa5cbbb 	.word	0x3fa5cbbb
 80028d8:	20003114 	.word	0x20003114
 80028dc:	20003134 	.word	0x20003134
 80028e0:	200009e4 	.word	0x200009e4
	...

080028f0 <_ZN16currentControlTh4mainEv>:
currentControlTh::currentControlTh() : filterOutput(0.0) {
  arm_fir_decimate_init_f32(&filter, CURRENT_FIR_NUM_TAPS, ADC_FIR_DECIMATION_FACTOR, (float32_t *)&armFirCoeffFloat[0], filterState, (CURRENT_FIR_BLOCK_SIZE));
  chEvtObjectInit(&current_event_source);
}

void currentControlTh::main(void) {
 80028f0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  ADCManager::current_event_source = cth;
 80028f4:	4d4b      	ldr	r5, [pc, #300]	; (8002a24 <_ZN16currentControlTh4mainEv+0x134>)
 80028f6:	b09d      	sub	sp, #116	; 0x74
  ADCManager adc(&current_event_source);
 80028f8:	f500 63f8 	add.w	r3, r0, #1984	; 0x7c0
void currentControlTh::main(void) {
 80028fc:	9006      	str	r0, [sp, #24]
  ADCManager adc(&current_event_source);
 80028fe:	930e      	str	r3, [sp, #56]	; 0x38
 8002900:	602b      	str	r3, [r5, #0]
 8002902:	2620      	movs	r6, #32
 8002904:	f386 8811 	msr	BASEPRI, r6
  _dbg_check_lock();
 8002908:	f7fe fce2 	bl	80012d0 <_dbg_check_lock>
 */
void *chPoolAlloc(memory_pool_t *mp) {
  void *objp;

  chSysLock();
  objp = chPoolAllocI(mp);
 800290c:	f000 fc90 	bl	8003230 <chPoolAllocI.constprop.53>
 8002910:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8002912:	f7fe fccd 	bl	80012b0 <_dbg_check_unlock>
 8002916:	2300      	movs	r3, #0
 8002918:	f383 8811 	msr	BASEPRI, r3
  current_used_buffer = (std::array<float32_t, CURRENT_BUFFERS_SIZE> *) current_free_buffers.alloc();
 800291c:	4a42      	ldr	r2, [pc, #264]	; (8002a28 <_ZN16currentControlTh4mainEv+0x138>)
 800291e:	6014      	str	r4, [r2, #0]
  if (current_used_buffer != NULL) {
 8002920:	2c00      	cmp	r4, #0
 8002922:	f000 8327 	beq.w	8002f74 <_ZN16currentControlTh4mainEv+0x684>
      current_used_buffer_index = 0;
 8002926:	4a41      	ldr	r2, [pc, #260]	; (8002a2c <_ZN16currentControlTh4mainEv+0x13c>)
      state = ADC_READY;
 8002928:	4c41      	ldr	r4, [pc, #260]	; (8002a30 <_ZN16currentControlTh4mainEv+0x140>)
      current_used_buffer_index = 0;
 800292a:	6013      	str	r3, [r2, #0]
      chEvtBroadcastFlags(ADCManager::current_event_source, ADC_EVT_INIT_OK);
 800292c:	6828      	ldr	r0, [r5, #0]
      state = ADC_READY;
 800292e:	2302      	movs	r3, #2
      chEvtBroadcastFlags(ADCManager::current_event_source, ADC_EVT_INIT_OK);
 8002930:	2140      	movs	r1, #64	; 0x40
      state = ADC_READY;
 8002932:	7023      	strb	r3, [r4, #0]
      chEvtBroadcastFlags(ADCManager::current_event_source, ADC_EVT_INIT_OK);
 8002934:	f7fe feac 	bl	8001690 <chEvtBroadcastFlags>
  palSetPadMode(GPIOA, 0, PAL_MODE_INPUT_ANALOG); // set pin to be analog
 8002938:	2203      	movs	r2, #3
 800293a:	2101      	movs	r1, #1
 800293c:	483d      	ldr	r0, [pc, #244]	; (8002a34 <_ZN16currentControlTh4mainEv+0x144>)
 800293e:	f7fd fe8f 	bl	8000660 <_pal_lld_setgroupmode>
 8002942:	2320      	movs	r3, #32
 8002944:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8002948:	f7fe fcc2 	bl	80012d0 <_dbg_check_lock>
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 800294c:	493a      	ldr	r1, [pc, #232]	; (8002a38 <_ZN16currentControlTh4mainEv+0x148>)
  if (adcp->state == ADC_STOP) {
 800294e:	780b      	ldrb	r3, [r1, #0]
 8002950:	2200      	movs	r2, #0
 8002952:	2b01      	cmp	r3, #1
 8002954:	604a      	str	r2, [r1, #4]
 8002956:	f000 82af 	beq.w	8002eb8 <_ZN16currentControlTh4mainEv+0x5c8>
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
 800295a:	2302      	movs	r3, #2
 800295c:	700b      	strb	r3, [r1, #0]
  _dbg_check_unlock();
 800295e:	f7fe fca7 	bl	80012b0 <_dbg_check_unlock>
 8002962:	2300      	movs	r3, #0
 8002964:	f383 8811 	msr	BASEPRI, r3

  //chprintf(strm, "iinit\r\n");
  // register for an event
  //chEvtRegisterMaskWithFlags(&(ADCManager::current_event_source), &adc_listener, ADC_EVENT, ADC_EVT_INIT_FAIL | ADC_EVT_INIT_OK | ADC_EVT_FILLEDBLOCK);

  chEvtRegisterMaskWithFlags(&current_event_source, &adc_listener, CURRENT_EVENT, ADC_EVT_INIT_FAIL | ADC_EVT_INIT_OK | ADC_EVT_FILLEDBLOCK);
 8002968:	23e0      	movs	r3, #224	; 0xe0
 800296a:	a917      	add	r1, sp, #92	; 0x5c
 800296c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800296e:	2201      	movs	r2, #1
  data[0] = 'c';
 8002970:	2563      	movs	r5, #99	; 0x63
 8002972:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
  chEvtRegisterMaskWithFlags(&current_event_source, &adc_listener, CURRENT_EVENT, ADC_EVT_INIT_FAIL | ADC_EVT_INIT_OK | ADC_EVT_FILLEDBLOCK);
 8002976:	f7fe fe9b 	bl	80016b0 <chEvtRegisterMaskWithFlags>
  chprintf(strm, "iregistered!\r\n");
 800297a:	4930      	ldr	r1, [pc, #192]	; (8002a3c <_ZN16currentControlTh4mainEv+0x14c>)
 800297c:	4830      	ldr	r0, [pc, #192]	; (8002a40 <_ZN16currentControlTh4mainEv+0x150>)
 800297e:	f000 fcbf 	bl	8003300 <chprintf.constprop.23>

  if (ADCManager::state == 2) {
 8002982:	7823      	ldrb	r3, [r4, #0]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d103      	bne.n	8002990 <_ZN16currentControlTh4mainEv+0xa0>
      chprintf(strm, "iADC Ready!\r\n");
 8002988:	492e      	ldr	r1, [pc, #184]	; (8002a44 <_ZN16currentControlTh4mainEv+0x154>)
 800298a:	482d      	ldr	r0, [pc, #180]	; (8002a40 <_ZN16currentControlTh4mainEv+0x150>)
 800298c:	f000 fcb8 	bl	8003300 <chprintf.constprop.23>
 8002990:	9a06      	ldr	r2, [sp, #24]
 8002992:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8002a54 <_ZN16currentControlTh4mainEv+0x164>
      //chprintf(strm, "ievent!\r\n");
      if (evt & CURRENT_EVENT) {
          //chprintf(strm, "ievent!\r\n");
          flags = chEvtGetAndClearFlags(&adc_listener);
          if (flags & ADC_EVT_INIT_FAIL) {
              chprintf(strm, "iadc init fail!\r\n");
 8002996:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002a40 <_ZN16currentControlTh4mainEv+0x150>
 800299a:	f202 73bc 	addw	r3, r2, #1980	; 0x7bc
 800299e:	930a      	str	r3, [sp, #40]	; 0x28
 80029a0:	f202 73cc 	addw	r3, r2, #1996	; 0x7cc
 80029a4:	9313      	str	r3, [sp, #76]	; 0x4c
      eventmask_t evt = chEvtWaitAny(listenmask);
 80029a6:	2001      	movs	r0, #1
 80029a8:	f7fe fe52 	bl	8001650 <chEvtWaitAny>
      if (evt & CURRENT_EVENT) {
 80029ac:	07c4      	lsls	r4, r0, #31
 80029ae:	d5fa      	bpl.n	80029a6 <_ZN16currentControlTh4mainEv+0xb6>
 80029b0:	2320      	movs	r3, #32
 80029b2:	f383 8811 	msr	BASEPRI, r3
  elp->flags = (eventflags_t)0;
 80029b6:	2500      	movs	r5, #0
  _dbg_check_lock();
 80029b8:	f7fe fc8a 	bl	80012d0 <_dbg_check_lock>
  flags = elp->flags;
 80029bc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  elp->flags = (eventflags_t)0;
 80029be:	951a      	str	r5, [sp, #104]	; 0x68
  _dbg_check_unlock();
 80029c0:	f7fe fc76 	bl	80012b0 <_dbg_check_unlock>
 80029c4:	f385 8811 	msr	BASEPRI, r5
          if (flags & ADC_EVT_INIT_FAIL) {
 80029c8:	06a0      	lsls	r0, r4, #26
 80029ca:	d426      	bmi.n	8002a1a <_ZN16currentControlTh4mainEv+0x12a>
          }
          if (flags & ADC_EVT_INIT_OK) {
 80029cc:	0661      	lsls	r1, r4, #25
 80029ce:	d41f      	bmi.n	8002a10 <_ZN16currentControlTh4mainEv+0x120>
              chprintf(strm, "iadc init!\r\n");
          }
          if (flags & ADC_EVT_NOBUFFER) {
 80029d0:	0722      	lsls	r2, r4, #28
 80029d2:	d418      	bmi.n	8002a06 <_ZN16currentControlTh4mainEv+0x116>
              chprintf(strm, "ino buffer!\r\n");
          }
          if (flags & ADC_EVT_FILLEDBLOCK) {
 80029d4:	0623      	lsls	r3, r4, #24
 80029d6:	d5e6      	bpl.n	80029a6 <_ZN16currentControlTh4mainEv+0xb6>
 80029d8:	2320      	movs	r3, #32
 80029da:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80029de:	f7fe fc77 	bl	80012d0 <_dbg_check_lock>
 * @sclass
 */
msg_t chMBFetchS(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
  msg_t rdymsg;

  chDbgCheckClassS();
 80029e2:	f7fd ff05 	bl	80007f0 <chDbgCheckClassS>
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  do {
    /* If the mailbox is in reset state then returns immediately.*/
    if (mbp->reset) {
 80029e6:	f89a 4014 	ldrb.w	r4, [sl, #20]
 80029ea:	2c00      	cmp	r4, #0
 80029ec:	f040 8254 	bne.w	8002e98 <_ZN16currentControlTh4mainEv+0x5a8>
  chDbgCheckClassI();
 80029f0:	f7fd ff26 	bl	8000840 <chDbgCheckClassI>
  return mbp->cnt;
 80029f4:	f8da 3010 	ldr.w	r3, [sl, #16]
      return MSG_RESET;
    }

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (cnt_t)0) {
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	dc2d      	bgt.n	8002a58 <_ZN16currentControlTh4mainEv+0x168>
  _dbg_check_unlock();
 80029fc:	f7fe fc58 	bl	80012b0 <_dbg_check_unlock>
 8002a00:	f384 8811 	msr	BASEPRI, r4
 8002a04:	e7cf      	b.n	80029a6 <_ZN16currentControlTh4mainEv+0xb6>
              chprintf(strm, "ino buffer!\r\n");
 8002a06:	4910      	ldr	r1, [pc, #64]	; (8002a48 <_ZN16currentControlTh4mainEv+0x158>)
 8002a08:	4640      	mov	r0, r8
 8002a0a:	f000 fc79 	bl	8003300 <chprintf.constprop.23>
 8002a0e:	e7e1      	b.n	80029d4 <_ZN16currentControlTh4mainEv+0xe4>
              chprintf(strm, "iadc init!\r\n");
 8002a10:	490e      	ldr	r1, [pc, #56]	; (8002a4c <_ZN16currentControlTh4mainEv+0x15c>)
 8002a12:	4640      	mov	r0, r8
 8002a14:	f000 fc74 	bl	8003300 <chprintf.constprop.23>
 8002a18:	e7da      	b.n	80029d0 <_ZN16currentControlTh4mainEv+0xe0>
              chprintf(strm, "iadc init fail!\r\n");
 8002a1a:	490d      	ldr	r1, [pc, #52]	; (8002a50 <_ZN16currentControlTh4mainEv+0x160>)
 8002a1c:	4640      	mov	r0, r8
 8002a1e:	f000 fc6f 	bl	8003300 <chprintf.constprop.23>
 8002a22:	e7d3      	b.n	80029cc <_ZN16currentControlTh4mainEv+0xdc>
 8002a24:	200009e4 	.word	0x200009e4
 8002a28:	200009c8 	.word	0x200009c8
 8002a2c:	200009e8 	.word	0x200009e8
 8002a30:	200009ec 	.word	0x200009ec
 8002a34:	40020000 	.word	0x40020000
 8002a38:	20000a94 	.word	0x20000a94
 8002a3c:	08004f5c 	.word	0x08004f5c
 8002a40:	20000ae4 	.word	0x20000ae4
 8002a44:	08004f6c 	.word	0x08004f6c
 8002a48:	08004fa0 	.word	0x08004fa0
 8002a4c:	08004f90 	.word	0x08004f90
 8002a50:	08004f7c 	.word	0x08004f7c
 8002a54:	20003114 	.word	0x20003114
      *msgp = *mbp->rdptr++;
 8002a58:	f8da 200c 	ldr.w	r2, [sl, #12]
      if (mbp->rdptr >= mbp->top) {
 8002a5c:	f8da 1004 	ldr.w	r1, [sl, #4]
      *msgp = *mbp->rdptr++;
 8002a60:	6810      	ldr	r0, [r2, #0]
 8002a62:	9c06      	ldr	r4, [sp, #24]
 8002a64:	3204      	adds	r2, #4
      if (mbp->rdptr >= mbp->top) {
 8002a66:	428a      	cmp	r2, r1
      *msgp = *mbp->rdptr++;
 8002a68:	f8ca 200c 	str.w	r2, [sl, #12]
        mbp->rdptr = mbp->buffer;
      }
      mbp->cnt--;
 8002a6c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        mbp->rdptr = mbp->buffer;
 8002a70:	bf28      	it	cs
 8002a72:	f8da 2000 	ldrcs.w	r2, [sl]
      *msgp = *mbp->rdptr++;
 8002a76:	f8c4 0620 	str.w	r0, [r4, #1568]	; 0x620

      /* If there is a writer waiting then makes it ready.*/
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8002a7a:	48d6      	ldr	r0, [pc, #856]	; (8002dd4 <_ZN16currentControlTh4mainEv+0x4e4>)
      mbp->cnt--;
 8002a7c:	f8ca 3010 	str.w	r3, [sl, #16]
        mbp->rdptr = mbp->buffer;
 8002a80:	bf28      	it	cs
 8002a82:	f8ca 200c 	strcs.w	r2, [sl, #12]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8002a86:	f000 fbc3 	bl	8003210 <chThdDequeueNextI.constprop.63>
      chSchRescheduleS();
 8002a8a:	f7fd ff11 	bl	80008b0 <chSchRescheduleS>
 8002a8e:	f7fe fc0f 	bl	80012b0 <_dbg_check_unlock>
 8002a92:	2300      	movs	r3, #0
 8002a94:	f383 8811 	msr	BASEPRI, r3
 8002a98:	2320      	movs	r3, #32
 8002a9a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8002a9e:	f7fe fc17 	bl	80012d0 <_dbg_check_lock>
  float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
  float32_t *pStateCurnt;                        /* Points to the current sample of the state */
  float32_t *px, *pb;                            /* Temporary pointers for state and coefficient buffers */
  float32_t sum0;                                /* Accumulator */
  float32_t x0, c0;                              /* Temporary variables to hold state and coefficient values */
  uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8002aa2:	9a06      	ldr	r2, [sp, #24]
 8002aa4:	f8b2 3626 	ldrh.w	r3, [r2, #1574]	; 0x626
 8002aa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8002aaa:	4618      	mov	r0, r3
  float32_t *pState = S->pState;                 /* State pointer */
 8002aac:	f8d2 362c 	ldr.w	r3, [r2, #1580]	; 0x62c
 8002ab0:	9303      	str	r3, [sp, #12]
 8002ab2:	4619      	mov	r1, r3
  uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 8002ab4:	f892 3624 	ldrb.w	r3, [r2, #1572]	; 0x624
 8002ab8:	9308      	str	r3, [sp, #32]
 8002aba:	461c      	mov	r4, r3
                outputevents = 0;
                //chprintf(strm, "sblock!\r\n");
                //chprintf(strm, "sblock!\r\n");
                // yup, we got a buffer
                System::lock();
                arm_fir_decimate_f32(&filter, &(*adc_buffer)[0], &filterOutput, CURRENT_FIR_BLOCK_SIZE);
 8002abc:	f8d2 3620 	ldr.w	r3, [r2, #1568]	; 0x620
 8002ac0:	9307      	str	r3, [sp, #28]
  float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8002ac2:	f8d2 2628 	ldr.w	r2, [r2, #1576]	; 0x628
 8002ac6:	9201      	str	r2, [sp, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* S->pState buffer contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = S->pState + (numTaps - 1u);
 8002ac8:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8002acc:	3b01      	subs	r3, #1
  float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8002ace:	4616      	mov	r6, r2
  uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 8002ad0:	2532      	movs	r5, #50	; 0x32
  pStateCurnt = S->pState + (numTaps - 1u);
 8002ad2:	eb01 0283 	add.w	r2, r1, r3, lsl #2
  uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 8002ad6:	fbb5 f5f4 	udiv	r5, r5, r4
 8002ada:	f005 0703 	and.w	r7, r5, #3

  /* Total number of output samples to be computed */
  blkCnt = outBlockSize / 4;
  blkCntN4 = outBlockSize - (4 * blkCnt);

  while(blkCnt > 0u)
 8002ade:	08ad      	lsrs	r5, r5, #2
  pStateCurnt = S->pState + (numTaps - 1u);
 8002ae0:	9209      	str	r2, [sp, #36]	; 0x24
 8002ae2:	9710      	str	r7, [sp, #64]	; 0x40
  while(blkCnt > 0u)
 8002ae4:	9511      	str	r5, [sp, #68]	; 0x44
 8002ae6:	f000 81dd 	beq.w	8002ea4 <_ZN16currentControlTh4mainEv+0x5b4>
 8002aea:	0887      	lsrs	r7, r0, #2
 8002aec:	1c6a      	adds	r2, r5, #1
 8002aee:	0115      	lsls	r5, r2, #4
 8002af0:	013b      	lsls	r3, r7, #4
 8002af2:	9704      	str	r7, [sp, #16]
 8002af4:	9512      	str	r5, [sp, #72]	; 0x48
 8002af6:	462f      	mov	r7, r5
 8002af8:	b225      	sxth	r5, r4
 8002afa:	18f4      	adds	r4, r6, r3
 8002afc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002afe:	940b      	str	r4, [sp, #44]	; 0x2c
 8002b00:	f000 0003 	and.w	r0, r0, #3
 8002b04:	19f4      	adds	r4, r6, r7
 8002b06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b08:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8002b0a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8002b0e:	900c      	str	r0, [sp, #48]	; 0x30
 8002b10:	00ae      	lsls	r6, r5, #2
 8002b12:	eb01 0c03 	add.w	ip, r1, r3
 8002b16:	940d      	str	r4, [sp, #52]	; 0x34
 8002b18:	012d      	lsls	r5, r5, #4
 8002b1a:	f101 0e10 	add.w	lr, r1, #16
 8002b1e:	9202      	str	r2, [sp, #8]
 8002b20:	4608      	mov	r0, r1
 8002b22:	9902      	ldr	r1, [sp, #8]
  {
    /* Copy 4 * decimation factor number of new input samples into the state buffer */
    i = 4 * S->M;
 8002b24:	4633      	mov	r3, r6
 8002b26:	464a      	mov	r2, r9

    do
    {
      *pStateCurnt++ = *pSrc++;
 8002b28:	f852 4b04 	ldr.w	r4, [r2], #4
 8002b2c:	f841 4b04 	str.w	r4, [r1], #4

    } while(--i);
 8002b30:	3b01      	subs	r3, #1
 8002b32:	d1f9      	bne.n	8002b28 <_ZN16currentControlTh4mainEv+0x238>
 8002b34:	9b02      	ldr	r3, [sp, #8]
    tapCnt = numTaps >> 2;

    /* Loop over the number of taps.  Unroll by a factor of 4.       
     ** Repeat until we've computed numTaps-4 coefficients. */

    while(tapCnt > 0u)
 8002b36:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8002dd8 <_ZN16currentControlTh4mainEv+0x4e8>
 8002b3a:	1981      	adds	r1, r0, r6
 8002b3c:	442b      	add	r3, r5
 8002b3e:	198a      	adds	r2, r1, r6
 8002b40:	9302      	str	r3, [sp, #8]
 8002b42:	1993      	adds	r3, r2, r6
 8002b44:	9305      	str	r3, [sp, #20]
 8002b46:	9b04      	ldr	r3, [sp, #16]
 8002b48:	44a9      	add	r9, r5
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 819a 	beq.w	8002e84 <_ZN16currentControlTh4mainEv+0x594>
 8002b50:	9901      	ldr	r1, [sp, #4]
 8002b52:	f8dd b010 	ldr.w	fp, [sp, #16]
 8002b56:	eb0e 0206 	add.w	r2, lr, r6
 8002b5a:	18b3      	adds	r3, r6, r2
 8002b5c:	f101 0010 	add.w	r0, r1, #16
 8002b60:	eeb0 7a67 	vmov.f32	s14, s15
 8002b64:	eef0 6a67 	vmov.f32	s13, s15
 8002b68:	eeb0 6a67 	vmov.f32	s12, s15
 8002b6c:	18f4      	adds	r4, r6, r3
 8002b6e:	4671      	mov	r1, lr
    {
      /* Read the b[numTaps-1] coefficient */
      c0 = *(pb++);
 8002b70:	ed10 4a04 	vldr	s8, [r0, #-16]
      x2 = *(px2++);
      /* Read x[n-numTaps-1] sample for acc3 */
      x3 = *(px3++);

      /* Perform the multiply-accumulate */
      acc0 += x0 * c0;
 8002b74:	ed51 ba04 	vldr	s23, [r1, #-16]
      acc1 += x1 * c0;
 8002b78:	ed12 ba04 	vldr	s22, [r2, #-16]
      acc2 += x2 * c0;
 8002b7c:	ed53 aa04 	vldr	s21, [r3, #-16]
      acc3 += x3 * c0;
 8002b80:	ed14 aa04 	vldr	s20, [r4, #-16]

      /* Read the b[numTaps-2] coefficient */
      c0 = *(pb++);
 8002b84:	ed50 4a03 	vldr	s9, [r0, #-12]
      x1 = *(px1++);
      x2 = *(px2++);
      x3 = *(px3++);

      /* Perform the multiply-accumulate */
      acc0 += x0 * c0;
 8002b88:	ed51 9a03 	vldr	s19, [r1, #-12]
      acc1 += x1 * c0;
 8002b8c:	ed12 9a03 	vldr	s18, [r2, #-12]
      acc2 += x2 * c0;
 8002b90:	ed53 8a03 	vldr	s17, [r3, #-12]
      acc3 += x3 * c0;
 8002b94:	ed14 8a03 	vldr	s16, [r4, #-12]

      /* Read the b[numTaps-3] coefficient */
      c0 = *(pb++);
 8002b98:	ed10 5a02 	vldr	s10, [r0, #-8]
      x1 = *(px1++);
      x2 = *(px2++);
      x3 = *(px3++);

      /* Perform the multiply-accumulate */
      acc0 += x0 * c0;
 8002b9c:	ed11 0a02 	vldr	s0, [r1, #-8]
      acc1 += x1 * c0;
 8002ba0:	ed52 0a02 	vldr	s1, [r2, #-8]
      acc2 += x2 * c0;
 8002ba4:	ed13 1a02 	vldr	s2, [r3, #-8]
      acc3 += x3 * c0;
 8002ba8:	ed54 1a02 	vldr	s3, [r4, #-8]

      /* Read the b[numTaps-4] coefficient */
      c0 = *(pb++);
 8002bac:	ed50 5a01 	vldr	s11, [r0, #-4]
      x1 = *(px1++);
      x2 = *(px2++);
      x3 = *(px3++);

      /* Perform the multiply-accumulate */
      acc0 += x0 * c0;
 8002bb0:	ed11 2a01 	vldr	s4, [r1, #-4]
      acc1 += x1 * c0;
 8002bb4:	ed52 2a01 	vldr	s5, [r2, #-4]
      acc2 += x2 * c0;
 8002bb8:	ed13 3a01 	vldr	s6, [r3, #-4]
      acc3 += x3 * c0;
 8002bbc:	ed54 3a01 	vldr	s7, [r4, #-4]
      acc0 += x0 * c0;
 8002bc0:	eea4 6a2b 	vfma.f32	s12, s8, s23
    while(tapCnt > 0u)
 8002bc4:	f1bb 0b01 	subs.w	fp, fp, #1
 8002bc8:	f100 0010 	add.w	r0, r0, #16
      acc1 += x1 * c0;
 8002bcc:	eee4 6a0b 	vfma.f32	s13, s8, s22
 8002bd0:	f101 0110 	add.w	r1, r1, #16
 8002bd4:	f102 0210 	add.w	r2, r2, #16
      acc2 += x2 * c0;
 8002bd8:	eea4 7a2a 	vfma.f32	s14, s8, s21
 8002bdc:	f103 0310 	add.w	r3, r3, #16
 8002be0:	f104 0410 	add.w	r4, r4, #16
      acc3 += x3 * c0;
 8002be4:	eee4 7a0a 	vfma.f32	s15, s8, s20
      acc0 += x0 * c0;
 8002be8:	eea4 6aa9 	vfma.f32	s12, s9, s19
      acc1 += x1 * c0;
 8002bec:	eee4 6a89 	vfma.f32	s13, s9, s18
      acc2 += x2 * c0;
 8002bf0:	eea4 7aa8 	vfma.f32	s14, s9, s17
      acc3 += x3 * c0;
 8002bf4:	eee4 7a88 	vfma.f32	s15, s9, s16
      acc0 += x0 * c0;
 8002bf8:	eea5 6a00 	vfma.f32	s12, s10, s0
      acc1 += x1 * c0;
 8002bfc:	eee5 6a20 	vfma.f32	s13, s10, s1
      acc2 += x2 * c0;
 8002c00:	eea5 7a01 	vfma.f32	s14, s10, s2
      acc3 += x3 * c0;
 8002c04:	eee5 7a21 	vfma.f32	s15, s10, s3
      acc0 += x0 * c0;
 8002c08:	eea5 6a82 	vfma.f32	s12, s11, s4
      acc1 += x1 * c0;
 8002c0c:	eee5 6aa2 	vfma.f32	s13, s11, s5
      acc2 += x2 * c0;
 8002c10:	eea5 7a83 	vfma.f32	s14, s11, s6
      acc3 += x3 * c0;
 8002c14:	eee5 7aa3 	vfma.f32	s15, s11, s7
    while(tapCnt > 0u)
 8002c18:	d1aa      	bne.n	8002b70 <_ZN16currentControlTh4mainEv+0x280>
 8002c1a:	eb0c 0106 	add.w	r1, ip, r6
 8002c1e:	198a      	adds	r2, r1, r6
      c0 = *(pb++);
 8002c20:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8002c24:	1994      	adds	r4, r2, r6
 8002c26:	4660      	mov	r0, ip
    }

    /* If the filter length is not a multiple of 4, compute the remaining filter taps */
    tapCnt = numTaps % 0x4u;

    while(tapCnt > 0u)
 8002c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c2a:	b19b      	cbz	r3, 8002c54 <_ZN16currentControlTh4mainEv+0x364>
    {
      /* Read coefficients */
      c0 = *(pb++);
 8002c2c:	ecfb 5a01 	vldmia	fp!, {s11}
      x1 = *(px1++);
      x2 = *(px2++);
      x3 = *(px3++);

      /* Perform the multiply-accumulate */
      acc0 += x0 * c0;
 8002c30:	ecf0 3a01 	vldmia	r0!, {s7}
      acc1 += x1 * c0;
 8002c34:	ecb1 4a01 	vldmia	r1!, {s8}
      acc2 += x2 * c0;
 8002c38:	ecf2 4a01 	vldmia	r2!, {s9}
      acc3 += x3 * c0;
 8002c3c:	ecb4 5a01 	vldmia	r4!, {s10}
    while(tapCnt > 0u)
 8002c40:	3b01      	subs	r3, #1
      acc0 += x0 * c0;
 8002c42:	eea5 6aa3 	vfma.f32	s12, s11, s7
      acc1 += x1 * c0;
 8002c46:	eee5 6a84 	vfma.f32	s13, s11, s8
      acc2 += x2 * c0;
 8002c4a:	eea5 7aa4 	vfma.f32	s14, s11, s9
      acc3 += x3 * c0;
 8002c4e:	eee5 7a85 	vfma.f32	s15, s11, s10
    while(tapCnt > 0u)
 8002c52:	d1eb      	bne.n	8002c2c <_ZN16currentControlTh4mainEv+0x33c>
      tapCnt--;
    }

    /* Advance the state pointer by the decimation factor       
     * to process the next group of decimation factor number samples */
    pState = pState + 4 * S->M;
 8002c54:	9b05      	ldr	r3, [sp, #20]

    /* The result is in the accumulator, store in the destination buffer. */
    *pDst++ = acc0;
 8002c56:	ed07 6a04 	vstr	s12, [r7, #-16]
    pState = pState + 4 * S->M;
 8002c5a:	4433      	add	r3, r6
 8002c5c:	4618      	mov	r0, r3
  while(blkCnt > 0u)
 8002c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    *pDst++ = acc1;
 8002c60:	ed47 6a03 	vstr	s13, [r7, #-12]
    *pDst++ = acc2;
 8002c64:	ed07 7a02 	vstr	s14, [r7, #-8]
    *pDst++ = acc3;
 8002c68:	ed47 7a01 	vstr	s15, [r7, #-4]
 8002c6c:	3710      	adds	r7, #16
  while(blkCnt > 0u)
 8002c6e:	429f      	cmp	r7, r3
 8002c70:	44ac      	add	ip, r5
 8002c72:	44ae      	add	lr, r5
 8002c74:	f47f af55 	bne.w	8002b22 <_ZN16currentControlTh4mainEv+0x232>
 8002c78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002c7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002c7c:	f1a3 0410 	sub.w	r4, r3, #16
 8002c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	441c      	add	r4, r3
 8002c86:	4613      	mov	r3, r2
 8002c88:	9a03      	ldr	r2, [sp, #12]
 8002c8a:	fb06 6101 	mla	r1, r6, r1, r6
 8002c8e:	fb05 2503 	mla	r5, r5, r3, r2
 8002c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c94:	0089      	lsls	r1, r1, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	9309      	str	r3, [sp, #36]	; 0x24
 8002c9a:	9b07      	ldr	r3, [sp, #28]
 8002c9c:	4419      	add	r1, r3

    /* Decrement the loop counter */
    blkCnt--;
  }

  while(blkCntN4 > 0u)
 8002c9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d05c      	beq.n	8002d5e <_ZN16currentControlTh4mainEv+0x46e>
 8002ca4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002ca6:	9801      	ldr	r0, [sp, #4]
 8002ca8:	9504      	str	r5, [sp, #16]
 8002caa:	0897      	lsrs	r7, r2, #2
 8002cac:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8002cb0:	4458      	add	r0, fp
 8002cb2:	9002      	str	r0, [sp, #8]
 8002cb4:	9808      	ldr	r0, [sp, #32]
 8002cb6:	0086      	lsls	r6, r0, #2
 8002cb8:	4628      	mov	r0, r5
 8002cba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002cbc:	f002 0c03 	and.w	ip, r2, #3
 8002cc0:	4699      	mov	r9, r3
 8002cc2:	9b08      	ldr	r3, [sp, #32]
 8002cc4:	46ae      	mov	lr, r5
 8002cc6:	460a      	mov	r2, r1
    /* Copy decimation factor number of new input samples into the state buffer */
    i = S->M;

    do
    {
      *pStateCurnt++ = *pSrc++;
 8002cc8:	ecf2 7a01 	vldmia	r2!, {s15}

    } while(--i);
 8002ccc:	3b01      	subs	r3, #1
      *pStateCurnt++ = *pSrc++;
 8002cce:	ecee 7a01 	vstmia	lr!, {s15}
    } while(--i);
 8002cd2:	d1f9      	bne.n	8002cc8 <_ZN16currentControlTh4mainEv+0x3d8>
 8002cd4:	4435      	add	r5, r6
 8002cd6:	4431      	add	r1, r6
    /* Loop unrolling.  Process 4 taps at a time. */
    tapCnt = numTaps >> 2;

    /* Loop over the number of taps.  Unroll by a factor of 4.       
     ** Repeat until we've computed numTaps-4 coefficients. */
    while(tapCnt > 0u)
 8002cd8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8002dd8 <_ZN16currentControlTh4mainEv+0x4e8>
 8002cdc:	2f00      	cmp	r7, #0
 8002cde:	f000 80ce 	beq.w	8002e7e <_ZN16currentControlTh4mainEv+0x58e>
 8002ce2:	9b01      	ldr	r3, [sp, #4]
 8002ce4:	46be      	mov	lr, r7
 8002ce6:	f103 0210 	add.w	r2, r3, #16
 8002cea:	f100 0310 	add.w	r3, r0, #16

      /* Read x[n-numTaps-1] sample */
      x0 = *(px++);

      /* Perform the multiply-accumulate */
      sum0 += x0 * c0;
 8002cee:	ed52 3a04 	vldr	s7, [r2, #-16]
 8002cf2:	ed13 4a04 	vldr	s8, [r3, #-16]

      /* Read x[n-numTaps-2] sample */
      x0 = *(px++);

      /* Perform the multiply-accumulate */
      sum0 += x0 * c0;
 8002cf6:	ed52 4a03 	vldr	s9, [r2, #-12]
 8002cfa:	ed13 5a03 	vldr	s10, [r3, #-12]

      /* Read x[n-numTaps-3] sample */
      x0 = *(px++);

      /* Perform the multiply-accumulate */
      sum0 += x0 * c0;
 8002cfe:	ed52 5a02 	vldr	s11, [r2, #-8]
 8002d02:	ed13 6a02 	vldr	s12, [r3, #-8]

      /* Read x[n-numTaps-4] sample */
      x0 = *(px++);

      /* Perform the multiply-accumulate */
      sum0 += x0 * c0;
 8002d06:	ed52 6a01 	vldr	s13, [r2, #-4]
 8002d0a:	ed13 7a01 	vldr	s14, [r3, #-4]
      sum0 += x0 * c0;
 8002d0e:	eee3 7a84 	vfma.f32	s15, s7, s8
    while(tapCnt > 0u)
 8002d12:	f1be 0e01 	subs.w	lr, lr, #1
 8002d16:	f102 0210 	add.w	r2, r2, #16
 8002d1a:	f103 0310 	add.w	r3, r3, #16
      sum0 += x0 * c0;
 8002d1e:	eee4 7a85 	vfma.f32	s15, s9, s10
      sum0 += x0 * c0;
 8002d22:	eee5 7a86 	vfma.f32	s15, s11, s12
      sum0 += x0 * c0;
 8002d26:	eee6 7a87 	vfma.f32	s15, s13, s14
    while(tapCnt > 0u)
 8002d2a:	d1e0      	bne.n	8002cee <_ZN16currentControlTh4mainEv+0x3fe>
      c0 = *(pb++);
 8002d2c:	9a02      	ldr	r2, [sp, #8]
 8002d2e:	eb00 0e0b 	add.w	lr, r0, fp
    }

    /* If the filter length is not a multiple of 4, compute the remaining filter taps */
    tapCnt = numTaps % 0x4u;

    while(tapCnt > 0u)
 8002d32:	f1bc 0f00 	cmp.w	ip, #0
 8002d36:	d008      	beq.n	8002d4a <_ZN16currentControlTh4mainEv+0x45a>
 8002d38:	4663      	mov	r3, ip

      /* Fetch 1 state variable */
      x0 = *(px++);

      /* Perform the multiply-accumulate */
      sum0 += x0 * c0;
 8002d3a:	ecf2 6a01 	vldmia	r2!, {s13}
 8002d3e:	ecbe 7a01 	vldmia	lr!, {s14}
    while(tapCnt > 0u)
 8002d42:	3b01      	subs	r3, #1
      sum0 += x0 * c0;
 8002d44:	eee6 7a87 	vfma.f32	s15, s13, s14
    while(tapCnt > 0u)
 8002d48:	d1f7      	bne.n	8002d3a <_ZN16currentControlTh4mainEv+0x44a>
  while(blkCntN4 > 0u)
 8002d4a:	f1b9 0901 	subs.w	r9, r9, #1
      tapCnt--;
    }

    /* Advance the state pointer by the decimation factor       
     * to process the next group of decimation factor number samples */
    pState = pState + S->M;
 8002d4e:	4430      	add	r0, r6

    /* The result is in the accumulator, store in the destination buffer. */
    *pDst++ = sum0;
 8002d50:	ece4 7a01 	vstmia	r4!, {s15}
  while(blkCntN4 > 0u)
 8002d54:	d1b5      	bne.n	8002cc2 <_ZN16currentControlTh4mainEv+0x3d2>
 8002d56:	9d04      	ldr	r5, [sp, #16]
 8002d58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002d5a:	fb06 5503 	mla	r5, r6, r3, r5
   ** This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;

  i = (numTaps - 1u) >> 2;
 8002d5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002d60:	1e59      	subs	r1, r3, #1

  /* copy data */
  while(i > 0u)
 8002d62:	088c      	lsrs	r4, r1, #2
 8002d64:	d020      	beq.n	8002da8 <_ZN16currentControlTh4mainEv+0x4b8>
 8002d66:	9b03      	ldr	r3, [sp, #12]
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f103 0210 	add.w	r2, r3, #16
 8002d6e:	f105 0310 	add.w	r3, r5, #16
  {
    *pStateCurnt++ = *pState++;
 8002d72:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8002d76:	f842 6c10 	str.w	r6, [r2, #-16]
    *pStateCurnt++ = *pState++;
 8002d7a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8002d7e:	f842 6c0c 	str.w	r6, [r2, #-12]
    *pStateCurnt++ = *pState++;
 8002d82:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8002d86:	f842 6c08 	str.w	r6, [r2, #-8]
    *pStateCurnt++ = *pState++;
 8002d8a:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8002d8e:	f842 6c04 	str.w	r6, [r2, #-4]
  while(i > 0u)
 8002d92:	3801      	subs	r0, #1
 8002d94:	f103 0310 	add.w	r3, r3, #16
 8002d98:	f102 0210 	add.w	r2, r2, #16
 8002d9c:	d1e9      	bne.n	8002d72 <_ZN16currentControlTh4mainEv+0x482>
 8002d9e:	9a03      	ldr	r2, [sp, #12]
 8002da0:	0123      	lsls	r3, r4, #4
 8002da2:	441a      	add	r2, r3
 8002da4:	9203      	str	r2, [sp, #12]
 8002da6:	441d      	add	r5, r3
  }

  i = (numTaps - 1u) % 0x04u;

  /* copy data */
  while(i > 0u)
 8002da8:	f011 0203 	ands.w	r2, r1, #3
 8002dac:	d008      	beq.n	8002dc0 <_ZN16currentControlTh4mainEv+0x4d0>
 8002dae:	9b03      	ldr	r3, [sp, #12]
 8002db0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
  {
    *pStateCurnt++ = *pState++;
 8002db4:	f855 1b04 	ldr.w	r1, [r5], #4
 8002db8:	f843 1b04 	str.w	r1, [r3], #4
  while(i > 0u)
 8002dbc:	4295      	cmp	r5, r2
 8002dbe:	d1f9      	bne.n	8002db4 <_ZN16currentControlTh4mainEv+0x4c4>

                static union {
                      float32_t f;
                      msg_t m;
                } value;
                value.f = filterOutput;
 8002dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dc2:	4a06      	ldr	r2, [pc, #24]	; (8002ddc <_ZN16currentControlTh4mainEv+0x4ec>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6013      	str	r3, [r2, #0]
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
  struct pool_header *php = objp;

  chDbgCheckClassI();
 8002dc8:	f7fd fd3a 	bl	8000840 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <_ZN16currentControlTh4mainEv+0x4f0>)
 8002dce:	9907      	ldr	r1, [sp, #28]
 8002dd0:	e008      	b.n	8002de4 <_ZN16currentControlTh4mainEv+0x4f4>
 8002dd2:	bf00      	nop
 8002dd4:	2000312c 	.word	0x2000312c
 8002dd8:	00000000 	.word	0x00000000
 8002ddc:	20000a0c 	.word	0x20000a0c
 8002de0:	20002938 	.word	0x20002938
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	600b      	str	r3, [r1, #0]
  mp->next = php;
 8002de8:	4b66      	ldr	r3, [pc, #408]	; (8002f84 <_ZN16currentControlTh4mainEv+0x694>)
 8002dea:	6019      	str	r1, [r3, #0]
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {

  chDbgCheckClassI();
 8002dec:	f7fd fd28 	bl	8000840 <chDbgCheckClassI>
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8002df0:	f89a 3014 	ldrb.w	r3, [sl, #20]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d15c      	bne.n	8002eb2 <_ZN16currentControlTh4mainEv+0x5c2>
  chDbgCheckClassI();
 8002df8:	f7fd fd22 	bl	8000840 <chDbgCheckClassI>
  return mbp->cnt;
 8002dfc:	f8da 2010 	ldr.w	r2, [sl, #16]
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (cnt_t)0) {
 8002e00:	2a00      	cmp	r2, #0
 8002e02:	dd53      	ble.n	8002eac <_ZN16currentControlTh4mainEv+0x5bc>
    *msgp = *mbp->rdptr++;
 8002e04:	f8da 300c 	ldr.w	r3, [sl, #12]
    if (mbp->rdptr >= mbp->top) {
 8002e08:	f8da 1004 	ldr.w	r1, [sl, #4]
    *msgp = *mbp->rdptr++;
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	9c06      	ldr	r4, [sp, #24]
 8002e10:	3304      	adds	r3, #4
    if (mbp->rdptr >= mbp->top) {
 8002e12:	428b      	cmp	r3, r1
    *msgp = *mbp->rdptr++;
 8002e14:	f8ca 300c 	str.w	r3, [sl, #12]
 8002e18:	f8c4 0620 	str.w	r0, [r4, #1568]	; 0x620
      mbp->rdptr = mbp->buffer;
 8002e1c:	bf28      	it	cs
 8002e1e:	f8da 3000 	ldrcs.w	r3, [sl]
    }
    mbp->cnt--;

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8002e22:	4859      	ldr	r0, [pc, #356]	; (8002f88 <_ZN16currentControlTh4mainEv+0x698>)
      mbp->rdptr = mbp->buffer;
 8002e24:	bf28      	it	cs
 8002e26:	f8ca 300c 	strcs.w	r3, [sl, #12]
    mbp->cnt--;
 8002e2a:	3a01      	subs	r2, #1
 8002e2c:	f8ca 2010 	str.w	r2, [sl, #16]
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8002e30:	f000 f9ee 	bl	8003210 <chThdDequeueNextI.constprop.63>

    return MSG_OK;
 8002e34:	2500      	movs	r5, #0
                ADCManager::current_free_buffers.freeI(adc_buffer);
                resp = ADCManager::current_filled_buffers.fetchI(&adc_buffer);

                chEvtBroadcastFlagsI(&current_event_source, CURRENT_EVT_UPDATEAMPLITUDE);
 8002e36:	2102      	movs	r1, #2
 8002e38:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002e3a:	f7fd fe11 	bl	8000a60 <chEvtBroadcastFlagsI>
  _dbg_check_unlock();
 8002e3e:	f7fe fa37 	bl	80012b0 <_dbg_check_unlock>
 8002e42:	2300      	movs	r3, #0
 8002e44:	f383 8811 	msr	BASEPRI, r3
                System::unlock();
                data[0] = 'c';
                data[4] = (value.m >> 24) & 0xFF;
 8002e48:	4b50      	ldr	r3, [pc, #320]	; (8002f8c <_ZN16currentControlTh4mainEv+0x69c>)
 8002e4a:	681c      	ldr	r4, [r3, #0]
                data[3] = (value.m >> 16) & 0xFF;
                data[2] = (value.m >> 8) & 0xFF;
                data[1] = value.m & 0xFF;
 8002e4c:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55
                data[3] = (value.m >> 16) & 0xFF;
 8002e50:	1422      	asrs	r2, r4, #16
                data[0] = 'c';
 8002e52:	2063      	movs	r0, #99	; 0x63
                data[4] = (value.m >> 24) & 0xFF;
 8002e54:	0e26      	lsrs	r6, r4, #24
                data[0] = 'c';
 8002e56:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
                data[2] = (value.m >> 8) & 0xFF;
 8002e5a:	1224      	asrs	r4, r4, #8
                data[3] = (value.m >> 16) & 0xFF;
 8002e5c:	f88d 2057 	strb.w	r2, [sp, #87]	; 0x57
                sdWrite(&SD2, (uint8_t *) data, 5);
 8002e60:	a915      	add	r1, sp, #84	; 0x54
 8002e62:	484b      	ldr	r0, [pc, #300]	; (8002f90 <_ZN16currentControlTh4mainEv+0x6a0>)
                data[4] = (value.m >> 24) & 0xFF;
 8002e64:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
                sdWrite(&SD2, (uint8_t *) data, 5);
 8002e68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e6c:	2205      	movs	r2, #5
                data[2] = (value.m >> 8) & 0xFF;
 8002e6e:	f88d 4056 	strb.w	r4, [sp, #86]	; 0x56
                sdWrite(&SD2, (uint8_t *) data, 5);
 8002e72:	f7fe fa55 	bl	8001320 <oqWriteTimeout>
            while (resp == MSG_OK) {
 8002e76:	2d00      	cmp	r5, #0
 8002e78:	f47f ad95 	bne.w	80029a6 <_ZN16currentControlTh4mainEv+0xb6>
 8002e7c:	e60c      	b.n	8002a98 <_ZN16currentControlTh4mainEv+0x1a8>
    while(tapCnt > 0u)
 8002e7e:	4686      	mov	lr, r0
    pb = pCoeffs;
 8002e80:	9a01      	ldr	r2, [sp, #4]
 8002e82:	e756      	b.n	8002d32 <_ZN16currentControlTh4mainEv+0x442>
    acc2 = 0.0f;
 8002e84:	eeb0 7a67 	vmov.f32	s14, s15
    acc1 = 0.0f;
 8002e88:	eef0 6a67 	vmov.f32	s13, s15
    acc0 = 0.0f;
 8002e8c:	eeb0 6a67 	vmov.f32	s12, s15
    px3 = pState + 3 * S->M;
 8002e90:	1994      	adds	r4, r2, r6
    pb = pCoeffs;
 8002e92:	f8dd b004 	ldr.w	fp, [sp, #4]
 8002e96:	e6c7      	b.n	8002c28 <_ZN16currentControlTh4mainEv+0x338>
 8002e98:	f7fe fa0a 	bl	80012b0 <_dbg_check_unlock>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	e580      	b.n	80029a6 <_ZN16currentControlTh4mainEv+0xb6>
  float32_t *pState = S->pState;                 /* State pointer */
 8002ea4:	9d03      	ldr	r5, [sp, #12]
  while(blkCnt > 0u)
 8002ea6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002ea8:	9907      	ldr	r1, [sp, #28]
 8002eaa:	e6f8      	b.n	8002c9e <_ZN16currentControlTh4mainEv+0x3ae>
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
 8002eac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002eb0:	e7c1      	b.n	8002e36 <_ZN16currentControlTh4mainEv+0x546>
    return MSG_RESET;
 8002eb2:	f06f 0501 	mvn.w	r5, #1
 8002eb6:	e7be      	b.n	8002e36 <_ZN16currentControlTh4mainEv+0x546>
      b = dmaStreamAllocate(adcp->dmastp,
 8002eb8:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8002eba:	4e36      	ldr	r6, [pc, #216]	; (8002f94 <_ZN16currentControlTh4mainEv+0x6a4>)
 8002ebc:	7a42      	ldrb	r2, [r0, #9]
 8002ebe:	6837      	ldr	r7, [r6, #0]
 8002ec0:	4093      	lsls	r3, r2
 8002ec2:	423b      	tst	r3, r7
 8002ec4:	d140      	bne.n	8002f48 <_ZN16currentControlTh4mainEv+0x658>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8002ec6:	4d34      	ldr	r5, [pc, #208]	; (8002f98 <_ZN16currentControlTh4mainEv+0x6a8>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
 8002ec8:	433b      	orrs	r3, r7
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8002eca:	eb05 07c2 	add.w	r7, r5, r2, lsl #3
  dma_streams_mask |= (1U << dmastp->selfindex);
 8002ece:	6033      	str	r3, [r6, #0]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8002ed0:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8002ed4:	4e31      	ldr	r6, [pc, #196]	; (8002f9c <_ZN16currentControlTh4mainEv+0x6ac>)
 8002ed6:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8002eda:	6079      	str	r1, [r7, #4]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8002edc:	d004      	beq.n	8002ee8 <_ZN16currentControlTh4mainEv+0x5f8>
    rccEnableDMA1(false);
 8002ede:	4d30      	ldr	r5, [pc, #192]	; (8002fa0 <_ZN16currentControlTh4mainEv+0x6b0>)
 8002ee0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002ee2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002ee6:	632a      	str	r2, [r5, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 8002ee8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8002eec:	d004      	beq.n	8002ef8 <_ZN16currentControlTh4mainEv+0x608>
    rccEnableDMA2(false);
 8002eee:	4a2c      	ldr	r2, [pc, #176]	; (8002fa0 <_ZN16currentControlTh4mainEv+0x6b0>)
 8002ef0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002ef2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ef6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8002ef8:	6802      	ldr	r2, [r0, #0]
 8002efa:	6813      	ldr	r3, [r2, #0]
 8002efc:	f023 031f 	bic.w	r3, r3, #31
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	6813      	ldr	r3, [r2, #0]
 8002f04:	f013 0301 	ands.w	r3, r3, #1
 8002f08:	d1fb      	bne.n	8002f02 <_ZN16currentControlTh4mainEv+0x612>
 8002f0a:	7a07      	ldrb	r7, [r0, #8]
 8002f0c:	6845      	ldr	r5, [r0, #4]
 8002f0e:	263d      	movs	r6, #61	; 0x3d
 8002f10:	40be      	lsls	r6, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8002f12:	2721      	movs	r7, #33	; 0x21
  dmaStreamDisable(dmastp);
 8002f14:	602e      	str	r6, [r5, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002f16:	6013      	str	r3, [r2, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8002f18:	6157      	str	r7, [r2, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
 8002f1a:	7a80      	ldrb	r0, [r0, #10]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002f1c:	0943      	lsrs	r3, r0, #5
 8002f1e:	009b      	lsls	r3, r3, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002f20:	f100 4660 	add.w	r6, r0, #3758096384	; 0xe0000000
 8002f24:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8002f28:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8002f2c:	f506 4661 	add.w	r6, r6, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002f30:	f000 001f 	and.w	r0, r0, #31
 8002f34:	2501      	movs	r5, #1
 8002f36:	fa05 f000 	lsl.w	r0, r5, r0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002f3a:	2760      	movs	r7, #96	; 0x60
 8002f3c:	f886 7300 	strb.w	r7, [r6, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002f40:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002f44:	6018      	str	r0, [r3, #0]
 8002f46:	e000      	b.n	8002f4a <_ZN16currentControlTh4mainEv+0x65a>
 8002f48:	6802      	ldr	r2, [r0, #0]
      rccEnableADC1(FALSE);
 8002f4a:	4815      	ldr	r0, [pc, #84]	; (8002fa0 <_ZN16currentControlTh4mainEv+0x6b0>)
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8002f4c:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <_ZN16currentControlTh4mainEv+0x6b4>)
 8002f4e:	6093      	str	r3, [r2, #8]
      rccEnableADC1(FALSE);
 8002f50:	6c43      	ldr	r3, [r0, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8002f52:	4d15      	ldr	r5, [pc, #84]	; (8002fa8 <_ZN16currentControlTh4mainEv+0x6b8>)
    adcp->adc->CR1 = 0;
 8002f54:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      rccEnableADC1(FALSE);
 8002f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5a:	6443      	str	r3, [r0, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8002f5c:	686b      	ldr	r3, [r5, #4]
 8002f5e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f66:	606b      	str	r3, [r5, #4]
    adcp->adc->CR1 = 0;
 8002f68:	2000      	movs	r0, #0
    adcp->adc->CR2 = ADC_CR2_ADON;
 8002f6a:	2301      	movs	r3, #1
    adcp->adc->CR1 = 0;
 8002f6c:	6050      	str	r0, [r2, #4]
    adcp->adc->CR2 = 0;
 8002f6e:	6090      	str	r0, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
 8002f70:	6093      	str	r3, [r2, #8]
 8002f72:	e4f2      	b.n	800295a <_ZN16currentControlTh4mainEv+0x6a>
      state = ADC_ERROR;
 8002f74:	4c0d      	ldr	r4, [pc, #52]	; (8002fac <_ZN16currentControlTh4mainEv+0x6bc>)
      chEvtBroadcastFlags(ADCManager::current_event_source, ADC_EVT_INIT_FAIL);
 8002f76:	6828      	ldr	r0, [r5, #0]
      state = ADC_ERROR;
 8002f78:	2305      	movs	r3, #5
      chEvtBroadcastFlags(ADCManager::current_event_source, ADC_EVT_INIT_FAIL);
 8002f7a:	4631      	mov	r1, r6
      state = ADC_ERROR;
 8002f7c:	7023      	strb	r3, [r4, #0]
      chEvtBroadcastFlags(ADCManager::current_event_source, ADC_EVT_INIT_FAIL);
 8002f7e:	f7fe fb87 	bl	8001690 <chEvtBroadcastFlags>
 8002f82:	e4d9      	b.n	8002938 <_ZN16currentControlTh4mainEv+0x48>
 8002f84:	20002938 	.word	0x20002938
 8002f88:	2000312c 	.word	0x2000312c
 8002f8c:	20000a0c 	.word	0x20000a0c
 8002f90:	20000b14 	.word	0x20000b14
 8002f94:	20000a90 	.word	0x20000a90
 8002f98:	20000a10 	.word	0x20000a10
 8002f9c:	08001111 	.word	0x08001111
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	4001204c 	.word	0x4001204c
 8002fa8:	40012300 	.word	0x40012300
 8002fac:	200009ec 	.word	0x200009ec

08002fb0 <_GLOBAL__I_65535_0_crt1.o.16383>:
 8002fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fb4:	4e63      	ldr	r6, [pc, #396]	; (8003144 <_GLOBAL__I_65535_0_crt1.o.16383+0x194>)
 8002fb6:	2700      	movs	r7, #0
 8002fb8:	23c8      	movs	r3, #200	; 0xc8
 8002fba:	6073      	str	r3, [r6, #4]
 8002fbc:	6037      	str	r7, [r6, #0]
 8002fbe:	60b7      	str	r7, [r6, #8]
 8002fc0:	f106 050c 	add.w	r5, r6, #12
 8002fc4:	240a      	movs	r4, #10
 8002fc6:	f04f 0820 	mov.w	r8, #32
 8002fca:	f388 8811 	msr	BASEPRI, r8
 8002fce:	f7fe f97f 	bl	80012d0 <_dbg_check_lock>
 8002fd2:	f7fd fc35 	bl	8000840 <chDbgCheckClassI>
 8002fd6:	6833      	ldr	r3, [r6, #0]
 8002fd8:	602b      	str	r3, [r5, #0]
 8002fda:	6035      	str	r5, [r6, #0]
 8002fdc:	f7fe f968 	bl	80012b0 <_dbg_check_unlock>
 8002fe0:	f387 8811 	msr	BASEPRI, r7
 8002fe4:	6873      	ldr	r3, [r6, #4]
 8002fe6:	3c01      	subs	r4, #1
 8002fe8:	441d      	add	r5, r3
 8002fea:	d1ee      	bne.n	8002fca <_GLOBAL__I_65535_0_crt1.o.16383+0x1a>
 8002fec:	4b56      	ldr	r3, [pc, #344]	; (8003148 <_GLOBAL__I_65535_0_crt1.o.16383+0x198>)
 8002fee:	4d57      	ldr	r5, [pc, #348]	; (800314c <_GLOBAL__I_65535_0_crt1.o.16383+0x19c>)
 8002ff0:	4f57      	ldr	r7, [pc, #348]	; (8003150 <_GLOBAL__I_65535_0_crt1.o.16383+0x1a0>)
 8002ff2:	4a58      	ldr	r2, [pc, #352]	; (8003154 <_GLOBAL__I_65535_0_crt1.o.16383+0x1a4>)
 8002ff4:	602a      	str	r2, [r5, #0]
 8002ff6:	f103 0e50 	add.w	lr, r3, #80	; 0x50
 8002ffa:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002ffe:	f8c3 e004 	str.w	lr, [r3, #4]
 8003002:	f103 0e18 	add.w	lr, r3, #24
 8003006:	f8df c178 	ldr.w	ip, [pc, #376]	; 8003180 <_GLOBAL__I_65535_0_crt1.o.16383+0x1d0>
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f505 66ab 	add.w	r6, r5, #1368	; 0x558
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	f8c3 e018 	str.w	lr, [r3, #24]
 8003018:	f103 0220 	add.w	r2, r3, #32
 800301c:	f8c3 e01c 	str.w	lr, [r3, #28]
 8003020:	f507 7eee 	add.w	lr, r7, #476	; 0x1dc
 8003024:	f8c7 c000 	str.w	ip, [r7]
 8003028:	f8c7 e1dc 	str.w	lr, [r7, #476]	; 0x1dc
 800302c:	606c      	str	r4, [r5, #4]
 800302e:	611c      	str	r4, [r3, #16]
 8003030:	751c      	strb	r4, [r3, #20]
 8003032:	621a      	str	r2, [r3, #32]
 8003034:	625a      	str	r2, [r3, #36]	; 0x24
 8003036:	607c      	str	r4, [r7, #4]
 8003038:	f8a7 41d8 	strh.w	r4, [r7, #472]	; 0x1d8
 800303c:	4946      	ldr	r1, [pc, #280]	; (8003158 <_GLOBAL__I_65535_0_crt1.o.16383+0x1a8>)
 800303e:	f8df b144 	ldr.w	fp, [pc, #324]	; 8003184 <_GLOBAL__I_65535_0_crt1.o.16383+0x1d4>
 8003042:	4630      	mov	r0, r6
 8003044:	22c8      	movs	r2, #200	; 0xc8
 8003046:	f7fd f96d 	bl	8000324 <memcpy>
 800304a:	f205 73bc 	addw	r3, r5, #1980	; 0x7bc
 800304e:	f04f 0800 	mov.w	r8, #0
 8003052:	f505 6ac6 	add.w	sl, r5, #1584	; 0x630
 8003056:	f04f 0932 	mov.w	r9, #50	; 0x32
 800305a:	f8c5 6628 	str.w	r6, [r5, #1576]	; 0x628
 800305e:	4621      	mov	r1, r4
 8003060:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8003064:	f8c3 8000 	str.w	r8, [r3]
 8003068:	f8a5 9626 	strh.w	r9, [r5, #1574]	; 0x626
 800306c:	4650      	mov	r0, sl
 800306e:	f000 ffe9 	bl	8004044 <memset>
 8003072:	4b3a      	ldr	r3, [pc, #232]	; (800315c <_GLOBAL__I_65535_0_crt1.o.16383+0x1ac>)
 8003074:	f8df e110 	ldr.w	lr, [pc, #272]	; 8003188 <_GLOBAL__I_65535_0_crt1.o.16383+0x1d8>
 8003078:	f8c3 5358 	str.w	r5, [r3, #856]	; 0x358
 800307c:	f505 62f8 	add.w	r2, r5, #1984	; 0x7c0
 8003080:	f8c5 27c0 	str.w	r2, [r5, #1984]	; 0x7c0
 8003084:	f8c5 a62c 	str.w	sl, [r5, #1580]	; 0x62c
 8003088:	f885 9624 	strb.w	r9, [r5, #1572]	; 0x624
 800308c:	4d34      	ldr	r5, [pc, #208]	; (8003160 <_GLOBAL__I_65535_0_crt1.o.16383+0x1b0>)
 800308e:	4e35      	ldr	r6, [pc, #212]	; (8003164 <_GLOBAL__I_65535_0_crt1.o.16383+0x1b4>)
 8003090:	f8c3 e378 	str.w	lr, [r3, #888]	; 0x378
 8003094:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 800318c <_GLOBAL__I_65535_0_crt1.o.16383+0x1dc>
 8003098:	f8c3 735c 	str.w	r7, [r3, #860]	; 0x35c
 800309c:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
 80030a0:	606c      	str	r4, [r5, #4]
 80030a2:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8003190 <_GLOBAL__I_65535_0_crt1.o.16383+0x1e0>
 80030a6:	4830      	ldr	r0, [pc, #192]	; (8003168 <_GLOBAL__I_65535_0_crt1.o.16383+0x1b8>)
 80030a8:	4a30      	ldr	r2, [pc, #192]	; (800316c <_GLOBAL__I_65535_0_crt1.o.16383+0x1bc>)
 80030aa:	4931      	ldr	r1, [pc, #196]	; (8003170 <_GLOBAL__I_65535_0_crt1.o.16383+0x1c0>)
 80030ac:	f8c5 e000 	str.w	lr, [r5]
 80030b0:	4f30      	ldr	r7, [pc, #192]	; (8003174 <_GLOBAL__I_65535_0_crt1.o.16383+0x1c4>)
 80030b2:	4d31      	ldr	r5, [pc, #196]	; (8003178 <_GLOBAL__I_65535_0_crt1.o.16383+0x1c8>)
 80030b4:	605c      	str	r4, [r3, #4]
 80030b6:	f8a3 438c 	strh.w	r4, [r3, #908]	; 0x38c
 80030ba:	f8a3 438e 	strh.w	r4, [r3, #910]	; 0x38e
 80030be:	f8c3 436c 	str.w	r4, [r3, #876]	; 0x36c
 80030c2:	6019      	str	r1, [r3, #0]
 80030c4:	f8c3 0360 	str.w	r0, [r3, #864]	; 0x360
 80030c8:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
 80030cc:	f8c3 4370 	str.w	r4, [r3, #880]	; 0x370
 80030d0:	f8c3 4374 	str.w	r4, [r3, #884]	; 0x374
 80030d4:	f8c3 8388 	str.w	r8, [r3, #904]	; 0x388
 80030d8:	f8c3 8380 	str.w	r8, [r3, #896]	; 0x380
 80030dc:	f8c3 8368 	str.w	r8, [r3, #872]	; 0x368
 80030e0:	f8c3 b384 	str.w	fp, [r3, #900]	; 0x384
 80030e4:	f8c3 c37c 	str.w	ip, [r3, #892]	; 0x37c
 80030e8:	f44f 6234 	mov.w	r2, #2880	; 0xb40
 80030ec:	4923      	ldr	r1, [pc, #140]	; (800317c <_GLOBAL__I_65535_0_crt1.o.16383+0x1cc>)
 80030ee:	f8c6 3258 	str.w	r3, [r6, #600]	; 0x258
 80030f2:	6074      	str	r4, [r6, #4]
 80030f4:	f8a6 425c 	strh.w	r4, [r6, #604]	; 0x25c
 80030f8:	f506 7018 	add.w	r0, r6, #608	; 0x260
 80030fc:	6037      	str	r7, [r6, #0]
 80030fe:	f7fd f911 	bl	8000324 <memcpy>
 8003102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003104:	f8a6 4da0 	strh.w	r4, [r6, #3488]	; 0xda0
 8003108:	f606 54a8 	addw	r4, r6, #3496	; 0xda8
 800310c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800310e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003116:	e895 0003 	ldmia.w	r5, {r0, r1}
 800311a:	f606 53a4 	addw	r3, r6, #3492	; 0xda4
 800311e:	3508      	adds	r5, #8
 8003120:	e884 0003 	stmia.w	r4, {r0, r1}
 8003124:	f8c3 8000 	str.w	r8, [r3]
 8003128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800312a:	f506 645e 	add.w	r4, r6, #3552	; 0xde0
 800312e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003138:	e895 0003 	ldmia.w	r5, {r0, r1}
 800313c:	e884 0003 	stmia.w	r4, {r0, r1}
 8003140:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003144:	20002938 	.word	0x20002938
 8003148:	20003114 	.word	0x20003114
 800314c:	20002170 	.word	0x20002170
 8003150:	20001bf8 	.word	0x20001bf8
 8003154:	08005008 	.word	0x08005008
 8003158:	080040e0 	.word	0x080040e0
 800315c:	20001dd8 	.word	0x20001dd8
 8003160:	20000b80 	.word	0x20000b80
 8003164:	20000de0 	.word	0x20000de0
 8003168:	3e99999a 	.word	0x3e99999a
 800316c:	be4ccccd 	.word	0xbe4ccccd
 8003170:	08004fcc 	.word	0x08004fcc
 8003174:	08004ff4 	.word	0x08004ff4
 8003178:	08004ce8 	.word	0x08004ce8
 800317c:	080041a8 	.word	0x080041a8
 8003180:	08004fe0 	.word	0x08004fe0
 8003184:	42c80000 	.word	0x42c80000
 8003188:	3e4ccccd 	.word	0x3e4ccccd
 800318c:	08004fb8 	.word	0x08004fb8
 8003190:	3dcccccd 	.word	0x3dcccccd
	...

080031a0 <chSchWakeupS.constprop.70>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80031a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  thread_t *otp = currp;
 80031a4:	4f14      	ldr	r7, [pc, #80]	; (80031f8 <chSchWakeupS.constprop.70+0x58>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80031a6:	4606      	mov	r6, r0
  ntp->u.rdymsg = msg;
 80031a8:	f04f 0800 	mov.w	r8, #0
  thread_t *otp = currp;
 80031ac:	69bd      	ldr	r5, [r7, #24]
  chDbgCheckClassS();
 80031ae:	f7fd fb1f 	bl	80007f0 <chDbgCheckClassS>
  ntp->u.rdymsg = msg;
 80031b2:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 80031b6:	68ac      	ldr	r4, [r5, #8]
 80031b8:	68b3      	ldr	r3, [r6, #8]
 80031ba:	42a3      	cmp	r3, r4
 80031bc:	d917      	bls.n	80031ee <chSchWakeupS.constprop.70+0x4e>
  chDbgCheckClassI();
 80031be:	f7fd fb3f 	bl	8000840 <chDbgCheckClassI>
  tp->state = CH_STATE_READY;
 80031c2:	f885 8020 	strb.w	r8, [r5, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80031c6:	463b      	mov	r3, r7
    cp = cp->queue.next;
 80031c8:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	4294      	cmp	r4, r2
 80031ce:	d9fb      	bls.n	80031c8 <chSchWakeupS.constprop.70+0x28>
  tp->queue.prev             = cp->queue.prev;
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	606a      	str	r2, [r5, #4]
    ntp->state = CH_STATE_CURRENT;
 80031d4:	2401      	movs	r4, #1
  tp->queue.next             = cp;
 80031d6:	602b      	str	r3, [r5, #0]
  tp->queue.prev->queue.next = tp;
 80031d8:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 80031da:	605d      	str	r5, [r3, #4]
    ntp->state = CH_STATE_CURRENT;
 80031dc:	f886 4020 	strb.w	r4, [r6, #32]
    chSysSwitch(ntp, otp);
 80031e0:	4629      	mov	r1, r5
 80031e2:	4630      	mov	r0, r6
    currp = ntp;
 80031e4:	61be      	str	r6, [r7, #24]
}
 80031e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    chSysSwitch(ntp, otp);
 80031ea:	f7fd b87d 	b.w	80002e8 <_port_switch>
    (void) chSchReadyI(ntp);
 80031ee:	4630      	mov	r0, r6
}
 80031f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    (void) chSchReadyI(ntp);
 80031f4:	f7fd bc1c 	b.w	8000a30 <chSchReadyI>
 80031f8:	20003164 	.word	0x20003164
 80031fc:	00000000 	.word	0x00000000

08003200 <chTMStartMeasurementX.constprop.66>:
  return DWT->CYCCNT;
 8003200:	4b01      	ldr	r3, [pc, #4]	; (8003208 <chTMStartMeasurementX.constprop.66+0x8>)
 8003202:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8003204:	6083      	str	r3, [r0, #8]
 8003206:	4770      	bx	lr
 8003208:	e0001000 	.word	0xe0001000
 800320c:	00000000 	.word	0x00000000

08003210 <chThdDequeueNextI.constprop.63>:
  return (bool)(tqp->next != (const thread_t *)tqp);
 8003210:	6803      	ldr	r3, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8003212:	4298      	cmp	r0, r3
 8003214:	d007      	beq.n	8003226 <chThdDequeueNextI.constprop.63+0x16>
  tqp->next             = tp->queue.next;
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	6002      	str	r2, [r0, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 800321a:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800321c:	6050      	str	r0, [r2, #4]
  (void) chSchReadyI(tp);
 800321e:	4618      	mov	r0, r3
  tp->u.rdymsg = msg;
 8003220:	6259      	str	r1, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8003222:	f7fd bc05 	b.w	8000a30 <chSchReadyI>
 8003226:	4770      	bx	lr
	...

08003230 <chPoolAllocI.constprop.53>:
void *chPoolAllocI(memory_pool_t *mp) {
 8003230:	b510      	push	{r4, lr}
  chDbgCheckClassI();
 8003232:	f7fd fb05 	bl	8000840 <chDbgCheckClassI>
  objp = mp->next;
 8003236:	4b07      	ldr	r3, [pc, #28]	; (8003254 <chPoolAllocI.constprop.53+0x24>)
 8003238:	6818      	ldr	r0, [r3, #0]
  if (objp != NULL) {
 800323a:	b110      	cbz	r0, 8003242 <chPoolAllocI.constprop.53+0x12>
    mp->next = mp->next->next;
 800323c:	6802      	ldr	r2, [r0, #0]
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	bd10      	pop	{r4, pc}
  else if (mp->provider != NULL) {
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	b122      	cbz	r2, 8003250 <chPoolAllocI.constprop.53+0x20>
    objp = mp->provider(mp->object_size, PORT_NATURAL_ALIGN); /* TODO: Alignment is not properly handled */
 8003246:	6858      	ldr	r0, [r3, #4]
 8003248:	2104      	movs	r1, #4
}
 800324a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    objp = mp->provider(mp->object_size, PORT_NATURAL_ALIGN); /* TODO: Alignment is not properly handled */
 800324e:	4710      	bx	r2
}
 8003250:	bd10      	pop	{r4, pc}
 8003252:	bf00      	nop
 8003254:	20002938 	.word	0x20002938
	...

08003260 <adc_lld_start_conversion.constprop.35>:
  const ADCConversionGroup *grpp = adcp->grpp;
 8003260:	4a24      	ldr	r2, [pc, #144]	; (80032f4 <adc_lld_start_conversion.constprop.35+0x94>)
 8003262:	6913      	ldr	r3, [r2, #16]
  if (grpp->circular) {
 8003264:	7819      	ldrb	r1, [r3, #0]
void adc_lld_start_conversion(ADCDriver *adcp) {
 8003266:	b5f0      	push	{r4, r5, r6, r7, lr}
  mode = adcp->dmamode;
 8003268:	6b14      	ldr	r4, [r2, #48]	; 0x30
  if (grpp->circular) {
 800326a:	2900      	cmp	r1, #0
 800326c:	d12e      	bne.n	80032cc <adc_lld_start_conversion.constprop.35+0x6c>
 800326e:	68d1      	ldr	r1, [r2, #12]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8003270:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8003272:	885d      	ldrh	r5, [r3, #2]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8003274:	6800      	ldr	r0, [r0, #0]
 8003276:	6896      	ldr	r6, [r2, #8]
 8003278:	60c6      	str	r6, [r0, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 800327a:	fb01 f105 	mul.w	r1, r1, r5
 800327e:	6041      	str	r1, [r0, #4]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8003280:	68d9      	ldr	r1, [r3, #12]
  dmaStreamSetMode(adcp->dmastp, mode);
 8003282:	6004      	str	r4, [r0, #0]
  dmaStreamEnable(adcp->dmastp);
 8003284:	6807      	ldr	r7, [r0, #0]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 8003286:	69de      	ldr	r6, [r3, #28]
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 8003288:	691c      	ldr	r4, [r3, #16]
  adcp->adc->SR    = 0;
 800328a:	6a92      	ldr	r2, [r2, #40]	; 0x28
  dmaStreamEnable(adcp->dmastp);
 800328c:	f047 0701 	orr.w	r7, r7, #1
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 8003290:	3d01      	subs	r5, #1
  dmaStreamEnable(adcp->dmastp);
 8003292:	6007      	str	r7, [r0, #0]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 8003294:	ea46 5505 	orr.w	r5, r6, r5, lsl #20
  adcp->adc->SMPR1 = grpp->smpr1;
 8003298:	695f      	ldr	r7, [r3, #20]
  adcp->adc->SMPR2 = grpp->smpr2;
 800329a:	699e      	ldr	r6, [r3, #24]
  adcp->adc->SQR2  = grpp->sqr2;
 800329c:	6a18      	ldr	r0, [r3, #32]
  adcp->adc->SQR3  = grpp->sqr3;
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 80032a0:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  adcp->adc->SR    = 0;
 80032a4:	f04f 0e00 	mov.w	lr, #0
 80032a8:	f8c2 e000 	str.w	lr, [r2]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 80032ac:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  adcp->adc->SMPR1 = grpp->smpr1;
 80032b0:	60d7      	str	r7, [r2, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
 80032b2:	6116      	str	r6, [r2, #16]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 80032b4:	62d5      	str	r5, [r2, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
 80032b6:	6310      	str	r0, [r2, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
 80032b8:	6353      	str	r3, [r2, #52]	; 0x34
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 80032ba:	0063      	lsls	r3, r4, #1
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 80032bc:	6051      	str	r1, [r2, #4]
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 80032be:	d40d      	bmi.n	80032dc <adc_lld_start_conversion.constprop.35+0x7c>
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 80032c0:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80032c4:	f044 0401 	orr.w	r4, r4, #1
    adcp->adc->CR2 = cr2;
 80032c8:	6094      	str	r4, [r2, #8]
 80032ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (adcp->depth > 1) {
 80032cc:	68d1      	ldr	r1, [r2, #12]
 80032ce:	2901      	cmp	r1, #1
    mode |= STM32_DMA_CR_CIRC;
 80032d0:	bf94      	ite	ls
 80032d2:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
      mode |= STM32_DMA_CR_HTIE;
 80032d6:	f444 7484 	orrhi.w	r4, r4, #264	; 0x108
 80032da:	e7c9      	b.n	8003270 <adc_lld_start_conversion.constprop.35+0x10>
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 80032dc:	f024 4380 	bic.w	r3, r4, #1073741824	; 0x40000000
 80032e0:	f240 3103 	movw	r1, #771	; 0x303
 80032e4:	f023 0302 	bic.w	r3, r3, #2
 80032e8:	430b      	orrs	r3, r1
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 80032ea:	430c      	orrs	r4, r1
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 80032ec:	6093      	str	r3, [r2, #8]
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 80032ee:	6094      	str	r4, [r2, #8]
 80032f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000a94 	.word	0x20000a94
	...

08003300 <chprintf.constprop.23>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8003300:	b40e      	push	{r1, r2, r3}
 8003302:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af0f      	add	r7, sp, #60	; 0x3c
 800330a:	4d9f      	ldr	r5, [pc, #636]	; (8003588 <chprintf.constprop.23+0x288>)
 800330c:	f857 6b04 	ldr.w	r6, [r7], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8003310:	9702      	str	r7, [sp, #8]
  int n = 0;
 8003312:	f04f 0b00 	mov.w	fp, #0
    c = *fmt++;
 8003316:	7831      	ldrb	r1, [r6, #0]
 8003318:	1c73      	adds	r3, r6, #1
    if (c == 0)
 800331a:	b161      	cbz	r1, 8003336 <chprintf.constprop.23+0x36>
    if (c != '%') {
 800331c:	2925      	cmp	r1, #37	; 0x25
 800331e:	d010      	beq.n	8003342 <chprintf.constprop.23+0x42>
      streamPut(chp, (uint8_t)c);
 8003320:	682a      	ldr	r2, [r5, #0]
 8003322:	4899      	ldr	r0, [pc, #612]	; (8003588 <chprintf.constprop.23+0x288>)
 8003324:	6892      	ldr	r2, [r2, #8]
    c = *fmt++;
 8003326:	461e      	mov	r6, r3
      streamPut(chp, (uint8_t)c);
 8003328:	4790      	blx	r2
    c = *fmt++;
 800332a:	7831      	ldrb	r1, [r6, #0]
      n++;
 800332c:	f10b 0b01 	add.w	fp, fp, #1
    c = *fmt++;
 8003330:	1c73      	adds	r3, r6, #1
    if (c == 0)
 8003332:	2900      	cmp	r1, #0
 8003334:	d1f2      	bne.n	800331c <chprintf.constprop.23+0x1c>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8003336:	4658      	mov	r0, fp
 8003338:	b006      	add	sp, #24
 800333a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333e:	b003      	add	sp, #12
 8003340:	4770      	bx	lr
    if (*fmt == '-') {
 8003342:	7872      	ldrb	r2, [r6, #1]
 8003344:	2a2d      	cmp	r2, #45	; 0x2d
 8003346:	bf03      	ittte	eq
 8003348:	78b2      	ldrbeq	r2, [r6, #2]
      fmt++;
 800334a:	1cb3      	addeq	r3, r6, #2
      left_align = TRUE;
 800334c:	f04f 0c01 	moveq.w	ip, #1
    left_align = FALSE;
 8003350:	f04f 0c00 	movne.w	ip, #0
    if (*fmt == '0') {
 8003354:	2a30      	cmp	r2, #48	; 0x30
 8003356:	bf03      	ittte	eq
 8003358:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 800335a:	3301      	addeq	r3, #1
      filler = '0';
 800335c:	f04f 0930 	moveq.w	r9, #48	; 0x30
    filler = ' ';
 8003360:	f04f 0920 	movne.w	r9, #32
 8003364:	1c59      	adds	r1, r3, #1
    width = 0;
 8003366:	2400      	movs	r4, #0
 8003368:	e005      	b.n	8003376 <chprintf.constprop.23+0x76>
        c = va_arg(ap, int);
 800336a:	783b      	ldrb	r3, [r7, #0]
 800336c:	3704      	adds	r7, #4
 800336e:	f811 2b01 	ldrb.w	r2, [r1], #1
      width = width * 10 + c;
 8003372:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
 8003376:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b09      	cmp	r3, #9
      c = *fmt++;
 800337e:	460e      	mov	r6, r1
      width = width * 10 + c;
 8003380:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
 8003384:	d9f3      	bls.n	800336e <chprintf.constprop.23+0x6e>
      else if (c == '*')
 8003386:	2a2a      	cmp	r2, #42	; 0x2a
 8003388:	d0ef      	beq.n	800336a <chprintf.constprop.23+0x6a>
    if (c == '.') {
 800338a:	2a2e      	cmp	r2, #46	; 0x2e
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	d043      	beq.n	800341a <chprintf.constprop.23+0x11a>
    if (c == 'l' || c == 'L') {
 8003392:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8003396:	2b4c      	cmp	r3, #76	; 0x4c
 8003398:	d04e      	beq.n	8003438 <chprintf.constprop.23+0x138>
    switch (c) {
 800339a:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 800339e:	2834      	cmp	r0, #52	; 0x34
 80033a0:	f200 8151 	bhi.w	8003646 <chprintf.constprop.23+0x346>
 80033a4:	e8df f010 	tbh	[pc, r0, lsl #1]
 80033a8:	014f00fe 	.word	0x014f00fe
 80033ac:	014f014f 	.word	0x014f014f
 80033b0:	00fe014f 	.word	0x00fe014f
 80033b4:	014f014f 	.word	0x014f014f
 80033b8:	014f014f 	.word	0x014f014f
 80033bc:	00f8014f 	.word	0x00f8014f
 80033c0:	014f014f 	.word	0x014f014f
 80033c4:	014f014f 	.word	0x014f014f
 80033c8:	0088014f 	.word	0x0088014f
 80033cc:	014f014f 	.word	0x014f014f
 80033d0:	014f00fb 	.word	0x014f00fb
 80033d4:	014f014f 	.word	0x014f014f
 80033d8:	014f014f 	.word	0x014f014f
 80033dc:	014f014f 	.word	0x014f014f
 80033e0:	014f014f 	.word	0x014f014f
 80033e4:	0143014f 	.word	0x0143014f
 80033e8:	014f00fe 	.word	0x014f00fe
 80033ec:	014f014f 	.word	0x014f014f
 80033f0:	00fe014f 	.word	0x00fe014f
 80033f4:	014f014f 	.word	0x014f014f
 80033f8:	014f014f 	.word	0x014f014f
 80033fc:	00f8014f 	.word	0x00f8014f
 8003400:	014f014f 	.word	0x014f014f
 8003404:	0129014f 	.word	0x0129014f
 8003408:	0088014f 	.word	0x0088014f
 800340c:	014f014f 	.word	0x014f014f
 8003410:	00fb      	.short	0x00fb
          c = va_arg(ap, int);
 8003412:	783b      	ldrb	r3, [r7, #0]
 8003414:	3704      	adds	r7, #4
        precision += c;
 8003416:	eb03 0140 	add.w	r1, r3, r0, lsl #1
        c = *fmt++;
 800341a:	f816 2b01 	ldrb.w	r2, [r6], #1
        if (c >= '0' && c <= '9')
 800341e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b09      	cmp	r3, #9
        precision *= 10;
 8003426:	eb01 0081 	add.w	r0, r1, r1, lsl #2
        if (c >= '0' && c <= '9')
 800342a:	d9f4      	bls.n	8003416 <chprintf.constprop.23+0x116>
        else if (c == '*')
 800342c:	2a2a      	cmp	r2, #42	; 0x2a
 800342e:	d0f0      	beq.n	8003412 <chprintf.constprop.23+0x112>
    if (c == 'l' || c == 'L') {
 8003430:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8003434:	2b4c      	cmp	r3, #76	; 0x4c
 8003436:	d1b0      	bne.n	800339a <chprintf.constprop.23+0x9a>
      if (*fmt)
 8003438:	7833      	ldrb	r3, [r6, #0]
 800343a:	b10b      	cbz	r3, 8003440 <chprintf.constprop.23+0x140>
        c = *fmt++;
 800343c:	3601      	adds	r6, #1
 800343e:	461a      	mov	r2, r3
    switch (c) {
 8003440:	f1a2 0344 	sub.w	r3, r2, #68	; 0x44
 8003444:	2b34      	cmp	r3, #52	; 0x34
 8003446:	f200 80fe 	bhi.w	8003646 <chprintf.constprop.23+0x346>
 800344a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800344e:	00ab      	.short	0x00ab
 8003450:	00fc00fc 	.word	0x00fc00fc
 8003454:	00fc00fc 	.word	0x00fc00fc
 8003458:	00fc00ab 	.word	0x00fc00ab
 800345c:	00fc00fc 	.word	0x00fc00fc
 8003460:	00fc00fc 	.word	0x00fc00fc
 8003464:	00fc00a5 	.word	0x00fc00a5
 8003468:	00fc00fc 	.word	0x00fc00fc
 800346c:	00fc00fc 	.word	0x00fc00fc
 8003470:	00fc0035 	.word	0x00fc0035
 8003474:	00a800fc 	.word	0x00a800fc
 8003478:	00fc00fc 	.word	0x00fc00fc
 800347c:	00fc00fc 	.word	0x00fc00fc
 8003480:	00fc00fc 	.word	0x00fc00fc
 8003484:	00fc00fc 	.word	0x00fc00fc
 8003488:	00fc00fc 	.word	0x00fc00fc
 800348c:	00ab00f0 	.word	0x00ab00f0
 8003490:	00fc00fc 	.word	0x00fc00fc
 8003494:	00fc00fc 	.word	0x00fc00fc
 8003498:	00fc00ab 	.word	0x00fc00ab
 800349c:	00fc00fc 	.word	0x00fc00fc
 80034a0:	00fc00fc 	.word	0x00fc00fc
 80034a4:	00fc00a5 	.word	0x00fc00a5
 80034a8:	00fc00fc 	.word	0x00fc00fc
 80034ac:	00fc00d6 	.word	0x00fc00d6
 80034b0:	00fc0035 	.word	0x00fc0035
 80034b4:	00a800fc 	.word	0x00a800fc
 80034b8:	f04f 080a 	mov.w	r8, #10
        l = va_arg(ap, unsigned int);
 80034bc:	683a      	ldr	r2, [r7, #0]
  q = p + MAX_FILLER;
 80034be:	f10d 0117 	add.w	r1, sp, #23
        l = va_arg(ap, unsigned int);
 80034c2:	3704      	adds	r7, #4
 80034c4:	e000      	b.n	80034c8 <chprintf.constprop.23+0x1c8>
  } while ((ll /= radix) != 0);
 80034c6:	4601      	mov	r1, r0
    i = (int)(l % radix);
 80034c8:	fbb2 fef8 	udiv	lr, r2, r8
 80034cc:	fb08 221e 	mls	r2, r8, lr, r2
    i += '0';
 80034d0:	f102 0330 	add.w	r3, r2, #48	; 0x30
    if (i > '9')
 80034d4:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 80034d6:	bfc8      	it	gt
 80034d8:	f102 0337 	addgt.w	r3, r2, #55	; 0x37
    *--q = i;
 80034dc:	b2db      	uxtb	r3, r3
    l /= radix;
 80034de:	4672      	mov	r2, lr
    *--q = i;
 80034e0:	f801 3c01 	strb.w	r3, [r1, #-1]
 80034e4:	1e48      	subs	r0, r1, #1
  } while ((ll /= radix) != 0);
 80034e6:	2a00      	cmp	r2, #0
 80034e8:	d1ed      	bne.n	80034c6 <chprintf.constprop.23+0x1c6>
  i = (int)(p + MAX_FILLER - q);
 80034ea:	f10d 0217 	add.w	r2, sp, #23
 80034ee:	f10d 080c 	add.w	r8, sp, #12
 80034f2:	1a12      	subs	r2, r2, r0
 80034f4:	46c6      	mov	lr, r8
 80034f6:	4410      	add	r0, r2
 80034f8:	e001      	b.n	80034fe <chprintf.constprop.23+0x1fe>
 80034fa:	f811 3b01 	ldrb.w	r3, [r1], #1
    *p++ = *q++;
 80034fe:	f80e 3b01 	strb.w	r3, [lr], #1
  while (--i);
 8003502:	4288      	cmp	r0, r1
 8003504:	d1f9      	bne.n	80034fa <chprintf.constprop.23+0x1fa>
 8003506:	1e53      	subs	r3, r2, #1
 8003508:	9301      	str	r3, [sp, #4]
    if ((width -= i) < 0)
 800350a:	1aa4      	subs	r4, r4, r2
 800350c:	d43e      	bmi.n	800358c <chprintf.constprop.23+0x28c>
    if (left_align == FALSE)
 800350e:	f1bc 0f00 	cmp.w	ip, #0
 8003512:	f040 80a1 	bne.w	8003658 <chprintf.constprop.23+0x358>
 8003516:	f1c4 0a00 	rsb	sl, r4, #0
    if (width < 0) {
 800351a:	2c00      	cmp	r4, #0
 800351c:	f000 809b 	beq.w	8003656 <chprintf.constprop.23+0x356>
      if (*s == '-' && filler == '0') {
 8003520:	f898 1000 	ldrb.w	r1, [r8]
 8003524:	292d      	cmp	r1, #45	; 0x2d
 8003526:	f000 80a6 	beq.w	8003676 <chprintf.constprop.23+0x376>
        streamPut(chp, (uint8_t)filler);
 800352a:	682b      	ldr	r3, [r5, #0]
 800352c:	4649      	mov	r1, r9
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4628      	mov	r0, r5
 8003532:	4798      	blx	r3
      } while (++width != 0);
 8003534:	f11a 0a01 	adds.w	sl, sl, #1
 8003538:	d1f7      	bne.n	800352a <chprintf.constprop.23+0x22a>
    while (--i >= 0) {
 800353a:	9b01      	ldr	r3, [sp, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	44a3      	add	fp, r4
 8003540:	bfa8      	it	ge
 8003542:	4654      	movge	r4, sl
 8003544:	f6ff aee7 	blt.w	8003316 <chprintf.constprop.23+0x16>
 8003548:	f8dd a004 	ldr.w	sl, [sp, #4]
      streamPut(chp, (uint8_t)*s++);
 800354c:	682b      	ldr	r3, [r5, #0]
 800354e:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003552:	689b      	ldr	r3, [r3, #8]
    while (--i >= 0) {
 8003554:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)*s++);
 8003558:	4628      	mov	r0, r5
 800355a:	4798      	blx	r3
    while (--i >= 0) {
 800355c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8003560:	d1f4      	bne.n	800354c <chprintf.constprop.23+0x24c>
 8003562:	9b01      	ldr	r3, [sp, #4]
 8003564:	f10b 0b01 	add.w	fp, fp, #1
 8003568:	449b      	add	fp, r3
    while (width) {
 800356a:	2c00      	cmp	r4, #0
 800356c:	f43f aed3 	beq.w	8003316 <chprintf.constprop.23+0x16>
 8003570:	46a0      	mov	r8, r4
      streamPut(chp, (uint8_t)filler);
 8003572:	682b      	ldr	r3, [r5, #0]
 8003574:	4649      	mov	r1, r9
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4628      	mov	r0, r5
 800357a:	4798      	blx	r3
    while (width) {
 800357c:	f1b8 0801 	subs.w	r8, r8, #1
 8003580:	d1f7      	bne.n	8003572 <chprintf.constprop.23+0x272>
 8003582:	44a3      	add	fp, r4
 8003584:	e6c7      	b.n	8003316 <chprintf.constprop.23+0x16>
 8003586:	bf00      	nop
 8003588:	20000ae4 	.word	0x20000ae4
    while (--i >= 0) {
 800358c:	9b01      	ldr	r3, [sp, #4]
 800358e:	2b00      	cmp	r3, #0
      width = 0;
 8003590:	bfa8      	it	ge
 8003592:	2400      	movge	r4, #0
    while (--i >= 0) {
 8003594:	dad8      	bge.n	8003548 <chprintf.constprop.23+0x248>
 8003596:	e6be      	b.n	8003316 <chprintf.constprop.23+0x16>
    switch (c) {
 8003598:	f04f 0808 	mov.w	r8, #8
 800359c:	e78e      	b.n	80034bc <chprintf.constprop.23+0x1bc>
 800359e:	f04f 0810 	mov.w	r8, #16
 80035a2:	e78b      	b.n	80034bc <chprintf.constprop.23+0x1bc>
        l = va_arg(ap, int);
 80035a4:	6839      	ldr	r1, [r7, #0]
      if (l < 0) {
 80035a6:	2900      	cmp	r1, #0
        l = va_arg(ap, int);
 80035a8:	f107 0704 	add.w	r7, r7, #4
      if (l < 0) {
 80035ac:	db73      	blt.n	8003696 <chprintf.constprop.23+0x396>
    p = tmpbuf;
 80035ae:	f10d 080c 	add.w	r8, sp, #12
 80035b2:	4642      	mov	r2, r8
  q = p + MAX_FILLER;
 80035b4:	f102 030b 	add.w	r3, r2, #11
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	4618      	mov	r0, r3
    i = (int)(l % radix);
 80035bc:	4b3e      	ldr	r3, [pc, #248]	; (80036b8 <chprintf.constprop.23+0x3b8>)
 80035be:	fba3 e301 	umull	lr, r3, r3, r1
 80035c2:	08db      	lsrs	r3, r3, #3
 80035c4:	eb03 0a83 	add.w	sl, r3, r3, lsl #2
 80035c8:	469e      	mov	lr, r3
 80035ca:	eba1 034a 	sub.w	r3, r1, sl, lsl #1
    i += '0';
 80035ce:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 80035d0:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 80035d2:	4671      	mov	r1, lr
    *--q = i;
 80035d4:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
 80035d8:	2900      	cmp	r1, #0
 80035da:	d1ef      	bne.n	80035bc <chprintf.constprop.23+0x2bc>
  i = (int)(p + MAX_FILLER - q);
 80035dc:	9901      	ldr	r1, [sp, #4]
 80035de:	1a09      	subs	r1, r1, r0
 80035e0:	4411      	add	r1, r2
 80035e2:	e001      	b.n	80035e8 <chprintf.constprop.23+0x2e8>
 80035e4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
 80035e8:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 80035ec:	428a      	cmp	r2, r1
 80035ee:	d1f9      	bne.n	80035e4 <chprintf.constprop.23+0x2e4>
 80035f0:	eba2 0208 	sub.w	r2, r2, r8
 80035f4:	1e53      	subs	r3, r2, #1
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	e787      	b.n	800350a <chprintf.constprop.23+0x20a>
      if ((s = va_arg(ap, char *)) == 0)
 80035fa:	f8d7 8000 	ldr.w	r8, [r7]
 80035fe:	3704      	adds	r7, #4
 8003600:	f1b8 0f00 	cmp.w	r8, #0
 8003604:	d050      	beq.n	80036a8 <chprintf.constprop.23+0x3a8>
      for (p = s; *p && (--precision >= 0); p++)
 8003606:	f898 3000 	ldrb.w	r3, [r8]
      if (precision == 0)
 800360a:	b351      	cbz	r1, 8003662 <chprintf.constprop.23+0x362>
      for (p = s; *p && (--precision >= 0); p++)
 800360c:	b36b      	cbz	r3, 800366a <chprintf.constprop.23+0x36a>
 800360e:	3901      	subs	r1, #1
 8003610:	4642      	mov	r2, r8
 8003612:	e001      	b.n	8003618 <chprintf.constprop.23+0x318>
 8003614:	3901      	subs	r1, #1
 8003616:	d403      	bmi.n	8003620 <chprintf.constprop.23+0x320>
 8003618:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f9      	bne.n	8003614 <chprintf.constprop.23+0x314>
 8003620:	eba2 0208 	sub.w	r2, r2, r8
 8003624:	1e53      	subs	r3, r2, #1
 8003626:	9301      	str	r3, [sp, #4]
      filler = ' ';
 8003628:	f04f 0920 	mov.w	r9, #32
 800362c:	e76d      	b.n	800350a <chprintf.constprop.23+0x20a>
      *p++ = va_arg(ap, int);
 800362e:	f10d 0818 	add.w	r8, sp, #24
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	f808 3d0c 	strb.w	r3, [r8, #-12]!
 8003638:	2300      	movs	r3, #0
 800363a:	3704      	adds	r7, #4
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	2201      	movs	r2, #1
      filler = ' ';
 8003640:	f04f 0920 	mov.w	r9, #32
 8003644:	e761      	b.n	800350a <chprintf.constprop.23+0x20a>
      *p++ = c;
 8003646:	f10d 0818 	add.w	r8, sp, #24
 800364a:	2300      	movs	r3, #0
 800364c:	f808 2d0c 	strb.w	r2, [r8, #-12]!
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	e759      	b.n	800350a <chprintf.constprop.23+0x20a>
    if (width < 0) {
 8003656:	4654      	mov	r4, sl
    while (--i >= 0) {
 8003658:	9b01      	ldr	r3, [sp, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f6bf af74 	bge.w	8003548 <chprintf.constprop.23+0x248>
 8003660:	e783      	b.n	800356a <chprintf.constprop.23+0x26a>
      for (p = s; *p && (--precision >= 0); p++)
 8003662:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1d2      	bne.n	8003610 <chprintf.constprop.23+0x310>
 800366a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	f04f 0920 	mov.w	r9, #32
 8003674:	e74b      	b.n	800350e <chprintf.constprop.23+0x20e>
      if (*s == '-' && filler == '0') {
 8003676:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 800367a:	f47f af56 	bne.w	800352a <chprintf.constprop.23+0x22a>
        streamPut(chp, (uint8_t)*s++);
 800367e:	682a      	ldr	r2, [r5, #0]
 8003680:	480e      	ldr	r0, [pc, #56]	; (80036bc <chprintf.constprop.23+0x3bc>)
 8003682:	6892      	ldr	r2, [r2, #8]
 8003684:	4790      	blx	r2
 8003686:	9b01      	ldr	r3, [sp, #4]
 8003688:	3b01      	subs	r3, #1
 800368a:	f108 0801 	add.w	r8, r8, #1
        n++;
 800368e:	f10b 0b01 	add.w	fp, fp, #1
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	e749      	b.n	800352a <chprintf.constprop.23+0x22a>
        *p++ = '-';
 8003696:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8003698:	4249      	negs	r1, r1
        *p++ = '-';
 800369a:	f88d 300c 	strb.w	r3, [sp, #12]
 800369e:	f10d 020d 	add.w	r2, sp, #13
 80036a2:	f10d 080c 	add.w	r8, sp, #12
 80036a6:	e785      	b.n	80035b4 <chprintf.constprop.23+0x2b4>
        s = "(null)";
 80036a8:	f8df 8014 	ldr.w	r8, [pc, #20]	; 80036c0 <chprintf.constprop.23+0x3c0>
      if (precision == 0)
 80036ac:	2900      	cmp	r1, #0
 80036ae:	d1ae      	bne.n	800360e <chprintf.constprop.23+0x30e>
        precision = 32767;
 80036b0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80036b4:	e7ab      	b.n	800360e <chprintf.constprop.23+0x30e>
 80036b6:	bf00      	nop
 80036b8:	cccccccd 	.word	0xcccccccd
 80036bc:	20000ae4 	.word	0x20000ae4
 80036c0:	08005028 	.word	0x08005028
	...

080036d0 <_ZN16ThreePhaseDriver12enableOutputEv.constprop.5>:
void ThreePhaseDriver::enableOutput(void) {
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036d2:	f3ef 8411 	mrs	r4, BASEPRI
 80036d6:	b90c      	cbnz	r4, 80036dc <_ZN16ThreePhaseDriver12enableOutputEv.constprop.5+0xc>
 80036d8:	f7fe f84a 	bl	8001770 <chSysGetStatusAndLockX.part.1>
  if (mode == THREEPHASE_MODE_SIN)
 80036dc:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <_ZN16ThreePhaseDriver12enableOutputEv.constprop.5+0x40>)
 80036de:	f8b3 325c 	ldrh.w	r3, [r3, #604]	; 0x25c
 80036e2:	b983      	cbnz	r3, 8003706 <_ZN16ThreePhaseDriver12enableOutputEv.constprop.5+0x36>
    pwmEnableChannelI(&PWMD8, 0, 0);
 80036e4:	490b      	ldr	r1, [pc, #44]	; (8003714 <_ZN16ThreePhaseDriver12enableOutputEv.constprop.5+0x44>)
    palSetPad(GPIOA, 6);
 80036e6:	4d0c      	ldr	r5, [pc, #48]	; (8003718 <_ZN16ThreePhaseDriver12enableOutputEv.constprop.5+0x48>)
    pwmEnableChannelI(&PWMD8, 0, 0);
 80036e8:	68c8      	ldr	r0, [r1, #12]
  pwmp->tim->CCR[channel] = width;
 80036ea:	698a      	ldr	r2, [r1, #24]
    palSetPad(GPIOB, 1);
 80036ec:	4e0b      	ldr	r6, [pc, #44]	; (800371c <_ZN16ThreePhaseDriver12enableOutputEv.constprop.5+0x4c>)
 80036ee:	6353      	str	r3, [r2, #52]	; 0x34
    pwmEnableChannelI(&PWMD8, 3, 0);
 80036f0:	f040 000d 	orr.w	r0, r0, #13
 80036f4:	60c8      	str	r0, [r1, #12]
    palSetPad(GPIOA, 6);
 80036f6:	2740      	movs	r7, #64	; 0x40
    palSetPad(GPIOA, 7);
 80036f8:	2080      	movs	r0, #128	; 0x80
    palSetPad(GPIOB, 1);
 80036fa:	2102      	movs	r1, #2
 80036fc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80036fe:	6413      	str	r3, [r2, #64]	; 0x40
    palSetPad(GPIOA, 6);
 8003700:	832f      	strh	r7, [r5, #24]
    palSetPad(GPIOA, 7);
 8003702:	8328      	strh	r0, [r5, #24]
    palSetPad(GPIOB, 1);
 8003704:	8331      	strh	r1, [r6, #24]
  chSysRestoreStatusX(sts);
 8003706:	4620      	mov	r0, r4
}
 8003708:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chSysRestoreStatusX(sts);
 800370c:	f7fe b840 	b.w	8001790 <chSysRestoreStatusX>
 8003710:	20000de0 	.word	0x20000de0
 8003714:	20000ac8 	.word	0x20000ac8
 8003718:	40020000 	.word	0x40020000
 800371c:	40020400 	.word	0x40020400

08003720 <_ZSt13__adjust_heapIPtitN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.constprop.0>:
      while (__secondChild < (__len - 1) / 2)
 8003720:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8003724:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
 8003728:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 800372c:	4561      	cmp	r1, ip
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800372e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      while (__secondChild < (__len - 1) / 2)
 8003732:	da4c      	bge.n	80037ce <_ZSt13__adjust_heapIPtitN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.constprop.0+0xae>
 8003734:	460c      	mov	r4, r1
	  if (__comp(__first + __secondChild,
 8003736:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
	  __secondChild = 2 * (__secondChild + 1);
 800373a:	1c66      	adds	r6, r4, #1
 800373c:	0074      	lsls	r4, r6, #1
	  if (__comp(__first + __secondChild,
 800373e:	eb04 0508 	add.w	r5, r4, r8
 8003742:	f830 7026 	ldrh.w	r7, [r0, r6, lsl #2]
 8003746:	f830 e015 	ldrh.w	lr, [r0, r5, lsl #1]
 800374a:	4625      	mov	r5, r4
 800374c:	4577      	cmp	r7, lr
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800374e:	4405      	add	r5, r0
	  if (__comp(__first + __secondChild,
 8003750:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8003754:	da04      	bge.n	8003760 <_ZSt13__adjust_heapIPtitN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.constprop.0+0x40>
	    __secondChild--;
 8003756:	3c01      	subs	r4, #1
 8003758:	eb00 0644 	add.w	r6, r0, r4, lsl #1
 800375c:	f830 7014 	ldrh.w	r7, [r0, r4, lsl #1]
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8003760:	f825 7c02 	strh.w	r7, [r5, #-2]
      while (__secondChild < (__len - 1) / 2)
 8003764:	4564      	cmp	r4, ip
 8003766:	dbe8      	blt.n	800373a <_ZSt13__adjust_heapIPtitN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.constprop.0+0x1a>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8003768:	07d5      	lsls	r5, r2, #31
 800376a:	d405      	bmi.n	8003778 <_ZSt13__adjust_heapIPtitN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.constprop.0+0x58>
 800376c:	3a02      	subs	r2, #2
 800376e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8003772:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 8003776:	d01e      	beq.n	80037b6 <_ZSt13__adjust_heapIPtitN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.constprop.0+0x96>
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003778:	428c      	cmp	r4, r1
 800377a:	dd19      	ble.n	80037b0 <_ZSt13__adjust_heapIPtitN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.constprop.0+0x90>
      _Distance __parent = (__holeIndex - 1) / 2;
 800377c:	1e65      	subs	r5, r4, #1
 800377e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003782:	106d      	asrs	r5, r5, #1
 8003784:	f830 7015 	ldrh.w	r7, [r0, r5, lsl #1]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003788:	429f      	cmp	r7, r3
 800378a:	da11      	bge.n	80037b0 <_ZSt13__adjust_heapIPtitN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.constprop.0+0x90>
	  __parent = (__holeIndex - 1) / 2;
 800378c:	1e6a      	subs	r2, r5, #1
 800378e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003792:	42a9      	cmp	r1, r5
	  __parent = (__holeIndex - 1) / 2;
 8003794:	ea4f 0262 	mov.w	r2, r2, asr #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8003798:	f820 7014 	strh.w	r7, [r0, r4, lsl #1]
 800379c:	eb00 0645 	add.w	r6, r0, r5, lsl #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80037a0:	da06      	bge.n	80037b0 <_ZSt13__adjust_heapIPtitN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.constprop.0+0x90>
 80037a2:	f830 7012 	ldrh.w	r7, [r0, r2, lsl #1]
 80037a6:	429f      	cmp	r7, r3
 80037a8:	da02      	bge.n	80037b0 <_ZSt13__adjust_heapIPtitN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.constprop.0+0x90>
 80037aa:	462c      	mov	r4, r5
	  __parent = (__holeIndex - 1) / 2;
 80037ac:	4615      	mov	r5, r2
 80037ae:	e7ed      	b.n	800378c <_ZSt13__adjust_heapIPtitN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.constprop.0+0x6c>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80037b0:	8033      	strh	r3, [r6, #0]
 80037b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  __secondChild = 2 * (__secondChild + 1);
 80037b6:	3401      	adds	r4, #1
 80037b8:	0064      	lsls	r4, r4, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 80037ba:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 80037be:	3a01      	subs	r2, #1
	  __holeIndex = __secondChild - 1;
 80037c0:	3c01      	subs	r4, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 80037c2:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80037c6:	8032      	strh	r2, [r6, #0]
 80037c8:	eb00 0644 	add.w	r6, r0, r4, lsl #1
 80037cc:	e7d4      	b.n	8003778 <_ZSt13__adjust_heapIPtitN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.constprop.0+0x58>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 80037ce:	07d4      	lsls	r4, r2, #31
 80037d0:	eb00 0641 	add.w	r6, r0, r1, lsl #1
 80037d4:	d4ec      	bmi.n	80037b0 <_ZSt13__adjust_heapIPtitN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.constprop.0+0x90>
 80037d6:	460c      	mov	r4, r1
 80037d8:	e7c8      	b.n	800376c <_ZSt13__adjust_heapIPtitN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.constprop.0+0x4c>
 80037da:	bf00      	nop
 80037dc:	0000      	movs	r0, r0
	...

080037e0 <chThdCreateStatic.constprop.64>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 80037e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037e4:	4698      	mov	r8, r3
 80037e6:	4607      	mov	r7, r0
 80037e8:	460c      	mov	r4, r1
 80037ea:	4615      	mov	r5, r2
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80037ec:	2320      	movs	r3, #32
 80037ee:	f383 8811 	msr	BASEPRI, r3
  tp = (thread_t *)((uint8_t *)wsp + size -
 80037f2:	3c48      	subs	r4, #72	; 0x48
 80037f4:	443c      	add	r4, r7
  _dbg_check_lock();
 80037f6:	f7fd fd6b 	bl	80012d0 <_dbg_check_lock>
  REG_INSERT(tp);
 80037fa:	4919      	ldr	r1, [pc, #100]	; (8003860 <chThdCreateStatic.constprop.64+0x80>)
 80037fc:	6121      	str	r1, [r4, #16]
 80037fe:	694e      	ldr	r6, [r1, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8003800:	4a18      	ldr	r2, [pc, #96]	; (8003864 <chThdCreateStatic.constprop.64+0x84>)
  tp->prio      = prio;
 8003802:	60a5      	str	r5, [r4, #8]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8003804:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
  tp->state     = CH_STATE_WTSTART;
 8003808:	2302      	movs	r3, #2
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800380a:	60e0      	str	r0, [r4, #12]
 800380c:	f844 2c24 	str.w	r2, [r4, #-36]
 8003810:	f8df e058 	ldr.w	lr, [pc, #88]	; 800386c <chThdCreateStatic.constprop.64+0x8c>
  tp->wabase = (stkalign_t *)wsp;
 8003814:	61e7      	str	r7, [r4, #28]
  tp->realprio  = prio;
 8003816:	63e5      	str	r5, [r4, #60]	; 0x3c
  list_init(&tp->waiting);
 8003818:	f104 0228 	add.w	r2, r4, #40	; 0x28
  tp->flags     = CH_FLAG_MODE_STATIC;
 800381c:	2500      	movs	r5, #0
  tp->state     = CH_STATE_WTSTART;
 800381e:	f884 3020 	strb.w	r3, [r4, #32]
  tp->refs      = (trefs_t)1;
 8003822:	2701      	movs	r7, #1
  queue_init(&tp->msgqueue);
 8003824:	f104 032c 	add.w	r3, r4, #44	; 0x2c
  tp->name      = name;
 8003828:	480f      	ldr	r0, [pc, #60]	; (8003868 <chThdCreateStatic.constprop.64+0x88>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800382a:	f844 ec04 	str.w	lr, [r4, #-4]
 800382e:	f844 8c20 	str.w	r8, [r4, #-32]
  tp->name      = name;
 8003832:	61a0      	str	r0, [r4, #24]
  REG_INSERT(tp);
 8003834:	6166      	str	r6, [r4, #20]
  tp->refs      = (trefs_t)1;
 8003836:	f884 7022 	strb.w	r7, [r4, #34]	; 0x22
  tp->flags     = CH_FLAG_MODE_STATIC;
 800383a:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
  tp->mtxlist   = NULL;
 800383e:	63a5      	str	r5, [r4, #56]	; 0x38
  tp->epending  = (eventmask_t)0;
 8003840:	6365      	str	r5, [r4, #52]	; 0x34
  chSchWakeupS(tp, MSG_OK);
 8003842:	4620      	mov	r0, r4
  REG_INSERT(tp);
 8003844:	6134      	str	r4, [r6, #16]
  tlp->next = (thread_t *)tlp;
 8003846:	62a2      	str	r2, [r4, #40]	; 0x28
  tqp->next = (thread_t *)tqp;
 8003848:	62e3      	str	r3, [r4, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
 800384a:	6323      	str	r3, [r4, #48]	; 0x30
 800384c:	614c      	str	r4, [r1, #20]
  chSchWakeupS(tp, MSG_OK);
 800384e:	f7ff fca7 	bl	80031a0 <chSchWakeupS.constprop.70>
  _dbg_check_unlock();
 8003852:	f7fd fd2d 	bl	80012b0 <_dbg_check_unlock>
 8003856:	f385 8811 	msr	BASEPRI, r5
}
 800385a:	4620      	mov	r0, r4
 800385c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003860:	20003164 	.word	0x20003164
 8003864:	08001861 	.word	0x08001861
 8003868:	08005020 	.word	0x08005020
 800386c:	08000301 	.word	0x08000301

08003870 <_ZN10chibios_rt16BaseStaticThreadILi512EE5startEm>:
    virtual ThreadReference start(tprio_t prio) {
 8003870:	b538      	push	{r3, r4, r5, lr}
 8003872:	4604      	mov	r4, r0
 8003874:	460d      	mov	r5, r1
      thread_ref = chThdCreateStatic(wa, sizeof(wa), prio, _thd_start, this);
 8003876:	460b      	mov	r3, r1
 8003878:	f101 0008 	add.w	r0, r1, #8
 800387c:	f44f 7154 	mov.w	r1, #848	; 0x350
 8003880:	f7ff ffae 	bl	80037e0 <chThdCreateStatic.constprop.64>
  class ThreadReference {
 8003884:	4a03      	ldr	r2, [pc, #12]	; (8003894 <_ZN10chibios_rt16BaseStaticThreadILi512EE5startEm+0x24>)
      thread_ref = chThdCreateStatic(wa, sizeof(wa), prio, _thd_start, this);
 8003886:	6068      	str	r0, [r5, #4]
 8003888:	4603      	mov	r3, r0
  class ThreadReference {
 800388a:	e884 000c 	stmia.w	r4, {r2, r3}
    }
 800388e:	4620      	mov	r0, r4
 8003890:	bd38      	pop	{r3, r4, r5, pc}
 8003892:	bf00      	nop
 8003894:	0800501c 	.word	0x0800501c
	...

080038a0 <_ZN12ControllerTh4mainEv>:
uint16_t ControllerTh::getPhase() {
  return setPhase;
}


void ControllerTh::main(void) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	4605      	mov	r5, r0

  chEvtObjectInit(&controller_event_source);
 80038a4:	f500 7764 	add.w	r7, r0, #912	; 0x390

  eventmask_t evt; // the currently triggered events (mask of all the events that triggered)
  eventflags_t  flags; // used to store the flags that come with the relevant event

  // register to listen for certain events
  chEvtRegisterMaskWithFlags(&currentThread.current_event_source, &current_listener, CURRENT_EVENT, CURRENT_EVT_UPDATEAMPLITUDE | CURRENT_EVT_ERROR);
 80038a8:	f8d0 0358 	ldr.w	r0, [r0, #856]	; 0x358
 80038ac:	f8c5 7390 	str.w	r7, [r5, #912]	; 0x390
void ControllerTh::main(void) {
 80038b0:	b08a      	sub	sp, #40	; 0x28
  chEvtRegisterMaskWithFlags(&currentThread.current_event_source, &current_listener, CURRENT_EVENT, CURRENT_EVT_UPDATEAMPLITUDE | CURRENT_EVT_ERROR);
 80038b2:	f500 60f8 	add.w	r0, r0, #1984	; 0x7c0
 80038b6:	2306      	movs	r3, #6
 80038b8:	2201      	movs	r2, #1
 80038ba:	a905      	add	r1, sp, #20
 80038bc:	f7fd fef8 	bl	80016b0 <chEvtRegisterMaskWithFlags>
  chEvtRegisterMask(&testerThread.tester_event_source, &tester_listener, TESTER_EVENT);
 80038c0:	f8d5 035c 	ldr.w	r0, [r5, #860]	; 0x35c
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 80038c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038c8:	f500 70ee 	add.w	r0, r0, #476	; 0x1dc
 80038cc:	2202      	movs	r2, #2
 80038ce:	4669      	mov	r1, sp
 80038d0:	f7fd feee 	bl	80016b0 <chEvtRegisterMaskWithFlags>
  // each source needs a different listener and we need to register it

  if (mode == 1) {
 80038d4:	f8b5 338e 	ldrh.w	r3, [r5, #910]	; 0x38e
 80038d8:	2b01      	cmp	r3, #1
 80038da:	f000 80bd 	beq.w	8003a58 <_ZN12ControllerTh4mainEv+0x1b8>

      }
      chThdSleepMicroseconds(delay); //extra delay since the next loop will instantly trigger
      mode = 2;
  }
  palSetPad(GPIOA, GPIOA_LED_GREEN);
 80038de:	4b7f      	ldr	r3, [pc, #508]	; (8003adc <_ZN12ControllerTh4mainEv+0x23c>)
            if (setPhase > 720)
              setPhase = 720;
            outputFlags |= CONTROLLER_EVT_NEWPHASE;
          } else {
              // in normal mode, ignore the phase set in test thread
              setPhase = (setPhase + 1) % 6;
 80038e0:	4e7f      	ldr	r6, [pc, #508]	; (8003ae0 <_ZN12ControllerTh4mainEv+0x240>)
                    if (setAmplitude > 512)
 80038e2:	ed9f 8a80 	vldr	s16, [pc, #512]	; 8003ae4 <_ZN12ControllerTh4mainEv+0x244>
                    else if (setAmplitude < 0)
 80038e6:	eddf 8a80 	vldr	s17, [pc, #512]	; 8003ae8 <_ZN12ControllerTh4mainEv+0x248>
  palSetPad(GPIOA, GPIOA_LED_GREEN);
 80038ea:	2220      	movs	r2, #32
 80038ec:	831a      	strh	r2, [r3, #24]
 80038ee:	f04f 0a20 	mov.w	sl, #32
 80038f2:	f04f 0800 	mov.w	r8, #0
    return chEvtWaitAny(ewmask);
 80038f6:	2003      	movs	r0, #3
 80038f8:	f7fd feaa 	bl	8001650 <chEvtWaitAny>
      if (evt & CURRENT_EVENT) {
 80038fc:	07c1      	lsls	r1, r0, #31
 80038fe:	4604      	mov	r4, r0
 8003900:	d42e      	bmi.n	8003960 <_ZN12ControllerTh4mainEv+0xc0>
      if (evt & TESTER_EVENT) {
 8003902:	07a2      	lsls	r2, r4, #30
 8003904:	d5f7      	bpl.n	80038f6 <_ZN12ControllerTh4mainEv+0x56>
      chThdSleepMicroseconds(delay);
 8003906:	2402      	movs	r4, #2
 8003908:	f04f 0820 	mov.w	r8, #32
 800390c:	f388 8811 	msr	BASEPRI, r8
 8003910:	f04f 0900 	mov.w	r9, #0
  _dbg_check_lock();
 8003914:	f7fd fcdc 	bl	80012d0 <_dbg_check_lock>
 8003918:	f8cd 900c 	str.w	r9, [sp, #12]
  _dbg_check_unlock();
 800391c:	f7fd fcc8 	bl	80012b0 <_dbg_check_unlock>
 8003920:	f389 8811 	msr	BASEPRI, r9
 8003924:	f388 8811 	msr	BASEPRI, r8
  _dbg_check_lock();
 8003928:	f7fd fcd2 	bl	80012d0 <_dbg_check_lock>
          if (mode == 0) {
 800392c:	f8b5 338e 	ldrh.w	r3, [r5, #910]	; 0x38e
 8003930:	b363      	cbz	r3, 800398c <_ZN12ControllerTh4mainEv+0xec>
              setPhase = (setPhase + 1) % 6;
 8003932:	f8b5 338c 	ldrh.w	r3, [r5, #908]	; 0x38c
 8003936:	3301      	adds	r3, #1
 8003938:	fb86 1203 	smull	r1, r2, r6, r3
 800393c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003940:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003944:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8003948:	f8a5 338c 	strh.w	r3, [r5, #908]	; 0x38c
  _dbg_check_unlock();
 800394c:	f7fd fcb0 	bl	80012b0 <_dbg_check_unlock>
 8003950:	2300      	movs	r3, #0
 8003952:	f383 8811 	msr	BASEPRI, r3
          }
          System::unlock();
      }

      if (outputFlags) { //if we have anything to say, say it now
          chEvtBroadcastFlags(&controller_event_source, outputFlags);
 8003956:	4621      	mov	r1, r4
 8003958:	4638      	mov	r0, r7
 800395a:	f7fd fe99 	bl	8001690 <chEvtBroadcastFlags>
 800395e:	e7c6      	b.n	80038ee <_ZN12ControllerTh4mainEv+0x4e>
 8003960:	f38a 8811 	msr	BASEPRI, sl
  _dbg_check_lock();
 8003964:	f7fd fcb4 	bl	80012d0 <_dbg_check_lock>
  flags = elp->flags;
 8003968:	f8dd 9020 	ldr.w	r9, [sp, #32]
  elp->flags = (eventflags_t)0;
 800396c:	f8cd 8020 	str.w	r8, [sp, #32]
  _dbg_check_unlock();
 8003970:	f7fd fc9e 	bl	80012b0 <_dbg_check_unlock>
 8003974:	f388 8811 	msr	BASEPRI, r8
          if (flags & CURRENT_EVT_UPDATEAMPLITUDE) {
 8003978:	f019 0f02 	tst.w	r9, #2
 800397c:	d0c1      	beq.n	8003902 <_ZN12ControllerTh4mainEv+0x62>
              if (mode == 0) {
 800397e:	f8b5 338e 	ldrh.w	r3, [r5, #910]	; 0x38e
 8003982:	b18b      	cbz	r3, 80039a8 <_ZN12ControllerTh4mainEv+0x108>
      if (evt & TESTER_EVENT) {
 8003984:	07a3      	lsls	r3, r4, #30
 8003986:	d40d      	bmi.n	80039a4 <_ZN12ControllerTh4mainEv+0x104>
              outputFlags |= CONTROLLER_EVT_NEWAMP;
 8003988:	2401      	movs	r4, #1
 800398a:	e7e4      	b.n	8003956 <_ZN12ControllerTh4mainEv+0xb6>
TesterThread::TesterThread() : phase(0) {
  chEvtObjectInit(&tester_event_source);
}

uint16_t TesterThread::getPhase() {
  return phase;
 800398c:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
 8003990:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
            if (setPhase > 720)
 8003994:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8003998:	ddd6      	ble.n	8003948 <_ZN12ControllerTh4mainEv+0xa8>
              setPhase = 720;
 800399a:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 800399e:	f8a5 338c 	strh.w	r3, [r5, #908]	; 0x38c
 80039a2:	e7d3      	b.n	800394c <_ZN12ControllerTh4mainEv+0xac>
      chThdSleepMicroseconds(delay);
 80039a4:	2403      	movs	r4, #3
 80039a6:	e7af      	b.n	8003908 <_ZN12ControllerTh4mainEv+0x68>
 80039a8:	f38a 8811 	msr	BASEPRI, sl
  _dbg_check_lock();
 80039ac:	f7fd fc90 	bl	80012d0 <_dbg_check_lock>
  return filterOutput;
 80039b0:	f8d5 3358 	ldr.w	r3, [r5, #856]	; 0x358
                currentError = currentSetPoint - currentThread.getCurrent();
 80039b4:	ed95 7ae1 	vldr	s14, [r5, #900]	; 0x384
 80039b8:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 80039bc:	edd3 7a00 	vldr	s15, [r3]
 80039c0:	ee37 7a67 	vsub.f32	s14, s14, s15
                if ((currentError < 0 && setAmplitude > 0) || (currentError > 0 && setAmplitude < 512))
 80039c4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80039c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039cc:	d432      	bmi.n	8003a34 <_ZN12ControllerTh4mainEv+0x194>
 80039ce:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80039d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d6:	dd27      	ble.n	8003a28 <_ZN12ControllerTh4mainEv+0x188>
 80039d8:	edd5 7ae2 	vldr	s15, [r5, #904]	; 0x388
 80039dc:	eef4 7ac8 	vcmpe.f32	s15, s16
 80039e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e4:	d520      	bpl.n	8003a28 <_ZN12ControllerTh4mainEv+0x188>
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80039e6:	edd5 6adb 	vldr	s13, [r5, #876]	; 0x36c
 80039ea:	edd5 7ad9 	vldr	s15, [r5, #868]	; 0x364
    out = (S->A0 * in) +
 80039ee:	edd5 4ad8 	vldr	s9, [r5, #864]	; 0x360
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80039f2:	edd5 5adc 	vldr	s11, [r5, #880]	; 0x370
 80039f6:	ed95 5ada 	vldr	s10, [r5, #872]	; 0x368
 80039fa:	ed95 6add 	vldr	s12, [r5, #884]	; 0x374

    /* Update state */
    S->state[1] = S->state[0];
    S->state[0] = in;
 80039fe:	ed85 7adb 	vstr	s14, [r5, #876]	; 0x36c
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
    S->state[1] = S->state[0];
 8003a06:	edc5 6adc 	vstr	s13, [r5, #880]	; 0x370
    out = (S->A0 * in) +
 8003a0a:	eee7 7a24 	vfma.f32	s15, s14, s9
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003a0e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003a12:	ee77 7a86 	vadd.f32	s15, s15, s12
                    if (setAmplitude > 512)
 8003a16:	eef4 7ac8 	vcmpe.f32	s15, s16
 8003a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    S->state[2] = out;
 8003a1e:	edc5 7add 	vstr	s15, [r5, #884]	; 0x374
 8003a22:	dd0f      	ble.n	8003a44 <_ZN12ControllerTh4mainEv+0x1a4>
                        setAmplitude = 512;
 8003a24:	ed85 8ae2 	vstr	s16, [r5, #904]	; 0x388
  _dbg_check_unlock();
 8003a28:	f7fd fc42 	bl	80012b0 <_dbg_check_unlock>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	e7a7      	b.n	8003984 <_ZN12ControllerTh4mainEv+0xe4>
                if ((currentError < 0 && setAmplitude > 0) || (currentError > 0 && setAmplitude < 512))
 8003a34:	edd5 7ae2 	vldr	s15, [r5, #904]	; 0x388
 8003a38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a40:	dcd1      	bgt.n	80039e6 <_ZN12ControllerTh4mainEv+0x146>
 8003a42:	e7c4      	b.n	80039ce <_ZN12ControllerTh4mainEv+0x12e>
                    setAmplitude = arm_pid_f32(&curPID, currentError);
 8003a44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4c:	bf48      	it	mi
 8003a4e:	eef0 7a68 	vmovmi.f32	s15, s17
 8003a52:	edc5 7ae2 	vstr	s15, [r5, #904]	; 0x388
 8003a56:	e7e7      	b.n	8003a28 <_ZN12ControllerTh4mainEv+0x188>
      setAmplitude = 400;
 8003a58:	4b24      	ldr	r3, [pc, #144]	; (8003aec <_ZN12ControllerTh4mainEv+0x24c>)
 8003a5a:	f8c5 3388 	str.w	r3, [r5, #904]	; 0x388
      setPhase = 0;
 8003a5e:	2600      	movs	r6, #0
 8003a60:	f8a5 638c 	strh.w	r6, [r5, #908]	; 0x38c
      chThdSleepMicroseconds(delay);
 8003a64:	2064      	movs	r0, #100	; 0x64
 8003a66:	f7fd fe43 	bl	80016f0 <chThdSleep>
 8003a6a:	f242 7a10 	movw	sl, #10000	; 0x2710
          chThdSleepMicroseconds(delay);
 8003a6e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8003af0 <_ZN12ControllerTh4mainEv+0x250>
 8003a72:	46d0      	mov	r8, sl
 8003a74:	fb08 f30a 	mul.w	r3, r8, sl
 8003a78:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
 8003a7c:	f203 233f 	addw	r3, r3, #575	; 0x23f
 8003a80:	fba9 2303 	umull	r2, r3, r9, r3
 8003a84:	0c9c      	lsrs	r4, r3, #18
 8003a86:	4620      	mov	r0, r4
 8003a88:	f7fd fe32 	bl	80016f0 <chThdSleep>
          setPhase++;
 8003a8c:	f8b5 338c 	ldrh.w	r3, [r5, #908]	; 0x38c
 8003a90:	3301      	adds	r3, #1
 8003a92:	b29b      	uxth	r3, r3
          if (setPhase == 6) {
 8003a94:	2b06      	cmp	r3, #6
          chEvtBroadcastFlags(&controller_event_source, CONTROLLER_EVT_NEWPHASE | CONTROLLER_EVT_NEWAMP);
 8003a96:	f04f 0103 	mov.w	r1, #3
 8003a9a:	4638      	mov	r0, r7
          setPhase++;
 8003a9c:	f8a5 338c 	strh.w	r3, [r5, #908]	; 0x38c
          if (setPhase == 6) {
 8003aa0:	d10e      	bne.n	8003ac0 <_ZN12ControllerTh4mainEv+0x220>
              delay = delay - 25;
 8003aa2:	f1aa 0a19 	sub.w	sl, sl, #25
 8003aa6:	fa1f fa8a 	uxth.w	sl, sl
 8003aaa:	fb08 f30a 	mul.w	r3, r8, sl
 8003aae:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
 8003ab2:	f203 233f 	addw	r3, r3, #575	; 0x23f
 8003ab6:	fba9 2303 	umull	r2, r3, r9, r3
              setPhase = 0;
 8003aba:	f8a5 638c 	strh.w	r6, [r5, #908]	; 0x38c
 8003abe:	0c9c      	lsrs	r4, r3, #18
          chEvtBroadcastFlags(&controller_event_source, CONTROLLER_EVT_NEWPHASE | CONTROLLER_EVT_NEWAMP);
 8003ac0:	f7fd fde6 	bl	8001690 <chEvtBroadcastFlags>
      while (delay >= 2500) {
 8003ac4:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8003ac8:	459a      	cmp	sl, r3
 8003aca:	dcd3      	bgt.n	8003a74 <_ZN12ControllerTh4mainEv+0x1d4>
      chThdSleepMicroseconds(delay); //extra delay since the next loop will instantly trigger
 8003acc:	4620      	mov	r0, r4
 8003ace:	f7fd fe0f 	bl	80016f0 <chThdSleep>
      mode = 2;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	f8a5 338e 	strh.w	r3, [r5, #910]	; 0x38e
 8003ad8:	e701      	b.n	80038de <_ZN12ControllerTh4mainEv+0x3e>
 8003ada:	bf00      	nop
 8003adc:	40020000 	.word	0x40020000
 8003ae0:	2aaaaaab 	.word	0x2aaaaaab
 8003ae4:	44000000 	.word	0x44000000
 8003ae8:	00000000 	.word	0x00000000
 8003aec:	43c80000 	.word	0x43c80000
 8003af0:	431bde83 	.word	0x431bde83
	...

08003b00 <_ZN16ThreePhaseDriver14simpleCallBackEP9PWMDriver>:
void ThreePhaseDriver::simpleCallBack(PWMDriver *pwmp) {
 8003b00:	b508      	push	{r3, lr}
 8003b02:	2320      	movs	r3, #32
 8003b04:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8003b08:	f7fd fa32 	bl	8000f70 <_dbg_check_lock_from_isr>
    palSetPad(GPIOC, 3);
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <_ZN16ThreePhaseDriver14simpleCallBackEP9PWMDriver+0x38>)
 8003b0e:	2208      	movs	r2, #8
 8003b10:	831a      	strh	r2, [r3, #24]
void adcStartConversionI(ADCDriver *adcp,
                         const ADCConversionGroup *grpp,
                         adcsample_t *samples,
                         size_t depth) {

  osalDbgCheckClassI();
 8003b12:	f7fc fe95 	bl	8000840 <chDbgCheckClassI>
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <_ZN16ThreePhaseDriver14simpleCallBackEP9PWMDriver+0x3c>)
 8003b18:	4a09      	ldr	r2, [pc, #36]	; (8003b40 <_ZN16ThreePhaseDriver14simpleCallBackEP9PWMDriver+0x40>)
  adcp->depth    = depth;
  adcp->grpp     = grpp;
 8003b1a:	490a      	ldr	r1, [pc, #40]	; (8003b44 <_ZN16ThreePhaseDriver14simpleCallBackEP9PWMDriver+0x44>)
  adcp->samples  = samples;
 8003b1c:	609a      	str	r2, [r3, #8]
  adcp->depth    = depth;
 8003b1e:	2001      	movs	r0, #1
  adcp->state    = ADC_ACTIVE;
 8003b20:	2203      	movs	r2, #3
  adcp->depth    = depth;
 8003b22:	60d8      	str	r0, [r3, #12]
  adcp->grpp     = grpp;
 8003b24:	6119      	str	r1, [r3, #16]
  adcp->state    = ADC_ACTIVE;
 8003b26:	701a      	strb	r2, [r3, #0]
  adc_lld_start_conversion(adcp);
 8003b28:	f7ff fb9a 	bl	8003260 <adc_lld_start_conversion.constprop.35>
  _dbg_check_unlock_from_isr();
 8003b2c:	f7fd fa08 	bl	8000f40 <_dbg_check_unlock_from_isr>
 8003b30:	2300      	movs	r3, #0
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	bd08      	pop	{r3, pc}
 8003b38:	40020800 	.word	0x40020800
 8003b3c:	20000a94 	.word	0x20000a94
 8003b40:	20003200 	.word	0x20003200
 8003b44:	08005030 	.word	0x08005030
	...

08003b50 <_ZN16ThreePhaseDriver11sinCallBackEP9PWMDriver>:
void ThreePhaseDriver::sinCallBack(PWMDriver *pwmp) {
 8003b50:	b508      	push	{r3, lr}
 8003b52:	2320      	movs	r3, #32
 8003b54:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8003b58:	f7fd fa0a 	bl	8000f70 <_dbg_check_lock_from_isr>
    palTogglePad(GPIOC, 3);
 8003b5c:	4a0b      	ldr	r2, [pc, #44]	; (8003b8c <_ZN16ThreePhaseDriver11sinCallBackEP9PWMDriver+0x3c>)
 8003b5e:	6953      	ldr	r3, [r2, #20]
 8003b60:	f083 0308 	eor.w	r3, r3, #8
 8003b64:	6153      	str	r3, [r2, #20]
  osalDbgCheckClassI();
 8003b66:	f7fc fe6b 	bl	8000840 <chDbgCheckClassI>
  adcp->samples  = samples;
 8003b6a:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <_ZN16ThreePhaseDriver11sinCallBackEP9PWMDriver+0x40>)
 8003b6c:	4a09      	ldr	r2, [pc, #36]	; (8003b94 <_ZN16ThreePhaseDriver11sinCallBackEP9PWMDriver+0x44>)
  adcp->grpp     = grpp;
 8003b6e:	490a      	ldr	r1, [pc, #40]	; (8003b98 <_ZN16ThreePhaseDriver11sinCallBackEP9PWMDriver+0x48>)
  adcp->samples  = samples;
 8003b70:	609a      	str	r2, [r3, #8]
  adcp->depth    = depth;
 8003b72:	2001      	movs	r0, #1
  adcp->state    = ADC_ACTIVE;
 8003b74:	2203      	movs	r2, #3
  adcp->depth    = depth;
 8003b76:	60d8      	str	r0, [r3, #12]
  adcp->grpp     = grpp;
 8003b78:	6119      	str	r1, [r3, #16]
  adcp->state    = ADC_ACTIVE;
 8003b7a:	701a      	strb	r2, [r3, #0]
  adc_lld_start_conversion(adcp);
 8003b7c:	f7ff fb70 	bl	8003260 <adc_lld_start_conversion.constprop.35>
  _dbg_check_unlock_from_isr();
 8003b80:	f7fd f9de 	bl	8000f40 <_dbg_check_unlock_from_isr>
 8003b84:	2300      	movs	r3, #0
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	bd08      	pop	{r3, pc}
 8003b8c:	40020800 	.word	0x40020800
 8003b90:	20000a94 	.word	0x20000a94
 8003b94:	20003200 	.word	0x20003200
 8003b98:	08005030 	.word	0x08005030
 8003b9c:	00000000 	.word	0x00000000

08003ba0 <_ZN10chibios_rt16BaseStaticThreadILi128EE5startEm>:
    virtual ThreadReference start(tprio_t prio) {
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	460d      	mov	r5, r1
      thread_ref = chThdCreateStatic(wa, sizeof(wa), prio, _thd_start, this);
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	f101 0008 	add.w	r0, r1, #8
 8003bac:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003bb0:	f7ff fe16 	bl	80037e0 <chThdCreateStatic.constprop.64>
  class ThreadReference {
 8003bb4:	4a03      	ldr	r2, [pc, #12]	; (8003bc4 <_ZN10chibios_rt16BaseStaticThreadILi128EE5startEm+0x24>)
      thread_ref = chThdCreateStatic(wa, sizeof(wa), prio, _thd_start, this);
 8003bb6:	6068      	str	r0, [r5, #4]
 8003bb8:	4603      	mov	r3, r0
  class ThreadReference {
 8003bba:	e884 000c 	stmia.w	r4, {r2, r3}
    }
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	bd38      	pop	{r3, r4, r5, pc}
 8003bc2:	bf00      	nop
 8003bc4:	0800501c 	.word	0x0800501c
	...

08003bd0 <_ZN12TesterThread4mainEv>:
}

void TesterThread::main(void) {
 8003bd0:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8003bd2:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <_ZN12TesterThread4mainEv+0x50>)
 8003bd4:	4a13      	ldr	r2, [pc, #76]	; (8003c24 <_ZN12TesterThread4mainEv+0x54>)
 8003bd6:	699b      	ldr	r3, [r3, #24]
  setName("tester");

  phase = 0;
  while (true) {
    if (phase >= 720) {
      phase = phase % 720;
 8003bd8:	4e13      	ldr	r6, [pc, #76]	; (8003c28 <_ZN12TesterThread4mainEv+0x58>)
 8003bda:	619a      	str	r2, [r3, #24]
  phase = 0;
 8003bdc:	2300      	movs	r3, #0
void TesterThread::main(void) {
 8003bde:	4604      	mov	r4, r0
  phase = 0;
 8003be0:	f8a0 31d8 	strh.w	r3, [r0, #472]	; 0x1d8
 8003be4:	f500 75ee 	add.w	r5, r0, #476	; 0x1dc
 *
 * @api
 */
static inline void chEvtBroadcast(event_source_t *esp) {

  chEvtBroadcastFlags(esp, (eventflags_t)0);
 8003be8:	2100      	movs	r1, #0
 8003bea:	4628      	mov	r0, r5
 8003bec:	f7fd fd50 	bl	8001690 <chEvtBroadcastFlags>
    }
    //if (mysetting.amplitude > THREEPHASE_MAX_AMPLITUDE)
      //mysetting.amplitude = mysetting.amplitude % THREEPHASE_MAX_AMPLITUDE;
    chEvtBroadcast(&tester_event_source);
    //threePhaseDriver.sendMessage((msg_t)&mysetting);
    phase = phase + 1;
 8003bf0:	f8b4 31d8 	ldrh.w	r3, [r4, #472]	; 0x1d8
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	f8a4 31d8 	strh.w	r3, [r4, #472]	; 0x1d8

    chThdSleepMicroseconds(3000);
 8003bfa:	201e      	movs	r0, #30
 8003bfc:	f7fd fd78 	bl	80016f0 <chThdSleep>
    if (phase >= 720) {
 8003c00:	f8b4 31d8 	ldrh.w	r3, [r4, #472]	; 0x1d8
 8003c04:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
      phase = phase % 720;
 8003c08:	ea4f 1213 	mov.w	r2, r3, lsr #4
    if (phase >= 720) {
 8003c0c:	dbec      	blt.n	8003be8 <_ZN12TesterThread4mainEv+0x18>
      phase = phase % 720;
 8003c0e:	fba6 1202 	umull	r1, r2, r6, r2
 8003c12:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8003c16:	fb01 3312 	mls	r3, r1, r2, r3
 8003c1a:	f8a4 31d8 	strh.w	r3, [r4, #472]	; 0x1d8
 8003c1e:	e7e3      	b.n	8003be8 <_ZN12TesterThread4mainEv+0x18>
 8003c20:	20003164 	.word	0x20003164
 8003c24:	08005058 	.word	0x08005058
 8003c28:	05b05b06 	.word	0x05b05b06
 8003c2c:	00000000 	.word	0x00000000

08003c30 <_ZN16ThreePhaseDriver4mainEv>:
void ThreePhaseDriver::main(void) {
 8003c30:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003c34:	4bc6      	ldr	r3, [pc, #792]	; (8003f50 <_ZN16ThreePhaseDriver4mainEv+0x320>)
 8003c36:	4ac7      	ldr	r2, [pc, #796]	; (8003f54 <_ZN16ThreePhaseDriver4mainEv+0x324>)
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	4dc7      	ldr	r5, [pc, #796]	; (8003f58 <_ZN16ThreePhaseDriver4mainEv+0x328>)
 8003c3c:	4ec7      	ldr	r6, [pc, #796]	; (8003f5c <_ZN16ThreePhaseDriver4mainEv+0x32c>)
  if (currentAmplitude > 512)
 8003c3e:	eddf 8ac8 	vldr	s17, [pc, #800]	; 8003f60 <_ZN16ThreePhaseDriver4mainEv+0x330>
  if (currentAmplitude < 0)
 8003c42:	ed9f 9ac8 	vldr	s18, [pc, #800]	; 8003f64 <_ZN16ThreePhaseDriver4mainEv+0x334>
                  pwmEnableChannelI(&PWMD8, 0, ((sinlookup[currentPhase % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003c46:	ed9f 8ac8 	vldr	s16, [pc, #800]	; 8003f68 <_ZN16ThreePhaseDriver4mainEv+0x338>
                  pwmEnableChannelI(&PWMD8, 2, ((sinlookup[(currentPhase + THREEPHASE_STEPS_PER_CYCLE/3) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003c4a:	f8df 832c 	ldr.w	r8, [pc, #812]	; 8003f78 <_ZN16ThreePhaseDriver4mainEv+0x348>
void ThreePhaseDriver::main(void) {
 8003c4e:	4604      	mov	r4, r0
  chEvtRegisterMaskWithFlags(&(controllerTh.controller_event_source), &controller_listener, CONTROLLER_EVENT, CONTROLLER_EVT_NEWAMP | CONTROLLER_EVT_NEWPHASE);
 8003c50:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
 8003c54:	619a      	str	r2, [r3, #24]
void ThreePhaseDriver::main(void) {
 8003c56:	b089      	sub	sp, #36	; 0x24
  chEvtRegisterMaskWithFlags(&(controllerTh.controller_event_source), &controller_listener, CONTROLLER_EVENT, CONTROLLER_EVT_NEWAMP | CONTROLLER_EVT_NEWPHASE);
 8003c58:	f500 7064 	add.w	r0, r0, #912	; 0x390
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	2201      	movs	r2, #1
 8003c60:	a903      	add	r1, sp, #12
 8003c62:	f7fd fd25 	bl	80016b0 <chEvtRegisterMaskWithFlags>
 8003c66:	f604 57a4 	addw	r7, r4, #3492	; 0xda4
 8003c6a:	e004      	b.n	8003c76 <_ZN16ThreePhaseDriver4mainEv+0x46>
  _dbg_check_unlock();
 8003c6c:	f7fd fb20 	bl	80012b0 <_dbg_check_unlock>
 8003c70:	2300      	movs	r3, #0
 8003c72:	f383 8811 	msr	BASEPRI, r3
	  evt = chEvtWaitAny(listenmask);
 8003c76:	2001      	movs	r0, #1
 8003c78:	f7fd fcea 	bl	8001650 <chEvtWaitAny>
 8003c7c:	2320      	movs	r3, #32
 8003c7e:	4681      	mov	r9, r0
 8003c80:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003c84:	f7fd fb24 	bl	80012d0 <_dbg_check_lock>
	  if (evt & CONTROLLER_EVENT) {
 8003c88:	f019 0f01 	tst.w	r9, #1
 8003c8c:	d0ee      	beq.n	8003c6c <_ZN16ThreePhaseDriver4mainEv+0x3c>
  flags = elp->flags;
 8003c8e:	9b06      	ldr	r3, [sp, #24]
  elp->flags = (eventflags_t)0;
 8003c90:	2200      	movs	r2, #0
      if (flags & CONTROLLER_EVT_NEWAMP) {
 8003c92:	07d8      	lsls	r0, r3, #31
 8003c94:	9206      	str	r2, [sp, #24]
 8003c96:	f100 80e4 	bmi.w	8003e62 <_ZN16ThreePhaseDriver4mainEv+0x232>
      if (flags & CONTROLLER_EVT_NEWPHASE) {
 8003c9a:	0799      	lsls	r1, r3, #30
 8003c9c:	f100 80da 	bmi.w	8003e54 <_ZN16ThreePhaseDriver4mainEv+0x224>
      if (mode == THREEPHASE_MODE_SIN) {
 8003ca0:	f8b4 325c 	ldrh.w	r3, [r4, #604]	; 0x25c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d15a      	bne.n	8003d5e <_ZN16ThreePhaseDriver4mainEv+0x12e>
          if (pwmIsChannelEnabledI(&PWMD8, 0) && pwmIsChannelEnabledI(&PWMD8, 0) && pwmIsChannelEnabledI(&PWMD8, 0)) {
 8003ca8:	68eb      	ldr	r3, [r5, #12]
 8003caa:	07da      	lsls	r2, r3, #31
 8003cac:	d5de      	bpl.n	8003c6c <_ZN16ThreePhaseDriver4mainEv+0x3c>
                  pwmEnableChannelI(&PWMD8, 0, ((sinlookup[currentPhase % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003cae:	f8b4 2da0 	ldrh.w	r2, [r4, #3488]	; 0xda0
 8003cb2:	69a9      	ldr	r1, [r5, #24]
 8003cb4:	9101      	str	r1, [sp, #4]
                  pwmEnableChannelI(&PWMD8, 2, ((sinlookup[(currentPhase + THREEPHASE_STEPS_PER_CYCLE/3) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003cb6:	f102 0bf0 	add.w	fp, r2, #240	; 0xf0
 8003cba:	fb88 1e0b 	smull	r1, lr, r8, fp
                  pwmEnableChannelI(&PWMD8, 0, ((sinlookup[currentPhase % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003cbe:	49ab      	ldr	r1, [pc, #684]	; (8003f6c <_ZN16ThreePhaseDriver4mainEv+0x33c>)
 8003cc0:	edd7 7a00 	vldr	s15, [r7]
                  pwmEnableChannelI(&PWMD8, 3, ((sinlookup[(currentPhase + 2*(THREEPHASE_STEPS_PER_CYCLE/3)) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003cc4:	f502 7cf0 	add.w	ip, r2, #480	; 0x1e0
                  pwmEnableChannelI(&PWMD8, 0, ((sinlookup[currentPhase % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003cc8:	0910      	lsrs	r0, r2, #4
                  pwmEnableChannelI(&PWMD8, 2, ((sinlookup[(currentPhase + THREEPHASE_STEPS_PER_CYCLE/3) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003cca:	ea4f 79eb 	mov.w	r9, fp, asr #31
 8003cce:	44de      	add	lr, fp
                  pwmEnableChannelI(&PWMD8, 0, ((sinlookup[currentPhase % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003cd0:	fba1 1000 	umull	r1, r0, r1, r0
                  pwmEnableChannelI(&PWMD8, 2, ((sinlookup[(currentPhase + THREEPHASE_STEPS_PER_CYCLE/3) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003cd4:	ebc9 2e6e 	rsb	lr, r9, lr, asr #9
                  pwmEnableChannelI(&PWMD8, 3, ((sinlookup[(currentPhase + 2*(THREEPHASE_STEPS_PER_CYCLE/3)) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003cd8:	fb88 1a0c 	smull	r1, sl, r8, ip
                  pwmEnableChannelI(&PWMD8, 0, ((sinlookup[currentPhase % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003cdc:	f44f 7934 	mov.w	r9, #720	; 0x2d0
 8003ce0:	fb09 2010 	mls	r0, r9, r0, r2
                  pwmEnableChannelI(&PWMD8, 3, ((sinlookup[(currentPhase + 2*(THREEPHASE_STEPS_PER_CYCLE/3)) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003ce4:	44e2      	add	sl, ip
                  pwmEnableChannelI(&PWMD8, 2, ((sinlookup[(currentPhase + THREEPHASE_STEPS_PER_CYCLE/3) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003ce6:	fb09 be1e 	mls	lr, r9, lr, fp
                  pwmEnableChannelI(&PWMD8, 3, ((sinlookup[(currentPhase + 2*(THREEPHASE_STEPS_PER_CYCLE/3)) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003cea:	ea4f 72ec 	mov.w	r2, ip, asr #31
 8003cee:	ebc2 226a 	rsb	r2, r2, sl, asr #9
                  pwmEnableChannelI(&PWMD8, 2, ((sinlookup[(currentPhase + THREEPHASE_STEPS_PER_CYCLE/3) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003cf2:	f10e 0e98 	add.w	lr, lr, #152	; 0x98
                  pwmEnableChannelI(&PWMD8, 0, ((sinlookup[currentPhase % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003cf6:	b280      	uxth	r0, r0
                  pwmEnableChannelI(&PWMD8, 3, ((sinlookup[(currentPhase + 2*(THREEPHASE_STEPS_PER_CYCLE/3)) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003cf8:	fb09 c212 	mls	r2, r9, r2, ip
                  pwmEnableChannelI(&PWMD8, 2, ((sinlookup[(currentPhase + THREEPHASE_STEPS_PER_CYCLE/3) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003cfc:	f854 102e 	ldr.w	r1, [r4, lr, lsl #2]
                  pwmEnableChannelI(&PWMD8, 0, ((sinlookup[currentPhase % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d00:	3098      	adds	r0, #152	; 0x98
                  pwmEnableChannelI(&PWMD8, 3, ((sinlookup[(currentPhase + 2*(THREEPHASE_STEPS_PER_CYCLE/3)) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d02:	3298      	adds	r2, #152	; 0x98
                  pwmEnableChannelI(&PWMD8, 2, ((sinlookup[(currentPhase + THREEPHASE_STEPS_PER_CYCLE/3) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d04:	ee06 1a10 	vmov	s12, r1
                  pwmEnableChannelI(&PWMD8, 3, ((sinlookup[(currentPhase + 2*(THREEPHASE_STEPS_PER_CYCLE/3)) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d08:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
                  pwmEnableChannelI(&PWMD8, 0, ((sinlookup[currentPhase % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d0c:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
                  pwmEnableChannelI(&PWMD8, 3, ((sinlookup[(currentPhase + 2*(THREEPHASE_STEPS_PER_CYCLE/3)) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d10:	ee07 2a10 	vmov	s14, r2
                  pwmEnableChannelI(&PWMD8, 0, ((sinlookup[currentPhase % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d14:	ee06 1a90 	vmov	s13, r1
                  pwmEnableChannelI(&PWMD8, 3, ((sinlookup[(currentPhase + 2*(THREEPHASE_STEPS_PER_CYCLE/3)) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d18:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                  pwmEnableChannelI(&PWMD8, 2, ((sinlookup[(currentPhase + THREEPHASE_STEPS_PER_CYCLE/3) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d1c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
                  pwmEnableChannelI(&PWMD8, 0, ((sinlookup[currentPhase % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d20:	eef8 6a66 	vcvt.f32.u32	s13, s13
                  pwmEnableChannelI(&PWMD8, 2, ((sinlookup[(currentPhase + THREEPHASE_STEPS_PER_CYCLE/3) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d24:	ee26 6a27 	vmul.f32	s12, s12, s15
                  pwmEnableChannelI(&PWMD8, 0, ((sinlookup[currentPhase % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d28:	ee66 6aa7 	vmul.f32	s13, s13, s15
                  pwmEnableChannelI(&PWMD8, 3, ((sinlookup[(currentPhase + 2*(THREEPHASE_STEPS_PER_CYCLE/3)) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
                  pwmEnableChannelI(&PWMD8, 2, ((sinlookup[(currentPhase + THREEPHASE_STEPS_PER_CYCLE/3) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d30:	eec6 5a08 	vdiv.f32	s11, s12, s16
                  pwmEnableChannelI(&PWMD8, 3, ((sinlookup[(currentPhase + 2*(THREEPHASE_STEPS_PER_CYCLE/3)) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d34:	f043 030d 	orr.w	r3, r3, #13
 8003d38:	60eb      	str	r3, [r5, #12]
 8003d3a:	9b01      	ldr	r3, [sp, #4]
                  pwmEnableChannelI(&PWMD8, 0, ((sinlookup[currentPhase % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d3c:	ee86 6a88 	vdiv.f32	s12, s13, s16
                  pwmEnableChannelI(&PWMD8, 3, ((sinlookup[(currentPhase + 2*(THREEPHASE_STEPS_PER_CYCLE/3)) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d40:	ee87 7a88 	vdiv.f32	s14, s15, s16
                  pwmEnableChannelI(&PWMD8, 2, ((sinlookup[(currentPhase + THREEPHASE_STEPS_PER_CYCLE/3) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d44:	eefc 5ae5 	vcvt.u32.f32	s11, s11
                  pwmEnableChannelI(&PWMD8, 0, ((sinlookup[currentPhase % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d48:	eebc 6ac6 	vcvt.u32.f32	s12, s12
                  pwmEnableChannelI(&PWMD8, 3, ((sinlookup[(currentPhase + 2*(THREEPHASE_STEPS_PER_CYCLE/3)) % THREEPHASE_STEPS_PER_CYCLE] * currentAmplitude)/10000));
 8003d4c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003d50:	ed83 6a0d 	vstr	s12, [r3, #52]	; 0x34
 8003d54:	edc3 5a0f 	vstr	s11, [r3, #60]	; 0x3c
 8003d58:	ed83 7a10 	vstr	s14, [r3, #64]	; 0x40
 8003d5c:	e786      	b.n	8003c6c <_ZN16ThreePhaseDriver4mainEv+0x3c>
      } else if (mode == THREEPHASE_MODE_NORMAL) {
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d184      	bne.n	8003c6c <_ZN16ThreePhaseDriver4mainEv+0x3c>
  if (currentPhase >= 6) {
 8003d62:	f8b4 3da0 	ldrh.w	r3, [r4, #3488]	; 0xda0
 8003d66:	2b05      	cmp	r3, #5
 8003d68:	dd0a      	ble.n	8003d80 <_ZN16ThreePhaseDriver4mainEv+0x150>
      currentPhase = currentPhase % 6;
 8003d6a:	4a81      	ldr	r2, [pc, #516]	; (8003f70 <_ZN16ThreePhaseDriver4mainEv+0x340>)
 8003d6c:	fba2 1203 	umull	r1, r2, r2, r3
 8003d70:	0892      	lsrs	r2, r2, #2
 8003d72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003d76:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f8a4 3da0 	strh.w	r3, [r4, #3488]	; 0xda0
  if (currentAmplitude > 512)
 8003d80:	edd7 7a00 	vldr	s15, [r7]
 8003d84:	eef4 7ae8 	vcmpe.f32	s15, s17
 8003d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8c:	dd6f      	ble.n	8003e6e <_ZN16ThreePhaseDriver4mainEv+0x23e>
    currentAmplitude = 512;
 8003d8e:	f44f 6a60 	mov.w	sl, #3584	; 0xe00
 8003d92:	edc7 8a00 	vstr	s17, [r7]
 8003d96:	46d1      	mov	r9, sl
  pwmDisableChannelI(&PWMD3, 0);
 8003d98:	68f2      	ldr	r2, [r6, #12]
 8003d9a:	4870      	ldr	r0, [pc, #448]	; (8003f5c <_ZN16ThreePhaseDriver4mainEv+0x32c>)
 8003d9c:	f022 0201 	bic.w	r2, r2, #1
 8003da0:	2100      	movs	r1, #0
 8003da2:	60f2      	str	r2, [r6, #12]
  int16_t subState = currentPhase / 2;
 8003da4:	ea4f 0b53 	mov.w	fp, r3, lsr #1
  pwmDisableChannelI(&PWMD3, 0);
 8003da8:	f7fc fb7a 	bl	80004a0 <pwm_lld_disable_channel>
  pwmDisableChannelI(&PWMD3, 1);
 8003dac:	68f3      	ldr	r3, [r6, #12]
 8003dae:	486b      	ldr	r0, [pc, #428]	; (8003f5c <_ZN16ThreePhaseDriver4mainEv+0x32c>)
 8003db0:	f023 0302 	bic.w	r3, r3, #2
 8003db4:	2101      	movs	r1, #1
 8003db6:	60f3      	str	r3, [r6, #12]
 8003db8:	f7fc fb72 	bl	80004a0 <pwm_lld_disable_channel>
  pwmDisableChannelI(&PWMD3, 3);
 8003dbc:	68f2      	ldr	r2, [r6, #12]
 8003dbe:	4867      	ldr	r0, [pc, #412]	; (8003f5c <_ZN16ThreePhaseDriver4mainEv+0x32c>)
 8003dc0:	f022 0208 	bic.w	r2, r2, #8
 8003dc4:	2103      	movs	r1, #3
 8003dc6:	60f2      	str	r2, [r6, #12]
 8003dc8:	f7fc fb6a 	bl	80004a0 <pwm_lld_disable_channel>
  if (realAmp > (3600/2)) // over 50% duty cycle, pick a middle inside the active area
 8003dcc:	f5b9 6fe1 	cmp.w	r9, #1800	; 0x708
    pwmEnableChannelI(&PWMD3, 2, realAmp/2 );
 8003dd0:	68f2      	ldr	r2, [r6, #12]
 8003dd2:	69b3      	ldr	r3, [r6, #24]
  if (realAmp > (3600/2)) // over 50% duty cycle, pick a middle inside the active area
 8003dd4:	d956      	bls.n	8003e84 <_ZN16ThreePhaseDriver4mainEv+0x254>
    pwmEnableChannelI(&PWMD3, 2, realAmp/2 );
 8003dd6:	ea4f 0159 	mov.w	r1, r9, lsr #1
 8003dda:	f042 0e04 	orr.w	lr, r2, #4
  switch(subState) { //setting the input pins to the proper values
 8003dde:	f1bb 0f01 	cmp.w	fp, #1
 8003de2:	63d9      	str	r1, [r3, #60]	; 0x3c
    pwmEnableChannelI(&PWMD3, 2, realAmp/2 );
 8003de4:	f8c6 e00c 	str.w	lr, [r6, #12]
  switch(subState) { //setting the input pins to the proper values
 8003de8:	d058      	beq.n	8003e9c <_ZN16ThreePhaseDriver4mainEv+0x26c>
 8003dea:	f0c0 809a 	bcc.w	8003f22 <_ZN16ThreePhaseDriver4mainEv+0x2f2>
 8003dee:	f1bb 0f02 	cmp.w	fp, #2
 8003df2:	d108      	bne.n	8003e06 <_ZN16ThreePhaseDriver4mainEv+0x1d6>
      palClearPad(GPIOC, 6);
 8003df4:	485f      	ldr	r0, [pc, #380]	; (8003f74 <_ZN16ThreePhaseDriver4mainEv+0x344>)
 8003df6:	2140      	movs	r1, #64	; 0x40
      palClearPad(GPIOC, 8);
 8003df8:	f44f 7280 	mov.w	r2, #256	; 0x100
      palSetPad(GPIOC, 9);
 8003dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
      palClearPad(GPIOC, 6);
 8003e00:	8341      	strh	r1, [r0, #26]
      palClearPad(GPIOC, 8);
 8003e02:	8342      	strh	r2, [r0, #26]
      palSetPad(GPIOC, 9);
 8003e04:	8303      	strh	r3, [r0, #24]
  switch(currentPhase % 3) { //setting the enable pins to the proper values
 8003e06:	f8b4 2da0 	ldrh.w	r2, [r4, #3488]	; 0xda0
 8003e0a:	4b59      	ldr	r3, [pc, #356]	; (8003f70 <_ZN16ThreePhaseDriver4mainEv+0x340>)
 8003e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e10:	085b      	lsrs	r3, r3, #1
 8003e12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	b299      	uxth	r1, r3
 8003e1a:	2901      	cmp	r1, #1
 8003e1c:	d060      	beq.n	8003ee0 <_ZN16ThreePhaseDriver4mainEv+0x2b0>
 8003e1e:	2902      	cmp	r1, #2
 8003e20:	d146      	bne.n	8003eb0 <_ZN16ThreePhaseDriver4mainEv+0x280>
      pwmDisableChannelI(&PWMD3, 0); //disable 1
 8003e22:	f02e 0301 	bic.w	r3, lr, #1
 8003e26:	2100      	movs	r1, #0
 8003e28:	484c      	ldr	r0, [pc, #304]	; (8003f5c <_ZN16ThreePhaseDriver4mainEv+0x32c>)
 8003e2a:	60f3      	str	r3, [r6, #12]
 8003e2c:	f7fc fb38 	bl	80004a0 <pwm_lld_disable_channel>
      pwmEnableChannelI(&PWMD3, 1, (currentAmplitude * 7)); //enable 2
 8003e30:	ed97 7a00 	vldr	s14, [r7]
 8003e34:	68f3      	ldr	r3, [r6, #12]
 8003e36:	69b1      	ldr	r1, [r6, #24]
 8003e38:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 8003e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
      pwmEnableChannelI(&PWMD3, 3, (currentAmplitude * 7)); //enable 3
 8003e40:	f043 020a 	orr.w	r2, r3, #10
      pwmEnableChannelI(&PWMD3, 1, (currentAmplitude * 7)); //enable 2
 8003e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
      pwmEnableChannelI(&PWMD3, 3, (currentAmplitude * 7)); //enable 3
 8003e48:	60f2      	str	r2, [r6, #12]
 8003e4a:	edc1 7a0e 	vstr	s15, [r1, #56]	; 0x38
 8003e4e:	edc1 7a10 	vstr	s15, [r1, #64]	; 0x40
 8003e52:	e70b      	b.n	8003c6c <_ZN16ThreePhaseDriver4mainEv+0x3c>
  return setPhase;
 8003e54:	f8d4 3258 	ldr.w	r3, [r4, #600]	; 0x258
          currentPhase = controllerTh.getPhase();
 8003e58:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 8003e5c:	f8a4 3da0 	strh.w	r3, [r4, #3488]	; 0xda0
 8003e60:	e71e      	b.n	8003ca0 <_ZN16ThreePhaseDriver4mainEv+0x70>
  return setAmplitude;
 8003e62:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
          currentAmplitude = controllerTh.getAmplitude();
 8003e66:	f8d2 2388 	ldr.w	r2, [r2, #904]	; 0x388
 8003e6a:	603a      	str	r2, [r7, #0]
 8003e6c:	e715      	b.n	8003c9a <_ZN16ThreePhaseDriver4mainEv+0x6a>
  if (currentAmplitude < 0)
 8003e6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e76:	d55e      	bpl.n	8003f36 <_ZN16ThreePhaseDriver4mainEv+0x306>
    currentAmplitude = 0;
 8003e78:	f04f 0a00 	mov.w	sl, #0
 8003e7c:	ed87 9a00 	vstr	s18, [r7]
 8003e80:	46d1      	mov	r9, sl
 8003e82:	e789      	b.n	8003d98 <_ZN16ThreePhaseDriver4mainEv+0x168>
    pwmEnableChannelI(&PWMD3, 2, realAmp + (3600-realAmp) / 2);
 8003e84:	f5ca 6161 	rsb	r1, sl, #3600	; 0xe10
 8003e88:	f042 0e04 	orr.w	lr, r2, #4
 8003e8c:	eb0a 0161 	add.w	r1, sl, r1, asr #1
  switch(subState) { //setting the input pins to the proper values
 8003e90:	f1bb 0f01 	cmp.w	fp, #1
    pwmEnableChannelI(&PWMD3, 2, realAmp + (3600-realAmp) / 2);
 8003e94:	f8c6 e00c 	str.w	lr, [r6, #12]
 8003e98:	63d9      	str	r1, [r3, #60]	; 0x3c
  switch(subState) { //setting the input pins to the proper values
 8003e9a:	d1a6      	bne.n	8003dea <_ZN16ThreePhaseDriver4mainEv+0x1ba>
      palClearPad(GPIOC, 6);
 8003e9c:	4835      	ldr	r0, [pc, #212]	; (8003f74 <_ZN16ThreePhaseDriver4mainEv+0x344>)
 8003e9e:	2140      	movs	r1, #64	; 0x40
      palSetPad(GPIOC, 8);
 8003ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
      palClearPad(GPIOC, 9);
 8003ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
      palClearPad(GPIOC, 6);
 8003ea8:	8341      	strh	r1, [r0, #26]
      palSetPad(GPIOC, 8);
 8003eaa:	8302      	strh	r2, [r0, #24]
      palClearPad(GPIOC, 9);
 8003eac:	8343      	strh	r3, [r0, #26]
 8003eae:	e7aa      	b.n	8003e06 <_ZN16ThreePhaseDriver4mainEv+0x1d6>
      pwmEnableChannelI(&PWMD3, 0, (currentAmplitude * 7)); //enable 1
 8003eb0:	ed97 7a00 	vldr	s14, [r7]
 8003eb4:	f8d6 c018 	ldr.w	ip, [r6, #24]
      pwmDisableChannelI(&PWMD3, 3); //disable 3
 8003eb8:	4828      	ldr	r0, [pc, #160]	; (8003f5c <_ZN16ThreePhaseDriver4mainEv+0x32c>)
      pwmEnableChannelI(&PWMD3, 0, (currentAmplitude * 7)); //enable 1
 8003eba:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 8003ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
      pwmDisableChannelI(&PWMD3, 3); //disable 3
 8003ec2:	f02e 0208 	bic.w	r2, lr, #8
      pwmEnableChannelI(&PWMD3, 0, (currentAmplitude * 7)); //enable 1
 8003ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
      pwmDisableChannelI(&PWMD3, 3); //disable 3
 8003eca:	f042 0203 	orr.w	r2, r2, #3
 8003ece:	edcc 7a0d 	vstr	s15, [ip, #52]	; 0x34
 8003ed2:	2103      	movs	r1, #3
 8003ed4:	edcc 7a0e 	vstr	s15, [ip, #56]	; 0x38
 8003ed8:	60f2      	str	r2, [r6, #12]
 8003eda:	f7fc fae1 	bl	80004a0 <pwm_lld_disable_channel>
 8003ede:	e6c5      	b.n	8003c6c <_ZN16ThreePhaseDriver4mainEv+0x3c>
      pwmEnableChannelI(&PWMD3, 0, (currentAmplitude * 7)); //enable 1
 8003ee0:	edd7 7a00 	vldr	s15, [r7]
 8003ee4:	69b3      	ldr	r3, [r6, #24]
      pwmDisableChannelI(&PWMD3, 1); //disable 2
 8003ee6:	481d      	ldr	r0, [pc, #116]	; (8003f5c <_ZN16ThreePhaseDriver4mainEv+0x32c>)
      pwmEnableChannelI(&PWMD3, 0, (currentAmplitude * 7)); //enable 1
 8003ee8:	eef1 9a0c 	vmov.f32	s19, #28	; 0x40e00000  7.0
 8003eec:	ee67 7aa9 	vmul.f32	s15, s15, s19
      pwmDisableChannelI(&PWMD3, 1); //disable 2
 8003ef0:	f02e 0202 	bic.w	r2, lr, #2
      pwmEnableChannelI(&PWMD3, 0, (currentAmplitude * 7)); //enable 1
 8003ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
      pwmDisableChannelI(&PWMD3, 1); //disable 2
 8003ef8:	f042 0201 	orr.w	r2, r2, #1
 8003efc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8003f00:	60f2      	str	r2, [r6, #12]
 8003f02:	f7fc facd 	bl	80004a0 <pwm_lld_disable_channel>
      pwmEnableChannelI(&PWMD3, 3, (currentAmplitude * 7)); //enable 3
 8003f06:	edd7 7a00 	vldr	s15, [r7]
 8003f0a:	68f3      	ldr	r3, [r6, #12]
 8003f0c:	69b2      	ldr	r2, [r6, #24]
 8003f0e:	ee67 9aa9 	vmul.f32	s19, s15, s19
 8003f12:	f043 0308 	orr.w	r3, r3, #8
 8003f16:	eefc 9ae9 	vcvt.u32.f32	s19, s19
 8003f1a:	60f3      	str	r3, [r6, #12]
 8003f1c:	edc2 9a10 	vstr	s19, [r2, #64]	; 0x40
 8003f20:	e6a4      	b.n	8003c6c <_ZN16ThreePhaseDriver4mainEv+0x3c>
      palSetPad(GPIOC, 6);
 8003f22:	4814      	ldr	r0, [pc, #80]	; (8003f74 <_ZN16ThreePhaseDriver4mainEv+0x344>)
 8003f24:	2140      	movs	r1, #64	; 0x40
      palClearPad(GPIOC, 8);
 8003f26:	f44f 7280 	mov.w	r2, #256	; 0x100
      palClearPad(GPIOC, 9);
 8003f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
      palSetPad(GPIOC, 6);
 8003f2e:	8301      	strh	r1, [r0, #24]
      palClearPad(GPIOC, 8);
 8003f30:	8342      	strh	r2, [r0, #26]
      palClearPad(GPIOC, 9);
 8003f32:	8343      	strh	r3, [r0, #26]
 8003f34:	e767      	b.n	8003e06 <_ZN16ThreePhaseDriver4mainEv+0x1d6>
 8003f36:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f42:	edcd 7a01 	vstr	s15, [sp, #4]
 8003f46:	f8bd 9004 	ldrh.w	r9, [sp, #4]
 8003f4a:	46ca      	mov	sl, r9
 8003f4c:	e724      	b.n	8003d98 <_ZN16ThreePhaseDriver4mainEv+0x168>
 8003f4e:	bf00      	nop
 8003f50:	20003164 	.word	0x20003164
 8003f54:	08005060 	.word	0x08005060
 8003f58:	20000ac8 	.word	0x20000ac8
 8003f5c:	200031e4 	.word	0x200031e4
 8003f60:	44000000 	.word	0x44000000
 8003f64:	00000000 	.word	0x00000000
 8003f68:	461c4000 	.word	0x461c4000
 8003f6c:	05b05b06 	.word	0x05b05b06
 8003f70:	aaaaaaab 	.word	0xaaaaaaab
 8003f74:	40020800 	.word	0x40020800
 8003f78:	b60b60b7 	.word	0xb60b60b7

08003f7c <memmove>:
 8003f7c:	4288      	cmp	r0, r1
 8003f7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f80:	d90d      	bls.n	8003f9e <memmove+0x22>
 8003f82:	188b      	adds	r3, r1, r2
 8003f84:	4298      	cmp	r0, r3
 8003f86:	d20a      	bcs.n	8003f9e <memmove+0x22>
 8003f88:	1884      	adds	r4, r0, r2
 8003f8a:	2a00      	cmp	r2, #0
 8003f8c:	d051      	beq.n	8004032 <memmove+0xb6>
 8003f8e:	4622      	mov	r2, r4
 8003f90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f94:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f98:	4299      	cmp	r1, r3
 8003f9a:	d1f9      	bne.n	8003f90 <memmove+0x14>
 8003f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f9e:	2a0f      	cmp	r2, #15
 8003fa0:	d948      	bls.n	8004034 <memmove+0xb8>
 8003fa2:	ea41 0300 	orr.w	r3, r1, r0
 8003fa6:	079b      	lsls	r3, r3, #30
 8003fa8:	d146      	bne.n	8004038 <memmove+0xbc>
 8003faa:	f100 0410 	add.w	r4, r0, #16
 8003fae:	f101 0310 	add.w	r3, r1, #16
 8003fb2:	4615      	mov	r5, r2
 8003fb4:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8003fb8:	f844 6c10 	str.w	r6, [r4, #-16]
 8003fbc:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8003fc0:	f844 6c0c 	str.w	r6, [r4, #-12]
 8003fc4:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8003fc8:	f844 6c08 	str.w	r6, [r4, #-8]
 8003fcc:	3d10      	subs	r5, #16
 8003fce:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8003fd2:	f844 6c04 	str.w	r6, [r4, #-4]
 8003fd6:	2d0f      	cmp	r5, #15
 8003fd8:	f103 0310 	add.w	r3, r3, #16
 8003fdc:	f104 0410 	add.w	r4, r4, #16
 8003fe0:	d8e8      	bhi.n	8003fb4 <memmove+0x38>
 8003fe2:	f1a2 0310 	sub.w	r3, r2, #16
 8003fe6:	f023 030f 	bic.w	r3, r3, #15
 8003fea:	f002 0e0f 	and.w	lr, r2, #15
 8003fee:	3310      	adds	r3, #16
 8003ff0:	f1be 0f03 	cmp.w	lr, #3
 8003ff4:	4419      	add	r1, r3
 8003ff6:	4403      	add	r3, r0
 8003ff8:	d921      	bls.n	800403e <memmove+0xc2>
 8003ffa:	1f1e      	subs	r6, r3, #4
 8003ffc:	460d      	mov	r5, r1
 8003ffe:	4674      	mov	r4, lr
 8004000:	3c04      	subs	r4, #4
 8004002:	f855 7b04 	ldr.w	r7, [r5], #4
 8004006:	f846 7f04 	str.w	r7, [r6, #4]!
 800400a:	2c03      	cmp	r4, #3
 800400c:	d8f8      	bhi.n	8004000 <memmove+0x84>
 800400e:	f1ae 0404 	sub.w	r4, lr, #4
 8004012:	f024 0403 	bic.w	r4, r4, #3
 8004016:	3404      	adds	r4, #4
 8004018:	4421      	add	r1, r4
 800401a:	4423      	add	r3, r4
 800401c:	f002 0203 	and.w	r2, r2, #3
 8004020:	b162      	cbz	r2, 800403c <memmove+0xc0>
 8004022:	3b01      	subs	r3, #1
 8004024:	440a      	add	r2, r1
 8004026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800402a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800402e:	428a      	cmp	r2, r1
 8004030:	d1f9      	bne.n	8004026 <memmove+0xaa>
 8004032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004034:	4603      	mov	r3, r0
 8004036:	e7f3      	b.n	8004020 <memmove+0xa4>
 8004038:	4603      	mov	r3, r0
 800403a:	e7f2      	b.n	8004022 <memmove+0xa6>
 800403c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800403e:	4672      	mov	r2, lr
 8004040:	e7ee      	b.n	8004020 <memmove+0xa4>
 8004042:	bf00      	nop

08004044 <memset>:
 8004044:	b470      	push	{r4, r5, r6}
 8004046:	0786      	lsls	r6, r0, #30
 8004048:	d046      	beq.n	80040d8 <memset+0x94>
 800404a:	1e54      	subs	r4, r2, #1
 800404c:	2a00      	cmp	r2, #0
 800404e:	d041      	beq.n	80040d4 <memset+0x90>
 8004050:	b2ca      	uxtb	r2, r1
 8004052:	4603      	mov	r3, r0
 8004054:	e002      	b.n	800405c <memset+0x18>
 8004056:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800405a:	d33b      	bcc.n	80040d4 <memset+0x90>
 800405c:	f803 2b01 	strb.w	r2, [r3], #1
 8004060:	079d      	lsls	r5, r3, #30
 8004062:	d1f8      	bne.n	8004056 <memset+0x12>
 8004064:	2c03      	cmp	r4, #3
 8004066:	d92e      	bls.n	80040c6 <memset+0x82>
 8004068:	b2cd      	uxtb	r5, r1
 800406a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800406e:	2c0f      	cmp	r4, #15
 8004070:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004074:	d919      	bls.n	80040aa <memset+0x66>
 8004076:	f103 0210 	add.w	r2, r3, #16
 800407a:	4626      	mov	r6, r4
 800407c:	3e10      	subs	r6, #16
 800407e:	2e0f      	cmp	r6, #15
 8004080:	f842 5c10 	str.w	r5, [r2, #-16]
 8004084:	f842 5c0c 	str.w	r5, [r2, #-12]
 8004088:	f842 5c08 	str.w	r5, [r2, #-8]
 800408c:	f842 5c04 	str.w	r5, [r2, #-4]
 8004090:	f102 0210 	add.w	r2, r2, #16
 8004094:	d8f2      	bhi.n	800407c <memset+0x38>
 8004096:	f1a4 0210 	sub.w	r2, r4, #16
 800409a:	f022 020f 	bic.w	r2, r2, #15
 800409e:	f004 040f 	and.w	r4, r4, #15
 80040a2:	3210      	adds	r2, #16
 80040a4:	2c03      	cmp	r4, #3
 80040a6:	4413      	add	r3, r2
 80040a8:	d90d      	bls.n	80040c6 <memset+0x82>
 80040aa:	461e      	mov	r6, r3
 80040ac:	4622      	mov	r2, r4
 80040ae:	3a04      	subs	r2, #4
 80040b0:	2a03      	cmp	r2, #3
 80040b2:	f846 5b04 	str.w	r5, [r6], #4
 80040b6:	d8fa      	bhi.n	80040ae <memset+0x6a>
 80040b8:	1f22      	subs	r2, r4, #4
 80040ba:	f022 0203 	bic.w	r2, r2, #3
 80040be:	3204      	adds	r2, #4
 80040c0:	4413      	add	r3, r2
 80040c2:	f004 0403 	and.w	r4, r4, #3
 80040c6:	b12c      	cbz	r4, 80040d4 <memset+0x90>
 80040c8:	b2c9      	uxtb	r1, r1
 80040ca:	441c      	add	r4, r3
 80040cc:	f803 1b01 	strb.w	r1, [r3], #1
 80040d0:	429c      	cmp	r4, r3
 80040d2:	d1fb      	bne.n	80040cc <memset+0x88>
 80040d4:	bc70      	pop	{r4, r5, r6}
 80040d6:	4770      	bx	lr
 80040d8:	4614      	mov	r4, r2
 80040da:	4603      	mov	r3, r0
 80040dc:	e7c2      	b.n	8004064 <memset+0x20>
 80040de:	bf00      	nop
